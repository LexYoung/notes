<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qcom platform battery capacity algorithm</title>
    <url>/2020/09/24/Qcom-platform-battery-capacity-algorithm/</url>
    <content><![CDATA[<!-- toc -->
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Acronym</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>BMS</td>
<td>battery monitoring system</td>
</tr>
<tr>
<td>RC</td>
<td>remaing capacity.<br>当前状态下的剩余电量，充满电时RC=FCC</td>
</tr>
<tr>
<td>UUC</td>
<td>unusable capacity.<br>由于电池电阻导致的电池压降等原因而无法使用的电量</td>
</tr>
<tr>
<td>UC</td>
<td>usable capacity.<br>UC=FCC-UUC</td>
</tr>
<tr>
<td>RUC</td>
<td>Remaining Usable Capacity。RUC=RC-UUC</td>
</tr>
<tr>
<td>SoC</td>
<td>State of Charge.<br>剩余电量与总电量的比值，SoC = RUC/UC = (RC-UUC)/(FCC-UUC)</td>
</tr>
<tr>
<td>OCV</td>
<td>Open Circuit Voltage.<br>近乎于0电流情况下的稳定电压，电池带负载工作后，需要5~30min恢复OCV。</td>
</tr>
<tr>
<td>ACC</td>
<td>Apparent Charge Capacity.<br>FCC of the battery modified by increased battery resistance due to temperature and loaded system cutoff voltage</td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>目前接触到的高通有关电池电量算法一共有4种：</p>
<ol>
<li>Voltage Mode Battery Monitor System</li>
<li>Battery Monitor System</li>
<li>Qualcomm Battery Gauge</li>
<li>Fuel Gauge</li>
</ol>
<p>其中前3种为软件算法，最后一种为硬件算法，接下来我们分别介绍。</p>
<a id="more"></a>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Voltage-Mode-Battery-Monitor-System"><a href="#Voltage-Mode-Battery-Monitor-System" class="headerlink" title="Voltage Mode Battery Monitor System"></a>Voltage Mode Battery Monitor System</h2><h3 id="VM-BMS-硬件框架"><a href="#VM-BMS-硬件框架" class="headerlink" title="VM-BMS 硬件框架"></a>VM-BMS 硬件框架</h3><p>VM-BMS主体框架图如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Voltage_Mode_BMS_Block_Diagram.PNG" alt="Voltage_Mode_BMS_Block_Diagram"></p>
<p>VM-BMS使用电池电压来计算产生SOC值，其中涉及到ADC的测量和Vbatt的测量</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="VM-BMS状态机"><a href="#VM-BMS状态机" class="headerlink" title="VM-BMS状态机"></a>VM-BMS状态机</h3><p>VM-BMS在运行过程中，主要处于下面状态:<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/VM-BMS_Modes_of_Operation.PNG" alt="VM-BMS_states"></p>
<p>S1 - Normal state</p>
<ul>
<li>系统处于唤醒且不在CV charging模式  </li>
<li>BMS按照配置的速率读取Vbat  </li>
<li>BMS读取Vbat的采样，然后存储在FIFO中(默认长度为5)</li>
<li>Software processes SoC using latest accumulated value</li>
</ul>
<p>S2 - CV state</p>
<ul>
<li>系统处于CV charging模式</li>
<li>BMS按照配置的速率读取Vbat，速率比S1快</li>
<li>BMS读取Vbat的采样，然后存储在FIFO中(默认长度为5)</li>
<li>Software processes SoC using latest Vbat value</li>
</ul>
<p>S3 - OCV state</p>
<ul>
<li>系统处于sleep/standby状态，如果有充电器连接，需要处于end of chager状态</li>
<li>BMS按照配置的速率读取Vbat  </li>
<li>如果连续读取的Vbat值落在公差范围内，更新OCV的值</li>
<li>OCV-SOC对照表被用着去计算SOC的值</li>
<li>Software processes SoC using latest OCV value  </li>
</ul>
<p>S7 - PON OSV state</p>
<ul>
<li>系统开机状态</li>
<li>如果关机SoC有效,那么关机SoC的值将作为BMS算法的开始点，否则使用第一个有效的VADC</li>
<li>OVC能被直接转换为相应的启动SoC值</li>
</ul>
<p>注：<br>在当前的软件设计中，只要系统处于唤醒，BMS强制进入S2，只要系统处于suspends，BMS强制进入S3</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="VM-BMS-算法"><a href="#VM-BMS-算法" class="headerlink" title="VM-BMS 算法"></a>VM-BMS 算法</h3><p>1.VM-BMS 通过 GOOD_OCV 和 FIFO中的数据来计算出 Ibat 和 OCV</p>
<p>GOOD_OCV 值的获取如下：</p>
<ul>
<li>PON_OCV if cold boot</li>
<li>Shut down SoC if fast reboot</li>
<li>Updated OCV if system enters S3 state and an OCV update occurs</li>
</ul>
<p>2.通过 OCV 和 temperature 查找对应的数据表获取Internal_Soc</p>
<script type="math/tex; mode=display">
Internal_Soc = LUT(OCV,temperature)</script><p>3.报告给用户的SoC</p>
<ul>
<li><p>充电时:  </p>
<script type="math/tex; mode=display">
Reported SoC = Internal SoC</script></li>
<li><p>放电时:  </p>
<script type="math/tex; mode=display">
Reported SoC = Internal SoC - (1-(ACC/FCC))</script><p>FCC：可从满电池中获取的总电量.<br>ACC：由于温度和system cut-off voltage的因素，实际设备可从满电池中获取的总电量</p>
</li>
</ul>
<p>我们先看充电时的算法示例，即如何获取到Internal SoC<br>已知 OCV = 4180mV，temperature = 28℃，<br>求解Internal SoC</p>
<p>OCV-temperature-SOC 表如下：</p>
<p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Sample_OCV-temperature-SOC_lookup_table-1.PNG" alt="Sample OCV-temperature-SOC lookup table-1"></p>
<p>从已知可得28℃在25℃和40℃之间</p>
<ul>
<li>设left_col = COL[3]</li>
<li>设right_col = COL[4]</li>
</ul>
<p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Sample_OCV-temperature-SOC_lookup_table-2.PNG" alt="Sample OCV-temperature-SOC lookup table-2"></p>
<p>如上图，在 left_col 中，4180mV在 SOC-85 和 SOC-90 对应的电压值之间，通过下面公式获取25°时，4180mV对应的SOC值</p>
<script type="math/tex; mode=display">
SOC_{interpolate\_left}=(90-85)* \frac {4180-4156} {4210-4156} + 85 = 87.2</script><p>同理，在 right_col 中，4180mV在 SOC-85 和 SOC-90 对应的电压值之间，通过下面公式获取40°时，4180mV对应的SOC值</p>
<script type="math/tex; mode=display">
SOC_{interpolate\_left}=(90-85)* \frac {4180-4154} {4210-41564} + 85 = 87.3</script><p>现在我们知道25℃和40℃时，4180mV对应的SOC值，通过下面的公式我们可以获取28℃时，4180mV对应的SOC值，即Internal SoC</p>
<script type="math/tex; mode=display">
SOC\{n\}=(87.3-87.2)* \frac {28-25} {40-25} + 87.2 = 87.22</script><p>接下来我们来看放电时 VM-BMS 的算法，在放电时，需要引入ACC的概念(需要考虑到 system cut-off voltage)</p>
<p>ACC = FCC - UCC = LUT(cut-off_voltage,temperature,Ibat)</p>
<p>current-temperatu-ACC对照表如下：</p>
<p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/ACC_lookup_table-1.PNG" alt="ACC_lookup_table"></p>
<p>可以看出，当放电电流增大时，ACC变小.</p>
<p>已知 OCV = 4180mV，temperature = 10℃，放电电流=800mA<br>求解Reported SoC<br>首先按照上面的方法，查找LUT(OCV,temperature)，计算出Internal SoC.</p>
<p>然后查找ACC-temperature-SOC对照表，如下：</p>
<p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/ACC_lookup_table-2.PNG" alt="ACC_lookup_table-2"></p>
<p>由已知条件temperature = 10℃，在0℃和25℃之间，<br>放电电流=800mA，在500mA~1000mA之间，做如下图：</p>
<p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/ACC_lookup_table-3.PNG" alt="ACC_lookup_table-3"></p>
<p>通过如下算式，我们可以计算出temperature = 10℃，放电电流=800mA时，ACC的值</p>
<script type="math/tex; mode=display">
ACC@0deg = =(764-1246)* \frac {800-500} {1000-500} + 1246 = 956.8</script><script type="math/tex; mode=display">
ACC@25deg = =(1337-1414)* \frac {800-500} {1000-500} + 1414 = 1367.8</script><script type="math/tex; mode=display">
ACC@10deg = =(1367.8-956.8)* \frac {10-0} {25-0} + 956.8 = 1121.2</script><p>最后通过放电时的公式计算出Reported SoC.</p>
<script type="math/tex; mode=display">
Reported SoC = Internal SoC - (1-(ACC/FCC))</script><p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="VM-BMS-软件"><a href="#VM-BMS-软件" class="headerlink" title="VM-BMS 软件"></a>VM-BMS 软件</h3><h4 id="VM-BMS-代码路径："><a href="#VM-BMS-代码路径：" class="headerlink" title="VM-BMS 代码路径："></a>VM-BMS 代码路径：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kernel/msm<span class="number">-3.18</span>/drivers/power/qpnp-vm-bms.c</span><br><span class="line">kernel/msm<span class="number">-3.18</span>/drivers/power/batterydata-lib.c</span><br><span class="line">kernel/msm<span class="number">-3.18</span>/drivers/power/batterydata-interface.c</span><br><span class="line">kernel/msm<span class="number">-3.18</span>/drivers/of/of_batterydata.c</span><br></pre></td></tr></table></figure>
<h4 id="VM-BMS-软件框图："><a href="#VM-BMS-软件框图：" class="headerlink" title="VM-BMS 软件框图："></a>VM-BMS 软件框图：</h4><p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/VM-BMS_Software_Architecture.PNG" alt="VM-BMS_Software_Architecture"></p>
<p>注：用户空间算法以二进制形式提供给客户</p>
<h4 id="VM-BMS-代码分析"><a href="#VM-BMS-代码分析" class="headerlink" title="VM-BMS 代码分析"></a>VM-BMS 代码分析</h4><p>1.首先分析qpnp-vm-bms.c的probe函数，大致调用关系如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/qpnp_vm_bms_probe-flow-chart.PNG" alt="qpnp_vm_bms_probe-flow-chart"></p>
<p>其中涉及到的主要函数即作用如下表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>bms_get_adc</td>
<td>获取 VADC 和 ADC_TM clients</td>
</tr>
<tr>
<td>qpnp_pon_is_warm_reset</td>
<td>判断设备是否为warm reset启动</td>
</tr>
<tr>
<td>parse_spmi_dt_propertie</td>
<td>解析spmi相关节点</td>
</tr>
<tr>
<td>parse_bms_dt_properties</td>
<td>解析bms相关节点</td>
</tr>
<tr>
<td>set_battery_data</td>
<td>读取battery id电压，计算出电阻值，通过匹配最接近的电阻值来获取指定battery data（dts），赋给bms_battery_data结构体</td>
</tr>
<tr>
<td>config_battery_data</td>
<td>给batterydata-interface.c中的battery_data结构体赋值</td>
</tr>
<tr>
<td>bms_init_defaults</td>
<td>初始化bms相关变量</td>
</tr>
<tr>
<td>bms_load_hw_defaults</td>
<td>通过dts属性配置硬件寄存器</td>
</tr>
<tr>
<td>setup_vbat_monitoring</td>
<td>为电池低压检测</td>
</tr>
<tr>
<td>bms_request_irqs</td>
<td>Sets up VBAT ADC_TM channel for low vbat monitor</td>
</tr>
<tr>
<td>battery_insertion_check</td>
<td>Restarts BMS hardware to start BMS calculation</td>
</tr>
<tr>
<td>battery_status_check</td>
<td>检测充电状态</td>
</tr>
<tr>
<td>register_bms_char_device</td>
<td>注册bms字符设备</td>
</tr>
<tr>
<td>calculate_initial_soc</td>
<td>设备启动后，计算第一次的SOC值</td>
</tr>
<tr>
<td>calculate_initial_aging_comp</td>
<td>读取charge_cycles和charge_increase数据</td>
</tr>
<tr>
<td>monitor_soc_work</td>
<td>计算soc值</td>
</tr>
<tr>
<td>voltage_soc_timeout_work</td>
<td>超过指定时间，如果bms字符设备没有被open，设置相关flag，后续使用电压来计算SOC，而并非bms算法</td>
</tr>
</tbody>
</table>
</div>
<p>2.接下来我们介绍其中的核心函数monitor_soc_work，主要流程如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">monitor_soc_work</span><span class="params">(struct work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;chip-&gt;last_soc_mutex);<span class="comment">//上锁</span></span><br><span class="line"></span><br><span class="line">    battery_voltage_check(chip);<span class="comment">//检测充电的状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chip-&gt;dt.cfg_use_voltage_soc) &#123;</span><br><span class="line">        <span class="comment">//使用voltage base on SOC,计算soc值</span></span><br><span class="line">        calculate_soc_from_voltage(chip);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        get_batt_therm(chip, &amp;batt_temp);<span class="comment">//获取电池温度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查表获取新的soc值</span></span><br><span class="line">        new_soc = lookup_soc_ocv(chip, chip-&gt;last_ocv_uv,batt_temp);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//简单校准soc值</span></span><br><span class="line">        new_soc = clamp_soc_based_on_voltage(chip, new_soc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过查表计算出来的chip-&gt;calculated_soc值有变化</span></span><br><span class="line">        <span class="keyword">if</span> (chip-&gt;calculated_soc != new_soc) &#123;</span><br><span class="line">            chip-&gt;calculated_soc = new_soc;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chip-&gt;calculated_soc == <span class="number">100</span>)</span><br><span class="line">                <span class="comment">/* update last_soc immediately */</span></span><br><span class="line">                report_vm_bms_soc(chip);</span><br><span class="line"></span><br><span class="line">            power_supply_changed(&amp;chip-&gt;bms_psy);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//上报的soc值还没有更新到与chip-&gt;calculated_soc同步</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chip-&gt;last_soc != chip-&gt;calculated_soc) &#123;</span><br><span class="line">            pr_debug(<span class="string">&quot;update bms_psy\n&quot;</span>);</span><br><span class="line">            power_supply_changed(&amp;chip-&gt;bms_psy);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            report_vm_bms_soc(chip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* low SOC configuration */</span></span><br><span class="line">    low_soc_check(chip);<span class="comment">// 低电量，重新设置fifo长度</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * schedule the work only if last_soc has not caught up with</span></span><br><span class="line"><span class="comment">	 * the calculated soc or if we are using voltage based soc</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="comment">//当上报的soc值和计算出来的soc值不匹配时，延时调用该队列</span></span><br><span class="line">	<span class="keyword">if</span> ((chip-&gt;last_soc != chip-&gt;calculated_soc) ||</span><br><span class="line">					chip-&gt;dt.cfg_use_voltage_soc)</span><br><span class="line">		schedule_delayed_work(&amp;chip-&gt;monitor_soc_work,</span><br><span class="line">			msecs_to_jiffies(get_calculation_delay_ms(chip)));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;reported_soc_in_use &amp;&amp; chip-&gt;charger_removed_since_full</span><br><span class="line">				&amp;&amp; !chip-&gt;charger_reinserted) &#123;</span><br><span class="line">		<span class="comment">/* record the elapsed time after last reported_soc change */</span></span><br><span class="line">		chip-&gt;reported_soc_change_sec += chip-&gt;delta_time_s;</span><br><span class="line">		pr_debug(<span class="string">&quot;reported_soc_change_sec=%d\n&quot;</span>,</span><br><span class="line">					chip-&gt;reported_soc_change_sec);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* above the catch up time, calculate new reported_soc */</span></span><br><span class="line">		<span class="keyword">if</span> (chip-&gt;reported_soc_change_sec &gt; UI_SOC_CATCHUP_TIME) &#123;</span><br><span class="line">			calculate_reported_soc(chip);</span><br><span class="line">			chip-&gt;reported_soc_change_sec = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mutex_unlock(&amp;chip-&gt;last_soc_mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要作用是检测并计算soc值，主要流程图如下：</p>
<p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/monitor_soc_work.PNG" alt="monitor_soc_work"></p>
<p>3.monitor_soc_work其中还涉及到的核心函数report_vm_bms_soc，主要流程如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">report_vm_bms_soc</span><span class="params">(struct qpnp_bms_chip *chip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	soc = chip-&gt;calculated_soc;</span><br><span class="line">	charging = is_battery_charging(chip);<span class="comment">//判断充电状态</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算充电时间</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;last_soc != -EINVAL) &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * last_soc &lt; soc  ... if we have not been charging at all</span></span><br><span class="line"><span class="comment">		 * since the last time this was called, report previous SoC.</span></span><br><span class="line"><span class="comment">		 * Otherwise, scale and catch up.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">        get_batt_therm(chip, &amp;batt_temp);<span class="comment">//获取电池温度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果last_soc小于calculated_soc：</span></span><br><span class="line">        <span class="comment">//1.非充电状态，上报之前的SOC值</span></span><br><span class="line">        <span class="comment">//2.充电状态，不立即报告高值，而是根据充电时间加权平均值将值从prev_soc缓慢地缩放到新的soc</span></span><br><span class="line">		<span class="keyword">if</span> (chip-&gt;last_soc &lt; soc &amp;&amp; !charging)</span><br><span class="line">			soc = chip-&gt;last_soc;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (chip-&gt;last_soc &lt; soc &amp;&amp; soc != <span class="number">100</span>)</span><br><span class="line">			soc = scale_soc_while_chg(chip, charge_time_sec,chip-&gt;catch_up_time_sec,soc, chip-&gt;chg_start_soc);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果电池电压接近cut-off voltage，或者电池温度处于低温，</span></span><br><span class="line">        <span class="comment">//这2中情况允许出现SOC值大的变化，即soc_change值较大</span></span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在resume情况下，如果ocv发生变化，会进行赋值chip-&gt;last_soc_unbound = true</span></span><br><span class="line">        <span class="comment">//这种情况下soc_change可以为较大值，否则只能为1.</span></span><br><span class="line">		<span class="keyword">if</span> (chip-&gt;last_soc_unbound) &#123;</span><br><span class="line">			chip-&gt;last_soc_unbound = <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * if soc have not been unbound by resume,</span></span><br><span class="line"><span class="comment">			 * only change reported SoC by 1.</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			soc_change = min(<span class="number">1</span>, soc_change);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据上面的条件计算出soc_change值，在此基础上修改soc值，防止发生不必要的跳变</span></span><br><span class="line">		<span class="keyword">if</span> (soc &lt; chip-&gt;last_soc &amp;&amp; soc != <span class="number">0</span>)</span><br><span class="line">			soc = chip-&gt;last_soc - soc_change;</span><br><span class="line">		<span class="keyword">if</span> (soc &gt; chip-&gt;last_soc &amp;&amp; soc != <span class="number">100</span>)</span><br><span class="line">			soc = chip-&gt;last_soc + soc_change;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	soc = bound_soc(soc);<span class="comment">//防止soc小于0或者大于100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在如下情况检测、更新end of charger</span></span><br><span class="line">    <span class="comment">//1.soc发生变化 2.soc值为100</span></span><br><span class="line">	<span class="keyword">if</span> ((soc != chip-&gt;last_soc) || (soc == <span class="number">100</span>)) &#123;</span><br><span class="line">		chip-&gt;last_soc = soc;</span><br><span class="line">		check_eoc_condition(chip);<span class="comment">//检测停止充电条件</span></span><br><span class="line">		<span class="keyword">if</span> ((chip-&gt;dt.cfg_soc_resume_limit &gt; <span class="number">0</span>) &amp;&amp; !charging)</span><br><span class="line">			check_recharge_condition(chip);<span class="comment">//检测recharge条件</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把ocv和soc的值存储在寄存器中</span></span><br><span class="line">	backup_ocv_soc(chip, chip-&gt;last_ocv_uv, chip-&gt;last_soc);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> chip-&gt;last_soc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要作用<br>1.在chip-&gt;calculated_soc的基础上，计算出chip-&gt;last_soc.(防止跳变)<br>2.检测停充和复充条件<br>3.存储chip-&gt;last_soc和chip-&gt;last_ocv_uv到寄存器中</p>
<p>主要流程图如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/report_vm_bms_soc.PNG" alt="report_vm_bms_soc"></p>
<p>4.接下来看下驱动提供的property interface，当monitor_soc_work调用power_supply_changed时，发生uevent事件给用户空间 vm-bms.c(非开源)，用户空间通过get_property获取电池相关参数，计算出last_ocv_uv，然后通过set_property来设置OCV，启动monitor_soc_work工作队列，代码流程如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------kernel/msm-3.18/drivers/power/qpnp-linear-charger.c---------</span></span><br><span class="line">chip-&gt;bms_psy-&gt;get_property(chip-&gt;bms_psy,POWER_SUPPLY_PROP_CAPACITY, &amp;ret);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------kernel/msm-3.18/drivers/power/qpnp-vm-bms.c---------                </span></span><br><span class="line">----&gt;get_prop_bms_capacity(chip);</span><br><span class="line">    ----&gt;report_state_of_charge(chip);</span><br><span class="line">        ----&gt;report_voltage_based_soc(chip);<span class="comment">//基于voltage计算soc</span></span><br><span class="line">        ----&gt;report_vm_bms_soc(chip);<span class="comment">//基于bms计算soc</span></span><br></pre></td></tr></table></figure>
<p>流程图如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/property_interface.PNG" alt="property_interface"></p>
<p>5.涉及到的表格</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">DTS节点</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">qcom,fcc-temp-lut</td>
<td>不同温度下，FCC(Full-charge capacity)的值.</td>
</tr>
<tr>
<td style="text-align:left">qcom,pc-temp-ocv-lut</td>
<td>不同温度下，通过OVC的值映射到对应的SOC值.</td>
</tr>
<tr>
<td style="text-align:left">qcom,rbatt-sf-lut</td>
<td>不同温度下，通过SOC值映射到对应的内阻值，主要考虑对OCV的修正，new_ocv=ocv+rbatt(内阻)*current（当前电流）.</td>
</tr>
<tr>
<td style="text-align:left">qcom,ibat-acc-lut</td>
<td>不同温度下，通过当前的电流值映射到ACC的值.</td>
</tr>
</tbody>
</table>
</div>
<p><strong>总结：</strong><br>1.vm-bms 运行 monitor_soc_work 工作队列来执行主要的工作：通过last_ocv_uv，查表得到SOC，经过修正得到上报的SOC值.<br>2.当驱动调用power_supply_changed，表示power supply class有property发生变化，发送uevent事件，上层获取事件后，调用getprop来获取相关参数：内阻，电流等，在用户空间 vm-bms.c(非开源)估算出last_ocv_uv，然后调用setprop，传入参数：POWER_SUPPLY_PROP_VOLTAGE_OCV,重新调用monitor_soc_work 工作队列. </p>
<p>注：PM8909/PM8916支持VM-BMS</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Battery-Monitor-System"><a href="#Battery-Monitor-System" class="headerlink" title="Battery Monitor System"></a>Battery Monitor System</h2><p>VM-BMS主要基于OCV的值来进行计算出SOC值，BMS在VM-BMS的基础上，主要引入了库仑计，利用经过电池的电流的累计，计算出电荷量，即综合raw OCV 和 Coulomb count (CC) data计算出SOC值。<br>因为与VM-BMS比较类似，并且目前手上没有PM8921/PM8941的代码，所以这里简单介绍下BMS。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="BMS-硬件框架"><a href="#BMS-硬件框架" class="headerlink" title="BMS 硬件框架"></a>BMS 硬件框架</h3><p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/BMS_Block_Diagram.PNG" alt="BMS_Block_Diagram"></p>
<ul>
<li>通过Vbatt计算出OCV</li>
<li>通过Vsensor-B和Rsensor计算出电流，CCADC采样电流计算出经过电池的电荷量</li>
</ul>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="BMS状态机"><a href="#BMS状态机" class="headerlink" title="BMS状态机"></a>BMS状态机</h3><p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/BMS_State_Machine_Details.PNG" alt="BMS_State_Machine_Details"></p>
<ul>
<li>S1 降低测试频率，减少功耗</li>
<li>S2 增大测试频率，提高精度</li>
<li>S3 对Vbatt和Vsensor大量采样，更新 last good OCV，同时对库仑计数(CC)清零</li>
</ul>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="BMS-算法"><a href="#BMS-算法" class="headerlink" title="BMS 算法"></a>BMS 算法</h3><p>1.库仑计数(CC)跟踪OCV更新之间的电量损失<br>2.当OCV 更新时，库仑计数(CC)复位清零。<br>3.利用OCV值查表获取对应soc值<br>4.最终的SOC值 = (最新的OCV值对应的电量 - 库仑计数(CC)对应的电量 - 不可用电量)/(满电量-不可用电量)</p>
<p>公式如下：</p>
<script type="math/tex; mode=display">
SOC=\frac {Lookup(OCV) * FCC - \frac {CC} {R_sense}UCC} {FCC - UUC}</script><p>其中UUC也是根据Rbatt，Vcut-off 查表获取。<br>可以看出，和 vm-bms 对比，主要增加了利用库仑计数（CC）来优化OCV未更新时SOC的计算</p>
<h3 id="BMS-软件"><a href="#BMS-软件" class="headerlink" title="BMS 软件"></a>BMS 软件</h3><h4 id="BMS-软件框图"><a href="#BMS-软件框图" class="headerlink" title="BMS 软件框图"></a>BMS 软件框图</h4><p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/PM8921_BMS_Linux_Android_Software_Architecture.PNG" alt="PM8921_BMS_Linux_Android_Software_Architecture"></p>
<p>基本和vm-bms一致。</p>
<h4 id="BMS-代码分析"><a href="#BMS-代码分析" class="headerlink" title="BMS 代码分析"></a>BMS 代码分析</h4><p>主要代码流程如下，流程图省略。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qpnp_bms_probe</span><span class="params">(struct spmi_device *spmi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//和vm-bms流程基本一致,这里只列出其中不一致的核心代码</span></span><br><span class="line"></span><br><span class="line">    INIT_DELAYED_WORK(&amp;chip-&gt;calculate_soc_delayed_work,calculate_soc_work);</span><br><span class="line">	INIT_WORK(&amp;chip-&gt;recalc_work, recalculate_work);</span><br><span class="line"></span><br><span class="line">    calculate_soc_work(&amp;(chip-&gt;calculate_soc_delayed_work.work));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate_soc_work</span><span class="params">(struct work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	recalculate_soc(chip);</span><br><span class="line">	schedule_delayed_work(&amp;chip-&gt;calculate_soc_delayed_work,...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recalculate_work</span><span class="params">(struct work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	recalculate_soc(chip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从上面的代码可以看出，calculate_soc_delayed_work 工作队列一直循环延时调用 recalculate_soc 函数。<br>而 recalc_work 工作队列调用一次 recalculate_soc 函数，所以重点在 recalculate_soc 函数，我们接下来重点分析 recalculate_soc 函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recalculate_soc</span><span class="params">(struct qpnp_bms_chip *chip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取电池温度</span></span><br><span class="line">	pnp_vadc_read(chip-&gt;vadc_dev, LR_MUX1_BATT_THERM,&amp;result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取电池温度值</span></span><br><span class="line">	batt_temp = (<span class="keyword">int</span>)result.physical;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取库伦计数(CC) 和 last good ocv</span></span><br><span class="line">    read_soc_params_raw(chip, &amp;raw, batt_temp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//计算出各种参数，利用参数计算出soc值，根据soc值计算出上报的soc值。</span></span><br><span class="line">	soc = calculate_state_of_charge(chip,&amp;raw, batt_temp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> soc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate_state_of_charge</span><span class="params">(struct qpnp_bms_chip *chip,</span></span></span><br><span class="line"><span class="function"><span class="params">					struct raw_soc_params *raw,</span></span></span><br><span class="line"><span class="function"><span class="params">					<span class="keyword">int</span> batt_temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//计算充电时间，FCC，剩余电量，库仑计数(CC),Rbat,Iavg等参数</span></span><br><span class="line">	calculate_soc_params(chip, raw, &amp;params, batt_temp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用上面计算的参数和公式 RC-UUC/FCC-UUC 计算出soc值</span></span><br><span class="line">	soc = calculate_raw_soc(chip, raw, &amp;params, batt_temp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开机第一次计算，利用 shutdown_soc 来修改soc值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* always clamp soc due to BMS hw/sw immaturities */</span></span><br><span class="line">	new_calculated_soc = clamp_soc_based_on_voltage(chip,</span><br><span class="line">					new_calculated_soc);</span><br><span class="line"></span><br><span class="line">	new_calculated_soc = bound_soc(new_calculated_soc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果与上次计算soc的值的时间相差超过规定时间，表明系统一定进入了长时间休眠状态，Soc状态设置为unbound</span></span><br><span class="line">	chip-&gt;last_soc_unbound = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//计算出的soc值发生变化，上报给上层</span></span><br><span class="line">	<span class="keyword">if</span> (new_calculated_soc != previous_soc &amp;&amp; chip-&gt;bms_psy_registered) &#123;</span><br><span class="line">		power_supply_changed(&amp;chip-&gt;bms_psy);</span><br><span class="line">		pr_debug(<span class="string">&quot;power supply changed\n&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Call report state of charge anyways to periodically update</span></span><br><span class="line"><span class="comment">		 * reported SoC. This prevents reported SoC from being stuck</span></span><br><span class="line"><span class="comment">		 * when calculated soc doesn&#x27;t change.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		report_state_of_charge(chip);</span><br><span class="line">		<span class="comment">//根据voltage上报soc值</span></span><br><span class="line">		----&gt;report_voltage_based_soc(chip);</span><br><span class="line">		<span class="keyword">or</span></span><br><span class="line">		<span class="comment">//根据 chip-&gt;calculated_soc 计算出上报的soc值：chip-&gt;last_soc，同时存储SOC和Iavg的值到寄存器</span></span><br><span class="line">		----&gt;report_cc_based_soc(chip);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结：</strong><br>1.获取库伦计数(CC)，充电时间，FCC，剩余电量，库仑计数(CC),Rbat,Iavg等参数<br>2.利用上面参数计算soc值，在vm-bms中，用户空间(非开源)利用这些参数计算出OCV，然后利用OCV查表计算出osc值<br>3.根据上面的soc值，计算出上报的soc值</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Qualcomm-battery-gauge"><a href="#Qualcomm-battery-gauge" class="headerlink" title="Qualcomm battery gauge"></a>Qualcomm battery gauge</h2><h3 id="QG-硬件框架"><a href="#QG-硬件框架" class="headerlink" title="QG 硬件框架"></a>QG 硬件框架</h3><p>硬件大致框图如下:<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Qualcomm_Battery_Gauge_Hardware_Block_Diagram.PNG" alt="Qualcomm_Battery_Gauge_Hardware_Block_Diagram"></p>
<p>PMI632 Qualcomm battery gauge 硬件的核心由累加器组成，该累加器会定期采样，累加并将Vbatt和Ibatt值保存到PMIC寄存器中，以读取和处理SoC,并使用相同的硬件对电池内阻（ESR）进行估计。</p>
<h3 id="QG-SOC概念"><a href="#QG-SOC概念" class="headerlink" title="QG SOC概念"></a>QG SOC概念</h3><h4 id="1-RAW-SOC"><a href="#1-RAW-SOC" class="headerlink" title="1.RAW SOC"></a>1.RAW SOC</h4><p>RAW SOC是库仑计估算的SOC(CC_SOC)和Vlotage mode估算的SOC(V_SOC)加权评估出来的结果，大致流程如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/RAW_SOC.PNG" alt="RAW_SOC"></p>
<h4 id="2-BATTERY-SOC"><a href="#2-BATTERY-SOC" class="headerlink" title="2.BATTERY SOC"></a>2.BATTERY SOC</h4><p>BATTERY SOC是根据RAW SOC计算出来，同时根据电池的电压，电流和状态进行校正，大致流程如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/BATTERY_SOC.PNG" alt="BATTERY_SOC"></p>
<h4 id="3-SYSTEM-SOC"><a href="#3-SYSTEM-SOC" class="headerlink" title="3.SYSTEM SOC"></a>3.SYSTEM SOC</h4><ul>
<li>SOC point 0%：上报0%的SOC的点将根据截止电压（qcom,vbatt-cutoff-mv）进行收敛，通过设置截止电压，可以使任何期望的电压对应0%的SOC值。</li>
<li>SOC point 100%:上报100%的SOC的点将根据充电电流来决定，截止电流为2种，一种为系统截止电流，即达到该电流时，上报100% SOC，一种是物理充电截止电流，达到该电流时，设备停止充电。<br>系统截止电流对应的dts：qcom,qg-iterm-ma<br>物理充电截止电流对应的dts：qcom,chg-term-current-ma<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/SYSTEM_SOC.PNG" alt="SYSTEM_SOC"></li>
</ul>
<h4 id="4-Monotonic-SOC"><a href="#4-Monotonic-SOC" class="headerlink" title="4.Monotonic SOC"></a>4.Monotonic SOC</h4><p>在截止电压附近，有2种情况，可能导致SOC不单调变化</p>
<ul>
<li>电池内部电阻发生变化</li>
<li>电池负载发生变化</li>
</ul>
<p>为了确保SOC的单调性变化，QG算法确定如下逻辑：</p>
<ul>
<li>当放电或者supplemental模式时，SOC单调递减</li>
<li>当充电时，SOC单调递增</li>
</ul>
<h4 id="5-PON-SOC"><a href="#5-PON-SOC" class="headerlink" title="5.PON SOC"></a>5.PON SOC</h4><p>Ponwer on SOC的值可以通过Shutdown SOC的值获取，但是需要满足几个条件：温度变化，时间长度，SOC变化都在一定设置范围内。如果其中一项不满足，系统将使用PON OCV估算出来的值。</p>
<ul>
<li>qcom,ignore-shutdown-soc-secs = <360>; /<em> phone-off time to ignore shutdown soc </em>/</360></li>
<li>qcom,shutdown-temp-diff = <60>; /<em> battery temp delta to ignore shutdown soc</em>/</60></li>
<li>qcom,shutdown-soc-threshold = <10>; /<em>soc delta between shutdown and pon soc for ignoring shutdown soc </em>/</10></li>
</ul>
<h4 id="6-SOC-FLOW"><a href="#6-SOC-FLOW" class="headerlink" title="6.SOC FLOW"></a>6.SOC FLOW</h4><p>各个SOC的流程框图如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/SOC_FLOW.PNG" alt="SOC_FLOW"><br>具体涉及到的数据流程：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/SOC_FLOW2.PNG" alt="SOC_FLOW2"></p>
<p>基于以上4中SOC，QG算法计算出最终的SOC上报给系统。</p>
<h3 id="QG-算法核心"><a href="#QG-算法核心" class="headerlink" title="QG 算法核心"></a>QG 算法核心</h3><p>QG算法的核心思想如下：</p>
<ol>
<li>从GOOD_OCV或者FIFO Vbatt中计算出OCV</li>
</ol>
<ul>
<li>GOOD_OVC可以考虑为如下值，<ul>
<li>PON_OVC（设备冷启动）</li>
<li>Shutdown Soc（设备快速重启）</li>
<li>记录的OVC（睡眠状态）</li>
</ul>
</li>
</ul>
<ol>
<li>根据battery profile，利用OCV查表计算出V_SOC<br> V_SOC = LUT(OVC, temperature)</li>
<li>基于FIFO Ibatt数据，得出CC_Soc</li>
</ol>
<h3 id="QG-软件"><a href="#QG-软件" class="headerlink" title="QG  软件"></a>QG  软件</h3><h4 id="QG-代码路径"><a href="#QG-代码路径" class="headerlink" title="QG 代码路径"></a>QG 代码路径</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>路径A</td>
<td>kernel/msm-4.14/drivers/power/supply/qcom/qpnp-qg.c</td>
</tr>
<tr>
<td>路径B</td>
<td>kernel/msm-4.14/drivers/power/supply/qcom/qp-soc.c</td>
</tr>
</tbody>
</table>
</div>
<h4 id="QG-软件框图"><a href="#QG-软件框图" class="headerlink" title="QG  软件框图"></a>QG  软件框图</h4><p>软件框图如下：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Qualcomm_Battery_Gauge_software_architecture.PNG" alt="Qualcomm_Battery_Gauge_software_architecture"></p>
<p>该软件框图涉及到2部分：内核空间和用户空间</p>
<ul>
<li>用户空间<ul>
<li>硬件配置</li>
<li>初始化SOC计算 </li>
<li>保存Shutdown OCV状态</li>
<li>电池在位检测</li>
<li>设置battery profile</li>
<li>中断处理</li>
<li>读取FIFO和累加器中的数据</li>
<li>根据OVC（用户空间计算）和电池温度查表计算出SOC</li>
<li>最终得出Monotonic Soc</li>
</ul>
</li>
<li>用户空间<ul>
<li>利用内核中的硬件数据（FIFO和累加器）计算出OCV</li>
<li>通过算法计算出V_SoC, CC_SoC, R_SoC, Bat_SoC, and Sys_SoC </li>
<li>更新OCV，Sys_SoC到内核空间</li>
<li>用户空间的算法为二进制文件，对客户保密</li>
</ul>
</li>
</ul>
<h4 id="QG-代码分析"><a href="#QG-代码分析" class="headerlink" title="QG 代码分析"></a>QG 代码分析</h4><p>首先分析probe函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qpnp_qg_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 在qg驱动中，会注册一个字符设备&quot;qg&quot;，</span></span><br><span class="line"><span class="comment">	 * 当用户空间对qg进行write操作时，</span></span><br><span class="line"><span class="comment">	 * 用户空间的数据会写入到内核的qg_user_data结构体中</span></span><br><span class="line"><span class="comment">	 * 然后调用udata_work队列，更新内核中的数据，计算各个soc的值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	INIT_WORK(&amp;chip-&gt;udata_work, process_udata_work);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 当battery，parallel，usb，dc属性发生power supply chaned时</span></span><br><span class="line"><span class="comment">	 * 会调用回调函数 qg_notifier_cb</span></span><br><span class="line"><span class="comment">	 * 在此回调函数中会调用 qg_status_change_work 队列</span></span><br><span class="line"><span class="comment">	 * 该函数主要更新一些battery的状态属性</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	INIT_WORK(&amp;chip-&gt;qg_status_change_work, qg_status_change_work);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 1.初始化alarm定时器，超时后调用qpnp_msoc_timer函数</span></span><br><span class="line"><span class="comment">     * 2.初始化scale_soc_work工作队列</span></span><br><span class="line"><span class="comment">     * 3.qpnp_msoc_timer会调度scale_soc_work工作队列</span></span><br><span class="line"><span class="comment">     * qg_soc_init函数的目的：定时调用scale_soc_work工作队列来计算soc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	qg_soc_init(chip);</span><br><span class="line">	----&gt;alarm_init(&amp;chip-&gt;alarm_timer, ALARM_BOOTTIME,qpnp_msoc_timer);</span><br><span class="line">	----&gt;WORK(&amp;chip-&gt;scale_soc_work, scale_soc_work);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 主要作用是决定PON SOC：</span></span><br><span class="line"><span class="comment">	 * 温度变化，时间长度，SOC变化都在一定设置范围内，使用Shutdown SOC</span></span><br><span class="line"><span class="comment">	 * 如果其中一项不满足，系统将使用PON OCV估算出来的值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	qg_determine_pon_soc(chip);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*power_supply_changed</span></span><br><span class="line"><span class="comment">	 * 1.注册qg power supply设备</span></span><br><span class="line"><span class="comment">	 * 2.注册power_supply_notifier事件通知链，当调用power_supply_changed时</span></span><br><span class="line"><span class="comment">	 * 会调用回调函数 qg_notifier_cb</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	qg_init_psy(chip);</span><br><span class="line">	----&gt;devm_power_supply_register(chip-&gt;dev,&amp;qg_psy_desc, &amp;qg_psy_cfg);</span><br><span class="line">	----&gt;chip-&gt;nb.notifier_call = qg_notifier_cb;</span><br><span class="line">	----&gt;power_supply_reg_notifier(&amp;chip-&gt;nb);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">power_supply_desc</span> <span class="title">qg_psy_desc</span> = &#123;</span></span><br><span class="line">	.name = <span class="string">&quot;bms&quot;</span>,</span><br><span class="line">	.type = POWER_SUPPLY_TYPE_BMS,</span><br><span class="line">	.properties = qg_psy_props,</span><br><span class="line">	.num_properties = ARRAY_SIZE(qg_psy_props),</span><br><span class="line">	.get_property = qg_psy_get_property,</span><br><span class="line">	.set_property = qg_psy_set_property,</span><br><span class="line">	.property_is_writeable = qg_property_is_writeable,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>有3种情况，qg子系统计算更新soc值</p>
<ol>
<li>当其他power子系统调用power_supply_changed时</li>
<li>当用户空间的二进制算法操作qg字符设备时</li>
<li>上次设置的 alarm_timer 定时器超时时</li>
</ol>
<p>下面我们来分别说明这3个情况</p>
<p>1.当其他power子系统调用power_supply_changed时,会调用回调函数qg_notifier_cb</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">qg_notifier_cb</span><span class="params">(struct notifier_block *nb,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">unsigned</span> <span class="keyword">long</span> event, <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((<span class="built_in">strcmp</span>(psy-&gt;desc-&gt;name, <span class="string">&quot;battery&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		|| (<span class="built_in">strcmp</span>(psy-&gt;desc-&gt;name, <span class="string">&quot;parallel&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		|| (<span class="built_in">strcmp</span>(psy-&gt;desc-&gt;name, <span class="string">&quot;usb&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		|| (<span class="built_in">strcmp</span>(psy-&gt;desc-&gt;name, <span class="string">&quot;dc&quot;</span>) == <span class="number">0</span>)) &#123;</span><br><span class="line">		schedule_work(&amp;chip-&gt;qg_status_change_work);</span><br><span class="line">		<span class="comment">//检测usb，dc插拔，调用 qg_scale_soc 更新SOC</span></span><br><span class="line">		----&gt;qg_input_status_update(chip)</span><br><span class="line">		<span class="comment">//检测battery是否full状态，并看情况调用 qg_scale_soc 更新SOC</span></span><br><span class="line">		----&gt;qg_charge_full_update(chip)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.当用户空间的二进制算法操作对qg字符设备进行write操作时，会调用udata_work工作队列<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">qg_device_write</span><span class="params">(struct file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *ppos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把用户空间的算法计算出来的数据写入内核</span></span><br><span class="line">	copy_from_user(&amp;chip-&gt;udata, buf, data_size)</span><br><span class="line">	</span><br><span class="line">	vote(chip-&gt;awake_votable, UDATA_READY_VOTER, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调度udata_work工作队列</span></span><br><span class="line">	schedule_work(&amp;chip-&gt;udata_work);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process_udata_work</span><span class="params">(struct work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">qpnp_qg</span> *<span class="title">chip</span> = <span class="title">container_of</span>(<span class="title">work</span>,</span></span><br><span class="line"><span class="class">			<span class="title">struct</span> <span class="title">qpnp_qg</span>, <span class="title">udata_work</span>);</span></span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 判断用户空间写入到内核的数据是否有效，并把soc相关值值赋给qpnp_qg结构体</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;udata.param[QG_CC_SOC].valid)</span><br><span class="line">		chip-&gt;cc_soc = chip-&gt;udata.param[QG_CC_SOC].data;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;udata.param[QG_BATT_SOC].valid)</span><br><span class="line">		chip-&gt;batt_soc = chip-&gt;udata.param[QG_BATT_SOC].data;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;udata.param[QG_FULL_SOC].valid)</span><br><span class="line">		chip-&gt;full_soc = chip-&gt;udata.param[QG_FULL_SOC].data;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;udata.param[QG_SOC].valid ||</span><br><span class="line">			chip-&gt;udata.param[QG_SYS_SOC].valid) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (chip-&gt;udata.param[QG_SYS_SOC].valid) &#123;</span><br><span class="line">			chip-&gt;sys_soc = chip-&gt;udata.param[QG_SYS_SOC].data;</span><br><span class="line">			chip-&gt;catch_up_soc = qg_adjust_sys_soc(chip);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			chip-&gt;catch_up_soc = chip-&gt;udata.param[QG_SOC].data;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 调用qg_scale_soc强制更新soc</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		qg_scale_soc(chip, chip-&gt;force_soc);</span><br><span class="line">		chip-&gt;force_soc = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * update soc parameters to SDAM</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		chip-&gt;sdam_data[SDAM_SOC] = chip-&gt;msoc;</span><br><span class="line">		chip-&gt;sdam_data[SDAM_OCV_UV] =</span><br><span class="line">				chip-&gt;udata.param[QG_OCV_UV].data;</span><br><span class="line">		chip-&gt;sdam_data[SDAM_RBAT_MOHM] =</span><br><span class="line">				chip-&gt;udata.param[QG_RBAT_MOHM].data;</span><br><span class="line">		chip-&gt;sdam_data[SDAM_VALID] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		rc = qg_store_soc_params(chip);</span><br><span class="line">		<span class="keyword">if</span> (rc &lt; <span class="number">0</span>)</span><br><span class="line">			pr_err(<span class="string">&quot;Failed to update SDAM params, rc=%d\n&quot;</span>, rc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 判断用户空间写入到内核的数据是否有效，并把esr相关值值赋给qpnp_qg结构体</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;udata.param[QG_ESR].valid)</span><br><span class="line">		chip-&gt;esr_last = chip-&gt;udata.param[QG_ESR].data;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (chip-&gt;esr_actual != -EINVAL &amp;&amp; chip-&gt;udata.param[QG_ESR].valid)&#123;</span><br><span class="line">		chip-&gt;esr_nominal = chip-&gt;udata.param[QG_ESR].data;</span><br><span class="line">		<span class="keyword">if</span> (chip-&gt;qg_psy)</span><br><span class="line">			power_supply_changed(chip-&gt;qg_psy);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * update ser parameters to SDAM</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (!chip-&gt;dt.esr_disable)</span><br><span class="line">		qg_store_esr_params(chip);</span><br><span class="line"></span><br><span class="line">	vote(chip-&gt;awake_votable, UDATA_READY_VOTER, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上2种情况，最终都是调用 qg_scale_soc 来计算更新，下面具体分析该函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qg_scale_soc</span><span class="params">(struct qpnp_qg *chip, <span class="keyword">bool</span> force_soc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 在用户空间写gq字符设备时，调用 qg_scale_soc 来强制更新soc</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (force_soc) &#123;</span><br><span class="line">		chip-&gt;msoc = chip-&gt;catch_up_soc;</span><br><span class="line">		rc = qg_write_monotonic_soc(chip, chip-&gt;msoc);</span><br><span class="line">		<span class="keyword">goto</span> done_psy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 判断是否需要更新soc，如果否，则取消alarm_timer定时器来并跳过更新soc。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (!is_scaling_required(chip)) &#123;</span><br><span class="line">		scale_soc_stop(chip);</span><br><span class="line">		<span class="keyword">goto</span> done;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 1.判断并更新chip-&gt;msoc</span></span><br><span class="line"><span class="comment">	 * 2.根据新的MSOC更新SOC寄存器的值</span></span><br><span class="line"><span class="comment">	 * 3.根据新的MSOC更新SDAM的值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	update_msoc(chip);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 判断是否需要更新soc，如果是，获取下次更新时间间隔，并设置定时器</span></span><br><span class="line"><span class="comment">	 * 如果否，取消alarm_timer定时器。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (is_scaling_required(chip)) &#123;</span><br><span class="line">		get_next_update_time(chip);</span><br><span class="line">		alarm_start_relative(&amp;chip-&gt;alarm_timer,</span><br><span class="line">					ms_to_ktime(chip-&gt;next_wakeup_ms));</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		scale_soc_stop(chip);</span><br><span class="line">		<span class="keyword">goto</span> done_psy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">done_psy:</span><br><span class="line">	power_supply_changed(chip-&gt;qg_psy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.alarm_timer 定时器超时<br>在 qg_scale_soc 函数中，如果还需要更新soc，会设置并启动alarm_timer定时器,超时时调用qpnp_msoc_timer函数，在qpnp_msoc_timer函数中，调度scale_soc_work工作队列，scale_soc_work队列函数与qg_scale_soc函数作用于基本一致，只是少了强制更新逻辑。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * alarm_timer定时器超时函数，调度scale_soc_work工作队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">enum</span> alarmtimer_restart</span><br><span class="line">	qpnp_msoc_timer(struct alarm *alarm, <span class="keyword">ktime_t</span> now)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">qpnp_qg</span> *<span class="title">chip</span> = <span class="title">container_of</span>(<span class="title">alarm</span>,</span></span><br><span class="line"><span class="class">				<span class="title">struct</span> <span class="title">qpnp_qg</span>, <span class="title">alarm_timer</span>);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* timer callback runs in atomic context, cannot use voter */</span></span><br><span class="line">	pm_stay_awake(chip-&gt;dev);</span><br><span class="line">	schedule_work(&amp;chip-&gt;scale_soc_work);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ALARMTIMER_NORESTART;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 与qg_scale_soc函数作用于基本一致，只是少了强制更新逻辑</span></span><br><span class="line"><span class="comment"> * （主要用在空户空间对kernel更新qg相关参数时）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scale_soc_work</span><span class="params">(struct work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">qpnp_qg</span> *<span class="title">chip</span> = <span class="title">container_of</span>(<span class="title">work</span>,</span></span><br><span class="line"><span class="class">			<span class="title">struct</span> <span class="title">qpnp_qg</span>, <span class="title">scale_soc_work</span>);</span></span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;chip-&gt;soc_lock);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!is_scaling_required(chip)) &#123;</span><br><span class="line">		scale_soc_stop(chip);</span><br><span class="line">		<span class="keyword">goto</span> done;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	update_msoc(chip);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (is_scaling_required(chip)) &#123;</span><br><span class="line">		alarm_start_relative(&amp;chip-&gt;alarm_timer,</span><br><span class="line">				ms_to_ktime(chip-&gt;next_wakeup_ms));</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		scale_soc_stop(chip);</span><br><span class="line">		<span class="keyword">goto</span> done_psy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">done_psy:</span><br><span class="line">	power_supply_changed(chip-&gt;qg_psy);</span><br><span class="line">done:</span><br><span class="line">	pm_relax(chip-&gt;dev);</span><br><span class="line">	mutex_unlock(&amp;chip-&gt;soc_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>总结：</strong></p>
<ol>
<li><p>当其他power子系统调用 power_supply_changed 时，根据情况会计算soc，简单流程如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">power_supply_changed</span><br><span class="line">---&gt;qg_notifier_cb</span><br><span class="line">	----&gt;schedule_work(&amp;chip-&gt;qg_status_change_work);</span><br><span class="line">		----&gt;qg_input_status_update(chip);</span><br><span class="line">			----&gt;qg_scale_soc(chip, <span class="literal">false</span>);</span><br><span class="line">		----&gt;qg_charge_full_update(chip);</span><br><span class="line">			 ----&gt;qg_scale_soc(chip, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>当用户空间的二进制算法操作qg字符设备时，简单流程如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">qg_device_write</span><br><span class="line">	<span class="comment">//把用户空间的数据复制给内核相关结构体，并重新计算soc</span></span><br><span class="line">----&gt;schedule_work(&amp;chip-&gt;udata_work);</span><br><span class="line">	----&gt;qg_scale_soc(chip, chip-&gt;force_soc);</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面2种情况主动调用qg_scale_soc来计算soc时，根据实际情况情况判断是否需要启动定时器alarm_timer来定时更新soc，简单流程如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">alarm_start_relative(&amp;chip-&gt;alarm_timer,</span><br><span class="line">				ms_to_ktime(chip-&gt;next_wakeup_ms));</span><br><span class="line">----&gt;qpnp_msoc_timer</span><br><span class="line">		<span class="comment">//scale_soc_work函数和qg_scale_soc作用一致，用来更新soc值</span></span><br><span class="line">	----&gt;schedule_work(&amp;chip-&gt;scale_soc_work);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>从上面的流程可以看到，cc_soc,batt_soc,full_soc,sys_soc,catch_up_soc等值都是从用户空间传递给内核的，内核只是根据这些值计算，判断出msoc作为系统上报的soc.</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Fuel-Gauge"><a href="#Fuel-Gauge" class="headerlink" title="Fuel Gauge"></a>Fuel Gauge</h2><p>FG模块是一种算法的硬件实现，该算法通过检测电流和电压来评估计算电池的电量。</p>
<h3 id="FG-架构"><a href="#FG-架构" class="headerlink" title="FG 架构"></a>FG 架构</h3><p><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Fuel Gauge Architecture.PNG" alt="Fuel Gauge Architecture"></p>
<p>FG架构如上图：</p>
<ol>
<li>CS_PLUS和CS_MINUS用来检测FG电流</li>
<li>BATT_PLUS和BATT_MINUS用来检测电池电压</li>
<li>BATT_ID检测battery ID引脚电阻，BATT_THERM检测电池温度， 两者一起检测Battery Missing状态</li>
</ol>
<h3 id="FG-算法"><a href="#FG-算法" class="headerlink" title="FG 算法"></a>FG 算法</h3><p>Fuel Gauge 在原理上与 Battery Gauge 是一样的。<br>只是QG算法在 AP 上运行，更便于调整和优化算法。<br>FG 是固化在 PMIC 里面的 Firmware 不能改动，只能微调部分寄存器设置。</p>
<p>FG算法也涉及到QG算法中的CC_SoC，Battery SoC，System SoC,  Monotonic SoC，大致框图如下:<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/FG_SOC_FLOW.PNG" alt="FG_SOC_FLOW.PNG"></p>
<ol>
<li>CC_SoC ： coulomb-counted value </li>
<li>Battery SoC：Battery SoC是CC_SoC和voltage mode校正算法的结合，大致流程如下图：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/FG_Battery_SoC.PNG" alt="FG_Battery_SoC"></li>
</ol>
<p>其中涉及到的Battery model：<br><img src="/2020/09/24/Qcom-platform-battery-capacity-algorithm/Battery_Model.PNG" alt="Battery_Model"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">* OCV：Open Circuit Voltage (开漏电路电压)，即电路没有电流，并且电池为使用或者长时间闲置（C1完全放电）</span><br><span class="line">* ESR：Equivalent Series Resistance（等效串联电阻），影响电池瞬时功率，它的值与温度和电池状态（充/放电）相关。</span><br><span class="line">* T1 Time Constant：它说明了先前电池使用后电池SoC的变化。它的值通常在几分钟的范围内，R1随温度，电池温度和电池SoC级别而变化，对Rslow-C1建模有助于解决滞后行为并改善电池SoC的估计。</span><br></pre></td></tr></table></figure>
<ol>
<li>System SoC：与QG算法一致。</li>
<li>Monotonic SoC：与QG算法一致。<br>详情可以参考《80-vt310-123_c_pmi8994_fuel_gauge_hw_sw_control.pdf》</li>
</ol>
<h3 id="FG-软件"><a href="#FG-软件" class="headerlink" title="FG 软件"></a>FG 软件</h3><h4 id="FG-代码路径"><a href="#FG-代码路径" class="headerlink" title="FG 代码路径"></a>FG 代码路径</h4><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>Driver source code</td>
<td>kernel/drivers/power/qpnp-fg.c.</td>
</tr>
<tr>
<td>Device tree configuration</td>
<td>kernel/arch/arm/boot/dts/qcom/msm-pmi8994.dtsi</td>
</tr>
<tr>
<td>Document</td>
<td>kernel/Documentation/devicetree/bindings/power/qpnp-fg.txt</td>
</tr>
</tbody>
</table>
</div>
<h4 id="FG-代码分析"><a href="#FG-代码分析" class="headerlink" title="FG 代码分析"></a>FG 代码分析</h4><p>整个流程基本和QG算法一致，只是QG算法中各种SoC的值是从用户空间写入到内核中的，而FG算法大部分值是通过硬件计算后写入到寄存器中的。</p>
<p>所以代码分析省略。</p>
<p><strong>总结：</strong><br>Fuel Gauge 算法获取到最终上报的SoC的步骤分为4步：</p>
<ol>
<li>利用电流测量估算出CC_SoC(coulomb-counted SoC)</li>
<li>利用battery model和profile data，使用CC_SoC和电压模式校正，估算出Battery SoC</li>
<li>利用System Cut-Off Voltage和Charge Floating Voltage对Battery SoC掐头去尾（并未所有能量对系统可用），过滤为System SoC</li>
<li>利用放电SoC减少，充电SoC增加的单调性原则，过滤为Monotonic Soc，这个是上报给用户的最终SoC</li>
</ol>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p><strong>高通电量计算总结：</strong></p>
<ol>
<li>vm-bms：用户空间获取电池内阻，电流，电压等等参数来计算出OCV，然后把该值传递给内核，内核通过查表得到SOC，经过修正得到上报的SOC值。</li>
<li>bms：VM-BMS主要基于OCV的值来进行计算出SOC值，BMS在VM-BMS的基础上，主要引入了库仑计，利用经过电池的电流的累计，计算出电荷量，即综合raw OCV 和 Coulomb count (CC) data计算出SOC值。</li>
<li>Qcom Battery Gauge：用户空间读取内核数据 chip-&gt;kdata,然后经过用户空间高通内部算法，计算出各个soc值（cc_soc,batt_soc,full_soc,sys_soc,catch_up_soc），最后把这些数据写入到内核数据 chip-&gt;udata，内核只是根据这些值计算，判断出msoc作为系统上报的soc.</li>
<li>Fuel Gauge：原理上与 Battery Gauge 是一样的，只是QG算法在 AP 上运行，更便于调整和优化算法，FG 是固化在 PMIC 里面的 Firmware 不能改动，只能微调部分寄存器设置。</li>
</ol>
]]></content>
      <categories>
        <category>Charging</category>
      </categories>
      <tags>
        <tag>Charing</tag>
        <tag>Battery</tag>
      </tags>
  </entry>
  <entry>
    <title>Thermal Core 框架</title>
    <url>/2021/01/05/Thermal_Core_Framework_Architecture/</url>
    <content><![CDATA[<!-- toc -->
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>关于温控，高通+Android平台目前主要提供了3个层面的机制来保护设备</p>
<ul>
<li>硬件相关控制（LMH）</li>
<li>Linux内核控制（Thermal Core）</li>
<li>User Space控制（ThermalEngine守护进程）</li>
</ul>
<p>此章节主要介绍Thermal Core的相关内容。<br><a id="more"></a><br>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>Thermal Core是用来替代之前的legacy framework kernel thermal monitor (KTM)，目前Thermal Core的关键功能如下</p>
<ul>
<li>Core isolation (hotplugging)</li>
<li>GPU Tj management</li>
<li>Low temperature management, that is, VDD restriction</li>
<li>OEM Tskin management (optional)</li>
</ul>
<p>主要框架图如下：<br><img src="/2021/01/05/Thermal_Core_Framework_Architecture/Thermal_Core_Framework_Architecture.PNG" alt="Thermal Core Framework Arch"></p>
<p>从框图中可以看到，整个Thermal Core框架包括4大主要部分：</p>
<ul>
<li>Thermal Zone Device：主要用来获取温度，并设置不同的温度触发点。</li>
<li>Thermal Governor：提供多种算法来控制温度：Step Wise、User Space等。</li>
<li>Thermal Cooling Device：降温设备的抽象，目前Cooling设备可以是CPU、devfreq、clock等。</li>
<li>Thermal Core：作为Thermal框架的中枢，提供核心函数，同时提供用户空间sysfs节点。</li>
</ul>
<p>Thermal Core的工作流程是通过Thermal Zone Device来获取温度并设置不同的温度触发点，经过配置的Thermal Governor来执行不同的策略，最终通过Thermal Cooling Device来控制温度到一个安全且适合的范围内。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Thermal-Zone-Device"><a href="#Thermal-Zone-Device" class="headerlink" title="Thermal Zone Device"></a>Thermal Zone Device</h2><p>内核代码使用thermal_zone_device 来抽象Thermal Zone Device，Thermal Zone Device主要作用为获取各个sensor对应的温度，并设置各个sensor的温度触发点.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">char</span> type[THERMAL_NAME_LENGTH];<span class="comment">//sensor名字</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">device</span> <span class="title">device</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">attribute_group</span> <span class="title">trips_attribute_group</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_attr</span> *<span class="title">trip_temp_attrs</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_attr</span> *<span class="title">trip_type_attrs</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_attr</span> *<span class="title">trip_hyst_attrs</span>;</span></span><br><span class="line">	<span class="keyword">void</span> *devdata;</span><br><span class="line">	<span class="keyword">int</span> trips;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> trips_disabled;	<span class="comment">/* bitmap for disabled trips */</span></span><br><span class="line">	<span class="keyword">int</span> passive_delay;</span><br><span class="line">	<span class="keyword">int</span> polling_delay;<span class="comment">//轮询读取sensor的时间间隔，0表示取消轮询工作队列</span></span><br><span class="line">	<span class="keyword">int</span> temperature;<span class="comment">//当前温度</span></span><br><span class="line">	<span class="keyword">int</span> last_temperature;<span class="comment">//上次读取的温度</span></span><br><span class="line">	<span class="keyword">int</span> emul_temperature;</span><br><span class="line">	<span class="keyword">int</span> passive;</span><br><span class="line">	<span class="keyword">int</span> prev_low_trip;</span><br><span class="line">	<span class="keyword">int</span> prev_high_trip;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> forced_passive;</span><br><span class="line">	<span class="keyword">atomic_t</span> need_update;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device_ops</span> *<span class="title">ops</span>;</span><span class="comment">//thermal zone device操作函数集</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_params</span> *<span class="title">tzp</span>;</span><span class="comment">//thermal zone devicee参数</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_governor</span> *<span class="title">governor</span>;</span><span class="comment">//算法相关</span></span><br><span class="line">	<span class="keyword">void</span> *governor_data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">thermal_instances</span>;</span><span class="comment">//挂载所有thermal策略示例的链表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ida</span> <span class="title">ida</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">node</span>;</span><span class="comment">//挂载thermal zone device的链表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span> <span class="title">poll_queue</span>;</span><span class="comment">//轮询工作队列</span></span><br><span class="line">	<span class="keyword">enum</span> thermal_notify_event notify_event;<span class="comment">//uevent事件类型，通过userspace算法类型传递给用户空间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device_ops</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> (*bind) (struct thermal_zone_device *,struct thermal_cooling_device *);</span><br><span class="line">	<span class="keyword">int</span> (*unbind) (struct thermal_zone_device *,struct thermal_cooling_device *);</span><br><span class="line">	<span class="keyword">int</span> (*get_temp) (struct thermal_zone_device *, <span class="keyword">int</span> *);</span><br><span class="line">	<span class="keyword">int</span> (*set_trips) (struct thermal_zone_device *, <span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line">	<span class="keyword">int</span> (*get_mode) (struct thermal_zone_device *,<span class="keyword">enum</span> thermal_device_mode *);</span><br><span class="line">	<span class="keyword">int</span> (*set_mode) (struct thermal_zone_device *,<span class="keyword">enum</span> thermal_device_mode);</span><br><span class="line">	<span class="keyword">int</span> (*get_trip_type) (struct thermal_zone_device *, <span class="keyword">int</span>,<span class="keyword">enum</span> thermal_trip_type *);</span><br><span class="line">	<span class="keyword">int</span> (*get_trip_temp) (struct thermal_zone_device *, <span class="keyword">int</span>, <span class="keyword">int</span> *);</span><br><span class="line">	<span class="keyword">int</span> (*set_trip_temp) (struct thermal_zone_device *, <span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line">	<span class="keyword">int</span> (*get_trip_hyst) (struct thermal_zone_device *, <span class="keyword">int</span>, <span class="keyword">int</span> *);</span><br><span class="line">	<span class="keyword">int</span> (*set_trip_hyst) (struct thermal_zone_device *, <span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line">	<span class="keyword">int</span> (*get_crit_temp) (struct thermal_zone_device *, <span class="keyword">int</span> *);</span><br><span class="line">	<span class="keyword">int</span> (*set_emul_temp) (struct thermal_zone_device *, <span class="keyword">int</span>);</span><br><span class="line">	<span class="keyword">int</span> (*get_trend) (struct thermal_zone_device *, <span class="keyword">int</span>,<span class="keyword">enum</span> thermal_trend *);</span><br><span class="line">	<span class="keyword">int</span> (*notify) (struct thermal_zone_device *, <span class="keyword">int</span>,<span class="keyword">enum</span> thermal_trip_type);</span><br><span class="line">	<span class="keyword">bool</span> (*is_wakeable)(struct thermal_zone_device *);</span><br><span class="line">	<span class="keyword">int</span> (*set_polling_delay)(struct thermal_zone_device *, <span class="keyword">int</span>);</span><br><span class="line">	<span class="keyword">int</span> (*set_passive_delay)(struct thermal_zone_device *, <span class="keyword">int</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Thermal-Core"><a href="#Thermal-Core" class="headerlink" title="Thermal Core"></a>Thermal Core</h2><p>Thermal Core作为整个框架的中枢，我们先来分析一下thermal_core.c的入口函数。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* kernel/msm-4.14/drivers/thermal/thermal_core.c */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">thermal_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//注册各种算法类型</span></span><br><span class="line">	thermal_register_governors();</span><br><span class="line">    ----&gt;thermal_gov_step_wise_register();</span><br><span class="line">    ----&gt;thermal_gov_fair_share_register();</span><br><span class="line">    ----&gt;thermal_gov_bang_bang_register();</span><br><span class="line">    ----&gt;thermal_gov_user_space_register();</span><br><span class="line">    ----&gt;thermal_gov_low_limits_register();</span><br><span class="line">    ----&gt;thermal_gov_power_allocator_register();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成/sys/class/thermal目录</span></span><br><span class="line">    class_register(&amp;thermal_class);</span><br><span class="line">    <span class="comment">//解析dts，生成thermal zone device,核心函数，下面重点分析</span></span><br><span class="line">    of_parse_thermal_zones();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册pm回调函数</span></span><br><span class="line">    register_pm_notifier(&amp;thermal_pm_nb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>thermal_init作为设备加载函数，主要作用：</p>
<ul>
<li>注册各种类型的governor机制</li>
<li>生成/sys/class/thermal目录</li>
<li>解析 DTS 中的 Thermal-zones 节点，用于生成/sys/class/thermal/thermal_zone[0-*]节点.</li>
</ul>
<p>一个thermal zone device的DTS示例：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* kernel/msm-4.14/arch/arm64/boot/dts/qcom/trinket-thermal.dtsi */</span></span><br><span class="line"><span class="comment">/* kernel/msm-4.14/arch/arm64/boot/dts/qcom/trinket-thermal-overlay.dtsi */</span></span><br><span class="line">&amp;thermal_zones &#123;</span><br><span class="line">    <span class="comment">/* thermal device zone 的名字 */</span></span><br><span class="line">	cpuss<span class="number">-1</span>-step &#123;</span><br><span class="line">		polling-delay-passive = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">		polling-delay = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">		thermal-governor = <span class="string">&quot;step_wise&quot;</span>;</span><br><span class="line">		thermal-sensors = &lt;&amp;tsens0 <span class="number">7</span>&gt;;</span><br><span class="line">		wake-capable-sensor;</span><br><span class="line">        <span class="comment">/* 设置有哪些温度触发点 */</span></span><br><span class="line">		trips &#123;</span><br><span class="line">			cpu5_7_config: cpu<span class="number">-5</span><span class="number">-7</span>-config &#123;</span><br><span class="line">				temperature = &lt;<span class="number">110000</span>&gt;;</span><br><span class="line">				hysteresis = &lt;<span class="number">10000</span>&gt;;</span><br><span class="line">				type = <span class="string">&quot;passive&quot;</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;;</span><br><span class="line">        <span class="comment">/* 把cooling devices与温度触发点绑定 */</span></span><br><span class="line">		cooling-maps &#123;</span><br><span class="line">			cpu5_cdev &#123;</span><br><span class="line">				trip = &lt;&amp;cpu5_7_config&gt;;</span><br><span class="line">				cooling-device =</span><br><span class="line">					&lt;&amp;CPU5 THERMAL_MAX_LIMIT</span><br><span class="line">						THERMAL_MAX_LIMIT&gt;;</span><br><span class="line">			&#125;;</span><br><span class="line">			cpu7_cdev &#123;</span><br><span class="line">				trip = &lt;&amp;cpu5_7_config&gt;;</span><br><span class="line">				cooling-device =</span><br><span class="line">					&lt;&amp;CPU7 THERMAL_MAX_LIMIT</span><br><span class="line">						THERMAL_MAX_LIMIT&gt;;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>接下来以上面的DTS为例，分析 of_parse_thermal_zones 函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __init <span class="title">of_parse_thermal_zones</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">np</span>, *<span class="title">child</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> __<span class="title">thermal_zone</span> *<span class="title">tz</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device_ops</span> *<span class="title">ops</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 解析dts thermal-zones节点中所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	np = of_find_node_by_name(<span class="literal">NULL</span>, <span class="string">&quot;thermal-zones&quot;</span>);</span><br><span class="line"></span><br><span class="line">	for_each_available_child_of_node(np, child) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device</span> *<span class="title">zone</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_params</span> *<span class="title">tzp</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 解析dts thermal-zones的child的节点cpuss-1-step</span></span><br><span class="line"><span class="comment">         * 这里主要解析polling-delay-passive,polling-delay,trips和cooling-maps属性</span></span><br><span class="line"><span class="comment">         * 最后会把解析的结构通过__thermal_zone结构体return出来。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">		tz = thermal_of_build_thermal_zone(child);</span><br><span class="line">        ---&gt;thermal_of_build_thermal_zone</span><br><span class="line">        ---&gt;for_each_child_of_node(child, gchild) &#123;</span><br><span class="line">                    thermal_of_populate_trip(gchild, &amp;tz-&gt;trips[i++]);</span><br><span class="line">                    </span><br><span class="line">        ---&gt;child = of_get_child_by_name(np, <span class="string">&quot;cooling-maps&quot;</span>);</span><br><span class="line">        ---&gt;for_each_child_of_node(child, gchild) &#123;</span><br><span class="line">                    thermal_of_populate_bind_params(gchild, &amp;tz-&gt;tbps[i++],</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 初始化tzp结构体，并使用DTS的属性进行填充，主要包括&quot;thermal-governor&quot;属性等</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">		tzp = kzalloc(<span class="keyword">sizeof</span>(*tzp), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 使用上面从DTS解析的数据，注册一个thermal zone devices</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">		zone = thermal_zone_device_register(child-&gt;name, tz-&gt;ntrips,</span><br><span class="line">						    mask, tz,</span><br><span class="line">						    ops, tzp,</span><br><span class="line">						    tz-&gt;passive_delay,</span><br><span class="line">						    tz-&gt;polling_delay);</span><br><span class="line">		tz-&gt;tzd = zone;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来重点分析注册tehrmal zone devices的函数 thermal_zone_device_register。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">thermal_zone_device_register(<span class="keyword">const</span> <span class="keyword">char</span> *type, <span class="keyword">int</span> trips, <span class="keyword">int</span> mask,</span><br><span class="line">			     <span class="keyword">void</span> *devdata, struct thermal_zone_device_ops *ops,</span><br><span class="line">			     struct thermal_zone_params *tzp, <span class="keyword">int</span> passive_delay,</span><br><span class="line">			     <span class="keyword">int</span> polling_delay)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device</span> *<span class="title">tz</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_governor</span> *<span class="title">governor</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 初始化thermal_instances链表，thermal_instances变量为一个具体的实例策略。</span></span><br><span class="line"><span class="comment"> 	 * This structure(thermal_instances) is used to </span></span><br><span class="line"><span class="comment"> 	 * describe the behavior of a certain cooling device </span></span><br><span class="line"><span class="comment">	 * on a certain trip point in a certain thermal zone</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	INIT_LIST_HEAD(&amp;tz-&gt;thermal_instances);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对thermal_zone_device *tz变量进行赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	tz-&gt;id = result;</span><br><span class="line">	strlcpy(tz-&gt;type, type, <span class="keyword">sizeof</span>(tz-&gt;type));</span><br><span class="line">	tz-&gt;ops = ops;</span><br><span class="line">	tz-&gt;tzp = tzp;</span><br><span class="line">	tz-&gt;device.class = &amp;thermal_class;</span><br><span class="line">	tz-&gt;devdata = devdata;</span><br><span class="line">	tz-&gt;trips = trips;</span><br><span class="line">	tz-&gt;passive_delay = passive_delay;</span><br><span class="line">	tz-&gt;polling_delay = polling_delay;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* sys I/F */</span></span><br><span class="line">	<span class="comment">/* Add nodes that are always present via .groups */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 把各种attribute_group结构体变量赋值给tz-&gt;device.groups</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	thermal_zone_create_device_groups(tz, mask);</span><br><span class="line">    ----&gt;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size - <span class="number">2</span>; i++)</span><br><span class="line">            groups[i] = thermal_zone_attribute_groups[i];</span><br><span class="line">    ---&gt;<span class="keyword">if</span> (tz-&gt;trips) &#123;</span><br><span class="line">            result = create_trip_attrs(tz, mask);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                kfree(groups);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            groups[size - <span class="number">2</span>] = &amp;tz-&gt;trips_attribute_group;</span><br><span class="line">        &#125;</span><br><span class="line">	---&gt;tz-&gt;device.groups = groups;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 设置新的thermal zone*名字，</span></span><br><span class="line"><span class="comment">	 * 并根据上面的tz-&gt;device.groups创建/sys/class/thermal/thermal_zoneN 下面的各个属性节点</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	dev_set_name(&amp;tz-&gt;device, <span class="string">&quot;thermal_zone%d&quot;</span>, tz-&gt;id);</span><br><span class="line">	device_register(&amp;tz-&gt;device);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 为thermal zoneN设置新的governor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    thermal_set_governor(tz, governor);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 把该thermal_zone_device结构体添加到链表thermal_tz_list中</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	list_add_tail(&amp;tz-&gt;node, &amp;thermal_tz_list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Bind cooling devices for this zone */</span></span><br><span class="line">	bind_tz(tz);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 初始化poll_queue工作队列，对应的function主要用来轮询检测thermal zone device是否触发温度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	INIT_DEFERRABLE_WORK(&amp;(tz-&gt;poll_queue), thermal_zone_device_check);</span><br><span class="line">	---&gt;thermal_zone_device_update(tz, THERMAL_EVENT_UNSPECIFIED);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 主要工作为对thermal_instance实例中的initialized变量赋为false.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	thermal_zone_device_reset(tz);</span><br><span class="line">	---&gt;thermal_zone_device_init(tz);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Update the new thermal zone and mark it as already updated. */</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 1.更新thermal device zone对应的温度</span></span><br><span class="line"><span class="comment">	 * 2.设置触发温度</span></span><br><span class="line"><span class="comment">	 * 3.处理温度触发情况</span></span><br><span class="line"><span class="comment">	 * ---&gt;a.如果为critical类型，到达触发温度，执行关机/重启操作</span></span><br><span class="line"><span class="comment">	 * ---&gt;b.如果非critical类型，到达触发温度，执行对应的governor算法操作</span></span><br><span class="line"><span class="comment">	 * ---&gt;c.延时启动poll_queue工作队列，再次调用thermal_zone_device_update函数。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (atomic_cmpxchg(&amp;tz-&gt;need_update, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">		thermal_zone_device_update(tz, THERMAL_EVENT_UNSPECIFIED);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> tz;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(thermal_zone_device_register);</span><br></pre></td></tr></table></figure><br>接来下我们重点解析 bind_tz 和 thermal_zone_device_update 函数,首先分析bind_tz函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind_tz</span><span class="params">(struct thermal_zone_device *tz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *<span class="title">pos</span> = <span class="title">NULL</span>;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_params</span> *<span class="title">tzp</span> = <span class="title">tz</span>-&gt;<span class="title">tzp</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* If there is ops-&gt;bind, try to use ops-&gt;bind */</span></span><br><span class="line">	<span class="keyword">if</span> (tz-&gt;ops-&gt;bind) &#123;</span><br><span class="line">		list_for_each_entry(pos, &amp;thermal_cdev_list, node) &#123;</span><br><span class="line">			ret = tz-&gt;ops-&gt;bind(tz, pos);</span><br><span class="line">			---&gt;of_thermal_bind</span><br><span class="line">                ---&gt; thermal_zone_bind_cooling_device(thermal,</span><br><span class="line">												tbp-&gt;trip_id, cdev,</span><br><span class="line">												tbp-&gt;max,</span><br><span class="line">												tbp-&gt;min,</span><br><span class="line">												tbp-&gt;usage);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * thermal_zone_bind_cooling_device() - bind a cooling device to a thermal zone</span></span><br><span class="line"><span class="comment"> * @tz:		pointer to struct thermal_zone_device</span></span><br><span class="line"><span class="comment"> * @trip:	indicates which trip point the cooling devices is</span></span><br><span class="line"><span class="comment"> *		associated with in this thermal zone.</span></span><br><span class="line"><span class="comment"> * @cdev:	pointer to struct thermal_cooling_device</span></span><br><span class="line"><span class="comment"> * @upper:	the Maximum cooling state for this trip point.</span></span><br><span class="line"><span class="comment"> *		THERMAL_NO_LIMIT means no upper limit,</span></span><br><span class="line"><span class="comment"> *		and the cooling device can be in max_state.</span></span><br><span class="line"><span class="comment"> * @lower:	the Minimum cooling state can be used for this trip point.</span></span><br><span class="line"><span class="comment"> *		THERMAL_NO_LIMIT means no lower limit,</span></span><br><span class="line"><span class="comment"> *		and the cooling device can be in cooling state 0.</span></span><br><span class="line"><span class="comment"> * @weight:	The weight of the cooling device to be bound to the</span></span><br><span class="line"><span class="comment"> *		thermal zone. Use THERMAL_WEIGHT_DEFAULT for the</span></span><br><span class="line"><span class="comment"> *		default value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This interface function bind a thermal cooling device to the certain trip</span></span><br><span class="line"><span class="comment"> * point of a thermal zone device.</span></span><br><span class="line"><span class="comment"> * This function is usually called in the thermal zone device .bind callback.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return: 0 on success, the proper error value otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">thermal_zone_bind_cooling_device</span><span class="params">(struct thermal_zone_device *tz,</span></span></span><br><span class="line"><span class="function"><span class="params">				     <span class="keyword">int</span> trip,</span></span></span><br><span class="line"><span class="function"><span class="params">				     struct thermal_cooling_device *cdev,</span></span></span><br><span class="line"><span class="function"><span class="params">				     <span class="keyword">unsigned</span> <span class="keyword">long</span> upper, <span class="keyword">unsigned</span> <span class="keyword">long</span> lower,</span></span></span><br><span class="line"><span class="function"><span class="params">				     <span class="keyword">unsigned</span> <span class="keyword">int</span> weight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_instance</span> *<span class="title">dev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_instance</span> *<span class="title">pos</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device</span> *<span class="title">pos1</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *<span class="title">pos2</span>;</span></span><br><span class="line"></span><br><span class="line">	dev = kzalloc(<span class="keyword">sizeof</span>(*dev), GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!dev)</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line">	dev-&gt;tz = tz;</span><br><span class="line">	dev-&gt;cdev = cdev;</span><br><span class="line">	dev-&gt;trip = trip;</span><br><span class="line">	dev-&gt;upper = upper;</span><br><span class="line">	dev-&gt;lower = lower;</span><br><span class="line">	dev-&gt;target = THERMAL_NO_TARGET;</span><br><span class="line">	dev-&gt;weight = weight;</span><br><span class="line"></span><br><span class="line">	result = ida_simple_get(&amp;tz-&gt;ida, <span class="number">0</span>, <span class="number">0</span>, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (result &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> free_mem;</span><br><span class="line"></span><br><span class="line">	dev-&gt;id = result;</span><br><span class="line">	<span class="built_in">sprintf</span>(dev-&gt;name, <span class="string">&quot;cdev%d&quot;</span>, dev-&gt;id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 暴露属性节点，并赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="built_in">sprintf</span>(dev-&gt;attr_name, <span class="string">&quot;cdev%d_trip_point&quot;</span>, dev-&gt;id);</span><br><span class="line">	sysfs_attr_init(&amp;dev-&gt;attr.attr);</span><br><span class="line">	dev-&gt;attr.attr.name = dev-&gt;attr_name;</span><br><span class="line">	dev-&gt;attr.attr.mode = <span class="number">0444</span>;</span><br><span class="line">	dev-&gt;attr.show = thermal_cooling_device_trip_point_show;</span><br><span class="line">	result = device_create_file(&amp;tz-&gt;device, &amp;dev-&gt;attr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">snprintf</span>(dev-&gt;upper_attr_name, THERMAL_NAME_LENGTH,</span><br><span class="line">			<span class="string">&quot;cdev%d_upper_limit&quot;</span>, dev-&gt;id);</span><br><span class="line">	sysfs_attr_init(&amp;dev-&gt;upper_attr.attr);</span><br><span class="line">	dev-&gt;upper_attr.attr.name = dev-&gt;upper_attr_name;</span><br><span class="line">	dev-&gt;upper_attr.attr.mode = <span class="number">0644</span>;</span><br><span class="line">	dev-&gt;upper_attr.show = thermal_cooling_device_upper_limit_show;</span><br><span class="line">	dev-&gt;upper_attr.store = thermal_cooling_device_upper_limit_store;</span><br><span class="line">	result = device_create_file(&amp;tz-&gt;device, &amp;dev-&gt;upper_attr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">snprintf</span>(dev-&gt;lower_attr_name, THERMAL_NAME_LENGTH,</span><br><span class="line">			<span class="string">&quot;cdev%d_lower_limit&quot;</span>, dev-&gt;id);</span><br><span class="line">	sysfs_attr_init(&amp;dev-&gt;lower_attr.attr);</span><br><span class="line">	dev-&gt;lower_attr.attr.name = dev-&gt;lower_attr_name;</span><br><span class="line">	dev-&gt;lower_attr.attr.mode = <span class="number">0644</span>;</span><br><span class="line">	dev-&gt;lower_attr.show = thermal_cooling_device_lower_limit_show;</span><br><span class="line">	dev-&gt;lower_attr.store = thermal_cooling_device_lower_limit_store;</span><br><span class="line">	result = device_create_file(&amp;tz-&gt;device, &amp;dev-&gt;lower_attr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sprintf</span>(dev-&gt;weight_attr_name, <span class="string">&quot;cdev%d_weight&quot;</span>, dev-&gt;id);</span><br><span class="line">	sysfs_attr_init(&amp;dev-&gt;weight_attr.attr);</span><br><span class="line">	dev-&gt;weight_attr.attr.name = dev-&gt;weight_attr_name;</span><br><span class="line">	dev-&gt;weight_attr.attr.mode = S_IWUSR | S_IRUGO;</span><br><span class="line">	dev-&gt;weight_attr.show = thermal_cooling_device_weight_show;</span><br><span class="line">	dev-&gt;weight_attr.store = thermal_cooling_device_weight_store;</span><br><span class="line">	result = device_create_file(&amp;tz-&gt;device, &amp;dev-&gt;weight_attr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 把 thermal zone device 和对应的 thermal cooling device 添加到thermal_instances中</span></span><br><span class="line"><span class="comment">     * 即绑定操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="keyword">if</span> (!result) &#123;</span><br><span class="line">		list_add_tail(&amp;dev-&gt;tz_node, &amp;tz-&gt;thermal_instances);</span><br><span class="line">		list_add_tail(&amp;dev-&gt;cdev_node, &amp;cdev-&gt;thermal_instances);</span><br><span class="line">		atomic_set(&amp;tz-&gt;need_update, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(thermal_zone_bind_cooling_device);</span><br></pre></td></tr></table></figure><br>然后分析 thermal_zone_device_update 函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thermal_zone_device_update</span><span class="params">(struct thermal_zone_device *tz,</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">enum</span> thermal_notify_event event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 获取对应thermal zone device最新的温度</span></span><br><span class="line"><span class="comment">	 * 并存储上次的温度值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	update_temperature(tz);</span><br><span class="line">	---&gt;thermal_zone_get_temp(tz, &amp;temp);</span><br><span class="line">	---&gt;store_temperature(tz, temp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 设置触发温度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	thermal_zone_set_trips(tz);</span><br><span class="line"></span><br><span class="line">	tz-&gt;notify_event = event;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; tz-&gt;trips; count++)</span><br><span class="line">		handle_thermal_trip(tz, count);</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 根据触发类型，执行对应的函数处理函数</span></span><br><span class="line"><span class="comment">		 * critical类型对应关机/重启</span></span><br><span class="line"><span class="comment">		 * non_critical类型对应设置的governor</span></span><br><span class="line"><span class="comment">		 */</span> </span><br><span class="line">		---&gt;handle_critical_trips(tz, trip, type);</span><br><span class="line">		<span class="keyword">or</span></span><br><span class="line">		---&gt;handle_non_critical_trips(tz, trip, type);</span><br><span class="line">		</span><br><span class="line">		---&gt;monitor_thermal_zone(tz);</span><br><span class="line">			---&gt;thermal_zone_device_set_polling</span><br><span class="line">				---&gt;延时调用poll_queue工作队列，再次执行thermal_zone_device_update</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(thermal_zone_device_update);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>代码流程总结：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">thermal_init</span><br><span class="line"><span class="comment">//解析dts中的thermal zone节点，并利用解析出来的数据注册thermal zone device</span></span><br><span class="line">---&gt;of_parse_thermal_zones</span><br><span class="line">	<span class="comment">//注册thermal zone device</span></span><br><span class="line">	---&gt;thermal_zone_device_register</span><br><span class="line">		---&gt;<span class="number">1.</span>创建thermal_zoneN下面的属性节点</span><br><span class="line">		---&gt;<span class="number">2.</span>为thermal_zoneN设置新的governor</span><br><span class="line">		---&gt;<span class="number">3.</span>把该thermal_zone_device结构体添加到链表thermal_tz_list中</span><br><span class="line">		---&gt;<span class="number">4.</span>把thermal zone device 和对应的thermal cooling device进行绑定</span><br><span class="line">		---&gt;<span class="number">5.</span>初始化poll_queue工作队列</span><br><span class="line">		---&gt;<span class="number">6.</span>周期性调度工作队列poll_queue，主要作用如下</span><br><span class="line">			---&gt;a.获取thermal device zone对应的温度</span><br><span class="line">			---&gt;b.设置触发温度</span><br><span class="line">			---&gt;c.处理温度触发情况</span><br><span class="line">				---&gt;(<span class="number">1</span>).如果为critical类型，到达触发温度，执行关机/重启操作</span><br><span class="line">				---&gt;(<span class="number">2</span>).如果非critical类型，到达触发温度，执行对应的governor算法操作</span><br><span class="line">				---&gt;(<span class="number">3</span>).延时启动poll_queue工作队列，再次调用thermal_zone_device_update函数。</span><br></pre></td></tr></table></figure></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Thermal-Cooling-Device"><a href="#Thermal-Cooling-Device" class="headerlink" title="Thermal Cooling Device"></a>Thermal Cooling Device</h2><p>Thermal Cooling Device 为降温设备，可用的降温设备大致如下</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Cooling device</th>
<th>Ation</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>CPU frequency throttling, core isolation is last mitigation level</td>
</tr>
<tr>
<td>GPU(devfreq)</td>
<td>GPU frequency throttling</td>
</tr>
<tr>
<td>Battery</td>
<td>Charge rate throttling</td>
</tr>
<tr>
<td>Regulator</td>
<td>Increase of voltage on CPU rail</td>
</tr>
<tr>
<td>Backlight</td>
<td>Display backlight throttling</td>
</tr>
<tr>
<td>Modem</td>
<td>Adjustment of peak data rates, maximum Tx power</td>
</tr>
<tr>
<td>AOP</td>
<td>Voltage restriction on CX/EBI with RPMh architecture</td>
</tr>
</tbody>
</table>
</div>
<p>它们在内核中抽象为thermal_cooling_device结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">char</span> type[THERMAL_NAME_LENGTH];<span class="comment">//cooling device name</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">device</span> <span class="title">device</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">np</span>;</span></span><br><span class="line">	<span class="keyword">void</span> *devdata;</span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device_ops</span> *<span class="title">ops</span>;</span><span class="comment">//操作函数集</span></span><br><span class="line">	<span class="keyword">bool</span> updated; <span class="comment">/* true if the cooling device does not need update */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">lock</span>;</span> <span class="comment">/* protect thermal_instances list */</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 挂载所有thermal策略示例的链表，</span></span><br><span class="line"><span class="comment">     * 一个thermal_instances一般正常包含一个thermal zone device，一个cooling device</span></span><br><span class="line"><span class="comment">     * 和对应的触发温度，以及对应的触发措施。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">thermal_instances</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">node</span>;</span><span class="comment">//挂载thermal cooling device的链表</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> sysfs_cur_state_req;<span class="comment">//当前等级请求</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> sysfs_min_state_req;<span class="comment">//最小等级请求</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里以 backlight 和 cpu 实例分析一下thermal cooling devices的整个使用流程。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="backlight示例"><a href="#backlight示例" class="headerlink" title="backlight示例"></a>backlight示例</h3><p>首先framebuff驱动中，会调用 backlight_device_register 来注册背光驱动，在其中会调用 backlight_cdev_register 来注册backlight cooling devices，所以我们来分析一下在其中 backlight_cdev_register 的调用流程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">kernel/msm<span class="number">-4.14</span>/drivers/video/backlight/backlight.c</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backlight_cdev_register</span><span class="params">(struct device *parent,</span></span></span><br><span class="line"><span class="function"><span class="params">				    struct backlight_device *bd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (of_find_property(parent-&gt;of_node, <span class="string">&quot;#cooling-cells&quot;</span>, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">		bd-&gt;cdev = thermal_of_cooling_device_register(parent-&gt;of_node,</span><br><span class="line">				(<span class="keyword">char</span> *)dev_name(&amp;bd-&gt;dev), bd, &amp;bd_cdev_ops);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thermal_of_cooling_device_register(struct device_node *np,</span><br><span class="line">				   <span class="keyword">char</span> *type, <span class="keyword">void</span> *devdata,</span><br><span class="line">				   <span class="keyword">const</span> struct thermal_cooling_device_ops *ops)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> __thermal_cooling_device_register(np, type, devdata, ops);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * __thermal_cooling_device_register() - register a new thermal cooling device</span></span><br><span class="line"><span class="comment"> * @np:		a pointer to a device tree node.</span></span><br><span class="line"><span class="comment"> * @type:	the thermal cooling device type.</span></span><br><span class="line"><span class="comment"> * @devdata:	device private data.</span></span><br><span class="line"><span class="comment"> * @ops:		standard thermal cooling devices callbacks.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This interface function adds a new thermal cooling device (fan/processor/...)</span></span><br><span class="line"><span class="comment"> * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself</span></span><br><span class="line"><span class="comment"> * to all the thermal zone devices registered at the same time.</span></span><br><span class="line"><span class="comment"> * It also gives the opportunity to link the cooling device to a device tree</span></span><br><span class="line"><span class="comment"> * node, so that it can be bound to a thermal zone created out of device tree.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return: a pointer to the created struct thermal_cooling_device or an</span></span><br><span class="line"><span class="comment"> * ERR_PTR. Caller must check return value with IS_ERR*() helpers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *</span></span><br><span class="line"><span class="class">__<span class="title">thermal_cooling_device_register</span>(<span class="title">struct</span> <span class="title">device_node</span> *<span class="title">np</span>,</span></span><br><span class="line"><span class="class">				  <span class="title">char</span> *<span class="title">type</span>, <span class="title">void</span> *<span class="title">devdata</span>,</span></span><br><span class="line"><span class="class">				  <span class="title">const</span> <span class="title">struct</span> <span class="title">thermal_cooling_device_ops</span> *<span class="title">ops</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *<span class="title">cdev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_zone_device</span> *<span class="title">pos</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">	INIT_LIST_HEAD(&amp;cdev-&gt;thermal_instances);</span><br><span class="line">	</span><br><span class="line">	cdev-&gt;np = np;</span><br><span class="line">	cdev-&gt;ops = ops;</span><br><span class="line">	cdev-&gt;updated = <span class="literal">false</span>;</span><br><span class="line">	cdev-&gt;device.class = &amp;thermal_class;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 设置thermal cooling devcie使用到的属性</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	thermal_cooling_device_setup_sysfs(cdev);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 生成sys/class/thermal/cooling_deviceN/节点和里面的属性，主要属性如下</span></span><br><span class="line"><span class="comment">	 * 关于其中的属性函数设置，在对应的cooling_device驱动中，这里backlight驱动路径为</span></span><br><span class="line"><span class="comment">	 * kernel/msm-4.14/drivers/video/backlight/backlight.c</span></span><br><span class="line"><span class="comment">	 * static struct attribute *cooling_device_attrs[] = &#123;</span></span><br><span class="line"><span class="comment">	 *	&amp;dev_attr_cdev_type.attr,</span></span><br><span class="line"><span class="comment">	 * 	&amp;dev_attr_max_state.attr,</span></span><br><span class="line"><span class="comment">	 * 	&amp;dev_attr_cur_state.attr,</span></span><br><span class="line"><span class="comment">	 * 	&amp;dev_attr_min_state.attr,</span></span><br><span class="line"><span class="comment">	 *  NULL,</span></span><br><span class="line"><span class="comment">	 * 	&#125;;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	dev_set_name(&amp;cdev-&gt;device, <span class="string">&quot;cooling_device%d&quot;</span>, cdev-&gt;id);</span><br><span class="line">	device_register(&amp;cdev-&gt;device);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Add &#x27;this&#x27; new cdev to the global cdev list */</span></span><br><span class="line">	list_add(&amp;cdev-&gt;node, &amp;thermal_cdev_list);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Update binding information for &#x27;this&#x27; new cdev */</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 和bind_tz(tz)类似，主要功能是把thermal zone device</span></span><br><span class="line"><span class="comment">	 * 和对应的thermal cooling device联系起来</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	bind_cdev(cdev);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* Update binding information for &#x27;this&#x27; new cdev */</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 如果在注册thermal zone device中已经执行poll_queue工作队列</span></span><br><span class="line"><span class="comment">	 * 这里就直接跳过，否则调用poll_queue工作队列</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	list_for_each_entry(pos, &amp;thermal_tz_list, node)</span><br><span class="line">		<span class="keyword">if</span> (atomic_cmpxchg(&amp;pos-&gt;need_update, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">			thermal_zone_device_update(pos,</span><br><span class="line">						   THERMAL_EVENT_UNSPECIFIED);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cdev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">关于 thermal cooling device 的具体函数操作集如下，当thermal-engine通过调用sys/<span class="class"><span class="keyword">class</span>/<span class="title">thermal</span>/<span class="title">cooling_device</span>*/下面的属性节点来调节背光亮度时，具体就会调用对应的函数去实现。</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">struct</span> <span class="title">thermal_cooling_device_ops</span> <span class="title">bd_cdev_ops</span> = &#123;</span></span><br><span class="line">	.get_max_state = bd_cdev_get_max_brightness,</span><br><span class="line">	.get_cur_state = bd_cdev_get_cur_brightness,</span><br><span class="line">	.set_cur_state = bd_cdev_set_cur_brightness,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>总结：<br>thermal cooling device注册流程比较简单，大致如下：</p>
<ol>
<li>生成 “sys/class/thermal/cooling_deviceN/“ 节点和里面的属性（get_max_state，get_cur_state，set_cur_state）</li>
<li>把cdev node添加到 thermal_cdev_list 链表中</li>
<li>把thermal zone device 和thermal cooling device绑定起来</li>
<li>如果在注册thermal zone device时，已经启动poll_queue工作队列，这里就不调用，否则调用poll_queue工作队列来检测温度，执行对应动作。</li>
</ol>
<p>当温度到达某个 thermal_instances 中thermal zone device对应的触发温度，该触发温度如果绑定的thermal cooling device 为backlight，则调用backlight中的set_cur_state函数设置背光为对应的级别。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="cpufreq示例"><a href="#cpufreq示例" class="headerlink" title="cpufreq示例"></a>cpufreq示例</h3><p>首先分析cpufreq注册为thermal cooling device的软件流程,主要是通过在 qcom-cpufreq.c 中的 msm_cpufreq_ready函数调用of_cpufreq_cooling_register来完成的，所以我们来分析核心函数of_cpufreq_cooling_register。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * of_cpufreq_cooling_register - function to create cpufreq cooling device.</span></span><br><span class="line"><span class="comment"> * @np: a valid struct device_node to the cooling device device tree node</span></span><br><span class="line"><span class="comment"> * @policy: cpufreq policy</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This interface function registers the cpufreq cooling device with the name</span></span><br><span class="line"><span class="comment"> * &quot;thermal-cpufreq-%x&quot;. This api can support multiple instances of cpufreq</span></span><br><span class="line"><span class="comment"> * cooling devices. Using this API, the cpufreq cooling device will be</span></span><br><span class="line"><span class="comment"> * linked to the device tree node provided.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return: a valid struct thermal_cooling_device pointer on success,</span></span><br><span class="line"><span class="comment"> * on failure, it returns a corresponding ERR_PTR().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *</span></span><br><span class="line"><span class="class"><span class="title">of_cpufreq_cooling_register</span>(<span class="title">struct</span> <span class="title">device_node</span> *<span class="title">np</span>,</span></span><br><span class="line"><span class="class">			    <span class="title">struct</span> <span class="title">cpufreq_policy</span> *<span class="title">policy</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">if</span> (!np)</span><br><span class="line">		<span class="keyword">return</span> ERR_PTR(-EINVAL);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> __cpufreq_cooling_register(np, policy, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * __cpufreq_cooling_register - helper function to create cpufreq cooling device</span></span><br><span class="line"><span class="comment"> * @np: a valid struct device_node to the cooling device device tree node</span></span><br><span class="line"><span class="comment"> * @policy: cpufreq policy</span></span><br><span class="line"><span class="comment"> * Normally this should be same as cpufreq policy-&gt;related_cpus.</span></span><br><span class="line"><span class="comment"> * @capacitance: dynamic power coefficient for these cpus</span></span><br><span class="line"><span class="comment"> * @plat_static_func: function to calculate the static power consumed by these</span></span><br><span class="line"><span class="comment"> *                    cpus (optional)</span></span><br><span class="line"><span class="comment"> * @plat_mitig_func: function that does the mitigation by changing the</span></span><br><span class="line"><span class="comment"> *                   frequencies (Optional). By default, cpufreq framework will</span></span><br><span class="line"><span class="comment"> *                   be notified of the new limits.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This interface function registers the cpufreq cooling device with the name</span></span><br><span class="line"><span class="comment"> * &quot;thermal-cpufreq-%x&quot;. This api can support multiple instances of cpufreq</span></span><br><span class="line"><span class="comment"> * cooling devices. It also gives the opportunity to link the cooling device</span></span><br><span class="line"><span class="comment"> * with a device tree node, in order to bind it via the thermal DT code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return: a valid struct thermal_cooling_device pointer on success,</span></span><br><span class="line"><span class="comment"> * on failure, it returns a corresponding ERR_PTR().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * of_cpufreq_cooling_register调用__cpufreq_cooling_register时</span></span><br><span class="line"><span class="comment"> * 传入的后3个参数分别为0,NULL,NULL</span></span><br><span class="line"><span class="comment"> * 即capacitance = 0,plat_static_func和plat_ops为NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *</span></span><br><span class="line"><span class="class">__<span class="title">cpufreq_cooling_register</span>(<span class="title">struct</span> <span class="title">device_node</span> *<span class="title">np</span>,</span></span><br><span class="line"><span class="class">			<span class="title">struct</span> <span class="title">cpufreq_policy</span> *<span class="title">policy</span>, <span class="title">u32</span> <span class="title">capacitance</span>,</span></span><br><span class="line"><span class="class">			<span class="title">get_static_t</span> <span class="title">plat_static_func</span>,</span></span><br><span class="line"><span class="class">			<span class="title">struct</span> <span class="title">cpu_cooling_ops</span> *<span class="title">plat_ops</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device</span> *<span class="title">cdev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cpufreq_cooling_device</span> *<span class="title">cpufreq_cdev</span>;</span></span><br><span class="line">	<span class="keyword">char</span> dev_name[THERMAL_NAME_LENGTH];</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> freq, i, num_cpus, cpu_idx;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_cooling_device_ops</span> *<span class="title">cooling_ops</span>;</span></span><br><span class="line">	<span class="keyword">bool</span> first;</span><br><span class="line">    </span><br><span class="line">	cpufreq_cdev = kzalloc(<span class="keyword">sizeof</span>(*cpufreq_cdev), GFP_KERNEL);</span><br><span class="line">	</span><br><span class="line">	cpufreq_cdev-&gt;policy = policy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 从dts中解析出cpu_idx赋值给cpu_id. */</span></span><br><span class="line">	cpufreq_cdev-&gt;cpu_id = <span class="number">-1</span>;</span><br><span class="line">	for_each_cpu(cpu_idx, policy-&gt;related_cpus) &#123;</span><br><span class="line">		<span class="keyword">if</span> (np == of_cpu_device_node_get(cpu_idx)) &#123;</span><br><span class="line">			cpufreq_cdev-&gt;cpu_id = cpu_idx;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Last level will indicate the core will be isolated. */</span></span><br><span class="line">	cpufreq_cdev-&gt;max_level = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	cpufreq_cdev-&gt;freq_table = kmalloc_array(cpufreq_cdev-&gt;max_level,</span><br><span class="line">					<span class="keyword">sizeof</span>(*cpufreq_cdev-&gt;freq_table),</span><br><span class="line">					GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* max_level is an index */</span></span><br><span class="line">	cpufreq_cdev-&gt;max_level--;</span><br><span class="line"></span><br><span class="line">	ret = ida_simple_get(&amp;cpufreq_ida, <span class="number">0</span>, <span class="number">0</span>, GFP_KERNEL);</span><br><span class="line">	cpufreq_cdev-&gt;id = ret;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">snprintf</span>(dev_name, <span class="keyword">sizeof</span>(dev_name), <span class="string">&quot;thermal-cpufreq-%d&quot;</span>,</span><br><span class="line">		 cpufreq_cdev-&gt;id);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Fill freq-table in descending order of frequencies */</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>, freq = <span class="number">-1</span>; i &lt; cpufreq_cdev-&gt;max_level; i++) &#123;</span><br><span class="line">		freq = find_next_max(policy-&gt;freq_table, freq);</span><br><span class="line">		cpufreq_cdev-&gt;freq_table[i].frequency = freq;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Max level index is for core isolation, set this level as zero */</span></span><br><span class="line">	cpufreq_cdev-&gt;freq_table[cpufreq_cdev-&gt;max_level].frequency = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * cpu cooling device的操作函数集如下</span></span><br><span class="line"><span class="comment">	 * static struct thermal_cooling_device_ops cpufreq_cooling_ops = &#123;</span></span><br><span class="line"><span class="comment">	 * .get_max_state = cpufreq_get_max_state,</span></span><br><span class="line"><span class="comment">	 * .get_cur_state = cpufreq_get_cur_state,</span></span><br><span class="line"><span class="comment">	 * .set_cur_state = cpufreq_set_cur_state,</span></span><br><span class="line"><span class="comment">	 * .set_min_state = cpufreq_set_min_state,</span></span><br><span class="line"><span class="comment">	 * .get_min_state = cpufreq_get_min_state,</span></span><br><span class="line"><span class="comment">	 * &#125;;</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	cooling_ops = &amp;cpufreq_cooling_ops;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * thermal core提供的统一API，填充相关参数，用来注册thermal cooling devces</span></span><br><span class="line"><span class="comment">	 * 在backlight示例中已分析此函数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	cdev = thermal_of_cooling_device_register(np, dev_name, cpufreq_cdev,cooling_ops);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 给clipped_freq赋值freq_table中最大的频率</span></span><br><span class="line"><span class="comment">	 * 给floor_freq赋值freq_table中最小的频率</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	cpufreq_cdev-&gt;clipped_freq = cpufreq_cdev-&gt;freq_table[<span class="number">0</span>].frequency;</span><br><span class="line">	cpufreq_cdev-&gt;floor_freq =</span><br><span class="line">		cpufreq_cdev-&gt;freq_table[cpufreq_cdev-&gt;max_level].frequency;</span><br><span class="line">	cpufreq_cdev-&gt;cpufreq_floor_state = cpufreq_cdev-&gt;max_level;</span><br><span class="line">	cpufreq_cdev-&gt;cdev = cdev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Register the notifier for first cpufreq cooling device */</span></span><br><span class="line">	first = list_empty(&amp;cpufreq_cdev_list);</span><br><span class="line">	list_add(&amp;cpufreq_cdev-&gt;node, &amp;cpufreq_cdev_list);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 注册事件通知链 cpufreq_policy_notifier_list ，其中回调函数为</span></span><br><span class="line"><span class="comment">	 * thermal_cpufreq_notifier_block</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (first &amp;&amp; !cpufreq_cdev-&gt;plat_ops)</span><br><span class="line">		cpufreq_register_notifier(&amp;thermal_cpufreq_notifier_block,</span><br><span class="line">					  CPUFREQ_POLICY_NOTIFIER);</span><br><span class="line">    	---&gt;blocking_notifier_chain_register(</span><br><span class="line">				&amp;cpufreq_policy_notifier_list, nb);</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 1.注册事件通知链 pm_chain_head ，其中回调函数为 cpufreq_cooling_pm_nb</span></span><br><span class="line"><span class="comment">	 * 2.初始化cpuhp_register_work工作队列，并立即调度</span></span><br><span class="line"><span class="comment">	 * ---&gt;该工作队列主要目的为设置cpu hotplug状态的回调函数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (!cpuhp_registered) &#123;</span><br><span class="line">		cpuhp_registered = <span class="number">1</span>;</span><br><span class="line">		register_pm_notifier(&amp;cpufreq_cooling_pm_nb);</span><br><span class="line">		INIT_WORK(&amp;cpuhp_register_work, register_cdev);</span><br><span class="line">		queue_work(system_wq, &amp;cpuhp_register_work);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cdev;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到，注册cpufreq thermal cooling device的流程和backlight基本一致，只是要执行最终对应的动作时，2者使用的函数集不同，cpufreq对应cpufreq_cooling_ops，而backlight对应bd_cdev_ops。</p>
<p>注意点：<br>关于cooling device的dts中cooling-device属性的格式如下：<br>cooling-device =&lt;&amp;<mitigation_device> <perf_ceiling> <perf_floor>&gt;;</perf_floor></perf_ceiling></mitigation_device></p>
<ul>
<li>perf_ceiling parameter is the highest allowable performance level (that is, the ceiling)</li>
<li>perf_floor is the lowest allowable performance level (that is, the floor)</li>
<li>In either case, a lower index means less mitigation and higher index means deeper mitigation; there can be<br>multiple of these levels depending on rule</li>
<li>perf_ceiling value should always be &lt;= to perf_floor</li>
</ul>
<p>其中perf_ceiling和perf_floor有2种填写类型：</p>
<ol>
<li><p>使用THERMAL_MAX_LIMIT宏，即使用相对值的方式：<br>cooling-device = &lt;&amp;CPU7 (THERMAL_MAX_LIMIT-5) (THERMAL_MAX_LIMIT-2)&gt;;<br>这里假设 cooling device的min_state为0，max_state为8，那么上面的dts的等效为<br>cooling-device = &lt;&amp;CPU7 3 6&gt;;</p>
</li>
<li><p>直接使用绝对值的方式：<br>cooling-device = &lt;&amp;modem_vdd 0 0&gt;;<br>相关详细代码可以参见如下逻辑：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* kernel/msm-4.14/drivers/thermal/thermal_core.c */</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * If upper or lower has a MACRO to define the mitigation state,</span></span><br><span class="line"><span class="comment">	 * based on the MACRO determine the default state to use or the</span></span><br><span class="line"><span class="comment">	 * offset from the max_state.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (upper &gt;= (THERMAL_MAX_LIMIT - max_state)) &#123;</span><br><span class="line">		<span class="comment">/* upper default max_state */</span></span><br><span class="line">		<span class="keyword">if</span> (upper == THERMAL_NO_LIMIT)</span><br><span class="line">			upper = max_state;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			upper = max_state - (THERMAL_MAX_LIMIT - upper);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (lower &gt;= (THERMAL_MAX_LIMIT - max_state)) &#123;</span><br><span class="line">		<span class="comment">/* lower default 0 */</span></span><br><span class="line">		<span class="keyword">if</span> (lower == THERMAL_NO_LIMIT)</span><br><span class="line">			lower = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			lower =  max_state - (THERMAL_MAX_LIMIT - lower);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Thermal-Governor"><a href="#Thermal-Governor" class="headerlink" title="Thermal Governor"></a>Thermal Governor</h2><p>Thermal Governor作为框架中的降温策略，主要的Governor如下，我们一一介绍</p>
<ul>
<li>user space</li>
<li>step wise</li>
<li>low_limits_floor 和 low_limits_cap</li>
</ul>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="user-space"><a href="#user-space" class="headerlink" title="user space"></a>user space</h3><p>user space算法非常简单，当相关温度触发该机制时，调用notify_user_space函数，使用uevent机制来通知thermal-engine，关于thermal-engine具体怎么接受及使用kernel发送的信息，等后面thermal-engine的章节再介绍。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * notify_user_space - Notifies user space about thermal events</span></span><br><span class="line"><span class="comment"> * @tz - thermal_zone_device</span></span><br><span class="line"><span class="comment"> * @trip - trip point index</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function notifies the user space through UEvents.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">notify_user_space</span><span class="params">(struct thermal_zone_device *tz, <span class="keyword">int</span> trip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *thermal_prop[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">	thermal_prop[<span class="number">0</span>] = kasprintf(GFP_KERNEL, <span class="string">&quot;NAME=%s&quot;</span>, tz-&gt;type);</span><br><span class="line">	thermal_prop[<span class="number">1</span>] = kasprintf(GFP_KERNEL, <span class="string">&quot;TEMP=%d&quot;</span>, tz-&gt;temperature);</span><br><span class="line">	thermal_prop[<span class="number">2</span>] = kasprintf(GFP_KERNEL, <span class="string">&quot;TRIP=%d&quot;</span>, trip);</span><br><span class="line">	thermal_prop[<span class="number">3</span>] = kasprintf(GFP_KERNEL, <span class="string">&quot;EVENT=%d&quot;</span>, tz-&gt;notify_event);</span><br><span class="line">	thermal_prop[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 发送uevent事件给thermal-engine服务</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	kobject_uevent_env(&amp;tz-&gt;device.kobj, KOBJ_CHANGE, thermal_prop);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_governor</span> <span class="title">thermal_gov_user_space</span> = &#123;</span></span><br><span class="line">	.name		= <span class="string">&quot;user_space&quot;</span>,</span><br><span class="line">	.throttle	= notify_user_space,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">thermal_gov_user_space_register</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> thermal_register_governor(&amp;thermal_gov_user_space);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="step-wise"><a href="#step-wise" class="headerlink" title="step wise"></a>step wise</h3><p>step wise 策略根据当前温度和温度的趋势来动态调节温度制御等级，多用于cpu，gpu频率等级的动态调节，其策略的实现逻辑如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">step_wise_throttle</span><span class="params">(struct thermal_zone_device *tz, <span class="keyword">int</span> trip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_instance</span> *<span class="title">instance</span>;</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 主要作用是通过温度趋势来决定instance-&gt;target</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	thermal_zone_trip_update(tz, trip);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 根据如下2个值来最终决定cooling device的当前状态</span></span><br><span class="line"><span class="comment">	 * cdev-&gt;sysfs_cur_state_req</span></span><br><span class="line"><span class="comment">	 * instance-&gt;target</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	list_for_each_entry(instance, &amp;tz-&gt;thermal_instances, tz_node)</span><br><span class="line">		thermal_cdev_update(instance-&gt;cdev);</span><br><span class="line">		---&gt;<span class="comment">//设置cooling devices为目标状态</span></span><br><span class="line">			cdev-&gt;ops-&gt;set_cur_state(cdev, current_target);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_governor</span> <span class="title">thermal_gov_step_wise</span> = &#123;</span></span><br><span class="line">	.name		= <span class="string">&quot;step_wise&quot;</span>,</span><br><span class="line">	.throttle	= step_wise_throttle,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">thermal_gov_step_wise_register</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> thermal_register_governor(&amp;thermal_gov_step_wise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中step wise策略核心思想是由thermal_zone_trip_update实现的，主要内容如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thermal_zone_trip_update</span><span class="params">(struct thermal_zone_device *tz, <span class="keyword">int</span> trip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> trip_temp, hyst_temp;</span><br><span class="line">	<span class="keyword">enum</span> thermal_trip_type trip_type;</span><br><span class="line">	<span class="keyword">enum</span> thermal_trend trend;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_instance</span> *<span class="title">instance</span>;</span></span><br><span class="line">	<span class="keyword">bool</span> throttle = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> old_target;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 获取therma zone 的tirp 温度和hyst温度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (trip == THERMAL_TRIPS_NONE) &#123;</span><br><span class="line">		hyst_temp = trip_temp = tz-&gt;forced_passive;</span><br><span class="line">		trip_type = THERMAL_TRIPS_NONE;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		tz-&gt;ops-&gt;get_trip_temp(tz, trip, &amp;trip_temp);</span><br><span class="line">		<span class="keyword">if</span> (tz-&gt;ops-&gt;get_trip_hyst) &#123;</span><br><span class="line">			tz-&gt;ops-&gt;get_trip_hyst(tz, trip, &amp;hyst_temp);</span><br><span class="line">			hyst_temp = trip_temp - hyst_temp;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			hyst_temp = trip_temp;</span><br><span class="line">		&#125;</span><br><span class="line">		tz-&gt;ops-&gt;get_trip_type(tz, trip, &amp;trip_type);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 获取当前的温度趋势，trend结果如下</span></span><br><span class="line"><span class="comment">	 * THERMAL_TREND_RAISING:温度上升</span></span><br><span class="line"><span class="comment">	 * THERMAL_TREND_DROPPING:温度下降</span></span><br><span class="line"><span class="comment">	 * THERMAL_TREND_STABLE:温度平稳</span></span><br><span class="line"><span class="comment">	 * THERMAL_TREND_RAISE_FULL:应用最高等级的温度制御动作</span></span><br><span class="line"><span class="comment">	 * THERMAL_TREND_DROP_FULL：应用最低等级的温度制御动作</span></span><br><span class="line"><span class="comment">	 * 最后2种状态在当前kernel-4.19版本中并没有涉及。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	trend = get_tz_trend(tz, trip);</span><br><span class="line"></span><br><span class="line">	list_for_each_entry(instance, &amp;tz-&gt;thermal_instances, tz_node) &#123;</span><br><span class="line">		<span class="keyword">if</span> (instance-&gt;trip != trip)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">		old_target = instance-&gt;target;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Step wise has to lower the mitigation only if the</span></span><br><span class="line"><span class="comment">		 * temperature goes below the hysteresis temperature.</span></span><br><span class="line"><span class="comment">		 * Atleast, it has to hold on to mitigation device lower</span></span><br><span class="line"><span class="comment">		 * limit if the temperature is above the hysteresis</span></span><br><span class="line"><span class="comment">		 * temperature.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (tz-&gt;temperature &gt;= trip_temp ||</span><br><span class="line">			(tz-&gt;temperature &gt; hyst_temp &amp;&amp;</span><br><span class="line">			 old_target != THERMAL_NO_TARGET))</span><br><span class="line">			throttle = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			throttle = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 如果温度高于触发温度</span></span><br><span class="line"><span class="comment">		 *    a. 温度趋势为 THERMAL_TREND_RAISING</span></span><br><span class="line"><span class="comment">		 *    ---&gt;提升温度制御动作</span></span><br><span class="line"><span class="comment">		 *    b. 温度趋势 THERMAL_TREND_DROPPING</span></span><br><span class="line"><span class="comment">		 *    ---&gt;不处理</span></span><br><span class="line"><span class="comment">		 *    c. 温度趋势 THERMAL_TREND_RAISE_FULL</span></span><br><span class="line"><span class="comment">         *    ---&gt;使用最高等级的温度制御动作</span></span><br><span class="line"><span class="comment">		 *    a. 温度趋势为 THERMAL_TREND_DROP_FULL</span></span><br><span class="line"><span class="comment">		 *    ---&gt;使用最低等级的温度制御动作</span></span><br><span class="line"><span class="comment">		 *    </span></span><br><span class="line"><span class="comment">		 * 如果温度低于触发温度</span></span><br><span class="line"><span class="comment">		 *    a. 温度趋势为 THERMAL_TREND_RAISING</span></span><br><span class="line"><span class="comment">		 *    ---&gt;不处理</span></span><br><span class="line"><span class="comment">		 *    b. 温度趋势 THERMAL_TREND_DROPPING</span></span><br><span class="line"><span class="comment">		 *    ---&gt;降低温度制御等级，</span></span><br><span class="line"><span class="comment">		 *    ---&gt;如果已经为最低温度制御等级，停止thermal instance策略</span></span><br><span class="line"><span class="comment">		 *    c. 温度趋势 THERMAL_TREND_RAISE_FULL</span></span><br><span class="line"><span class="comment">         *    ---&gt;不处理</span></span><br><span class="line"><span class="comment">		 *    a. 温度趋势为 THERMAL_TREND_DROP_FULL</span></span><br><span class="line"><span class="comment">		 *    ---&gt;使用最低等级的温度制御动作</span></span><br><span class="line"><span class="comment">		 *    ---&gt;如果已经为最低等级温度制御等级，停止thermal instance策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">		instance-&gt;target = get_target_state(instance, trend, throttle);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 初始化完成，并且温度制御目标等级未发生变化，跳过</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (instance-&gt;initialized &amp;&amp; old_target == instance-&gt;target)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 根据instance-&gt;target来更新tz-&gt;passive的值</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (!instance-&gt;initialized) &#123;</span><br><span class="line">			<span class="keyword">if</span> (instance-&gt;target != THERMAL_NO_TARGET) &#123;</span><br><span class="line">				trace_thermal_zone_trip(tz, trip, trip_type,</span><br><span class="line">							<span class="literal">true</span>);</span><br><span class="line">				update_passive_instance(tz, trip_type, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">/* Activate a passive thermal instance */</span></span><br><span class="line">			<span class="keyword">if</span> (old_target == THERMAL_NO_TARGET &amp;&amp;</span><br><span class="line">				instance-&gt;target != THERMAL_NO_TARGET) &#123;</span><br><span class="line">				trace_thermal_zone_trip(tz, trip, trip_type,</span><br><span class="line">							<span class="literal">true</span>);</span><br><span class="line">				update_passive_instance(tz, trip_type, <span class="number">1</span>);</span><br><span class="line">			<span class="comment">/* Deactivate a passive thermal instance */</span></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (old_target != THERMAL_NO_TARGET &amp;&amp;</span><br><span class="line">				instance-&gt;target == THERMAL_NO_TARGET) &#123;</span><br><span class="line">				trace_thermal_zone_trip(tz, trip, trip_type,</span><br><span class="line">							<span class="literal">false</span>);</span><br><span class="line">				update_passive_instance(tz, trip_type, <span class="number">-1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		instance-&gt;initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		instance-&gt;cdev-&gt;updated = <span class="literal">false</span>; <span class="comment">/* cdev needs update */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mutex_unlock(&amp;tz-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>step wise机制的逻辑框图大致如下：<br><img src="/2021/01/05/Thermal_Core_Framework_Architecture/step_wise.PNG" alt="step wise机制"></p>
<p>如果dts中某个实例的cooling-device属性中的perf_ceiling与perf_floor相等时，当触发实例时，该算法直接设置相关cooling devices的等级为定值，不进行动态变化。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="low-limits-floor-和-low-limits-cap"><a href="#low-limits-floor-和-low-limits-cap" class="headerlink" title="low_limits_floor 和 low_limits_cap"></a>low_limits_floor 和 low_limits_cap</h3><ul>
<li>low_limits_floor handles VDD restriction by placing a perf floor on cooling device</li>
<li>low_limits_cap handles SOC and VBat conditions by placing a perf ceiling on cooling device</li>
</ul>
<p>low_limits_floor 和 low_limits_cap 为一类别算法，在如下代码中可以看出，low_limits_floor 相关结构体只是多了”.min_state_throttle = 1”一行代码，导致他们的处理逻辑不一致。</p>
<ul>
<li>low_limits_floor 当检测到thermal zone温度低于触发温度时,将instance-&gt;target设置为最高cooling device制御级别，如果该值小于cdev-&gt;sysfs_min_state_req（这里的min state对应cooling device的最高制御），则重新设置cooling device的最高温度制御状态，即 cooling the device floor state为当前instance-&gt;target的值。</li>
<li>low_limits_cap 当检测到thermal zone温度低于触发温度时,将instance-&gt;target设置为最高cooling device制御级别，如果该值大于当前的cooling device等级，则设置当前温度制御等级的值为instance-&gt;target的值。<br>详细代码流程如下：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">low_limits_throttle</span><span class="params">(struct thermal_zone_device *tz, <span class="keyword">int</span> trip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_instance</span> *<span class="title">instance</span>;</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 主要作用是通过温度是否低于触发温度来决定instance-&gt;target</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	thermal_zone_trip_update(tz, trip);</span><br><span class="line"></span><br><span class="line">	list_for_each_entry(instance, &amp;tz-&gt;thermal_instances, tz_node)</span><br><span class="line">		thermal_cdev_update(instance-&gt;cdev);</span><br><span class="line">		---&gt;<span class="comment">//low_limits_floor算法，替换cooling device 的floor state</span></span><br><span class="line">			cdev-&gt;ops-&gt;set_min_state(cdev, min_target);</span><br><span class="line">		[<span class="keyword">or</span>]</span><br><span class="line">		---&gt;<span class="comment">//low_limits_cap算法,替换cooling device的ceiling state</span></span><br><span class="line">			cdev-&gt;ops-&gt;set_cur_state(cdev, current_target);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_governor</span> <span class="title">thermal_gov_low_limits_floor</span> = &#123;</span></span><br><span class="line">	.name		= <span class="string">&quot;low_limits_floor&quot;</span>,</span><br><span class="line">	.throttle	= low_limits_throttle,</span><br><span class="line">	.min_state_throttle = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">thermal_governor</span> <span class="title">thermal_gov_low_limits_cap</span> = &#123;</span></span><br><span class="line">	.name		= <span class="string">&quot;low_limits_cap&quot;</span>,</span><br><span class="line">	.throttle	= low_limits_throttle,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thermal_zone_trip_update</span><span class="params">(struct thermal_zone_device *tz, <span class="keyword">int</span> trip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> trip_temp, trip_hyst;</span><br><span class="line">	<span class="keyword">enum</span> thermal_trip_type trip_type;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thermal_instance</span> *<span class="title">instance</span>;</span></span><br><span class="line">	<span class="keyword">bool</span> throttle;</span><br><span class="line">	<span class="keyword">int</span> old_target;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 获取therma zone 的tirp 温度和hyst温度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	tz-&gt;ops-&gt;get_trip_temp(tz, trip, &amp;trip_temp);</span><br><span class="line">	tz-&gt;ops-&gt;get_trip_type(tz, trip, &amp;trip_type);</span><br><span class="line">	<span class="keyword">if</span> (tz-&gt;ops-&gt;get_trip_hyst) &#123;</span><br><span class="line">		tz-&gt;ops-&gt;get_trip_hyst(tz, trip, &amp;trip_hyst);</span><br><span class="line">		trip_hyst = trip_temp + trip_hyst;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		trip_hyst = trip_temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;tz-&gt;lock);</span><br><span class="line"></span><br><span class="line">	list_for_each_entry(instance, &amp;tz-&gt;thermal_instances, tz_node) &#123;</span><br><span class="line">		<span class="keyword">if</span> (instance-&gt;trip != trip)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 	 * 获取therma zone 温度低于触发温度时，设置throttle为true</span></span><br><span class="line"><span class="comment">	 	 * 同时设置instance-&gt;target为最高制御等级限制行为</span></span><br><span class="line"><span class="comment">	 	 */</span></span><br><span class="line">		<span class="keyword">if</span> ((tz-&gt;temperature &lt;= trip_temp) ||</span><br><span class="line">			(instance-&gt;target != THERMAL_NO_TARGET</span><br><span class="line">				&amp;&amp; tz-&gt;temperature &lt; trip_hyst))</span><br><span class="line">			throttle = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			throttle = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		old_target = instance-&gt;target;</span><br><span class="line">		instance-&gt;target = (throttle) ? instance-&gt;upper</span><br><span class="line">					: THERMAL_NO_TARGET;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (instance-&gt;initialized &amp;&amp; old_target == instance-&gt;target)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 根据instance-&gt;target来更新tz-&gt;passive的值</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">if</span> (!instance-&gt;initialized) &#123;</span><br><span class="line">			<span class="keyword">if</span> (instance-&gt;target != THERMAL_NO_TARGET) &#123;</span><br><span class="line">				trace_thermal_zone_trip(tz, trip, trip_type,</span><br><span class="line">							<span class="literal">true</span>);</span><br><span class="line">				tz-&gt;passive += <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (old_target == THERMAL_NO_TARGET &amp;&amp;</span><br><span class="line">				instance-&gt;target != THERMAL_NO_TARGET) &#123;</span><br><span class="line">				trace_thermal_zone_trip(tz, trip, trip_type,</span><br><span class="line">							<span class="literal">true</span>);</span><br><span class="line">				tz-&gt;passive += <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (old_target != THERMAL_NO_TARGET &amp;&amp;</span><br><span class="line">				instance-&gt;target == THERMAL_NO_TARGET) &#123;</span><br><span class="line">				trace_thermal_zone_trip(tz, trip, trip_type,</span><br><span class="line">							<span class="literal">false</span>);</span><br><span class="line">				tz-&gt;passive -= <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		instance-&gt;initialized = <span class="literal">true</span>;</span><br><span class="line">		instance-&gt;cdev-&gt;updated = <span class="literal">false</span>; <span class="comment">/* cdev needs update */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mutex_unlock(&amp;tz-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>算法代码流程如上，比较简单，我们这里用 CPU 和 BCL 来举例说明low_limits_floor 和 low_limits_cap的具体流程。</p>
<p>CPU 示例：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cpu<span class="number">-1</span><span class="number">-0</span>-lowf &#123;</span><br><span class="line">		polling-delay-passive = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">		polling-delay = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">		thermal-governor = <span class="string">&quot;low_limits_floor&quot;</span>;</span><br><span class="line">		thermal-sensors = &lt;&amp;tsens0 <span class="number">9</span>&gt;;</span><br><span class="line">		wake-capable-sensor;</span><br><span class="line">		tracks-low;</span><br><span class="line">		trips &#123;</span><br><span class="line">			cpu4_lowf_trip: cpu4-lowf-trip &#123;</span><br><span class="line">				temperature = &lt;<span class="number">5000</span>&gt;;</span><br><span class="line">				hysteresis = &lt;<span class="number">5000</span>&gt;;</span><br><span class="line">				type = <span class="string">&quot;passive&quot;</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;;</span><br><span class="line">		cooling-maps &#123;</span><br><span class="line">			cpu0_cdev &#123;</span><br><span class="line">				trip = &lt;&amp;cpu4_lowf_trip&gt;;</span><br><span class="line">				cooling-device = &lt;&amp;CPU0 (THERMAL_MAX_LIMIT<span class="number">-5</span>)</span><br><span class="line">							(THERMAL_MAX_LIMIT<span class="number">-5</span>)&gt;;</span><br><span class="line">			&#125;;</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line">			</span><br><span class="line">            cpu7_cdev &#123;</span><br><span class="line">				trip = &lt;&amp;cpu4_lowf_trip&gt;;</span><br><span class="line">				cooling-device = &lt;&amp;CPU7 (THERMAL_MAX_LIMIT<span class="number">-5</span>)</span><br><span class="line">							(THERMAL_MAX_LIMIT<span class="number">-5</span>)&gt;;</span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">            </span><br><span class="line">		&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>此段dts的目的为</p>
<ol>
<li>注册一个名字为 cpu-1-0-lowf 的thermal zone</li>
<li>此thermal zone没有使用轮询方式，而是 type为 passive 来主动进行温度制御</li>
<li>算法使用low_limits_floor</li>
<li>使用的cpu内部tsens0 id为9的sensor</li>
<li>设置温度触发点为5摄氏度，滞后值也为5摄氏度</li>
<li>假设该平台，CPU max state为8，min state为0，当sensor温度低于5摄氏度时，查看当前的cdev-&gt;sysfs_min_state_req（这里的min state对应cooling device的最高制御），如果【max_state - (THERMAL_MAX_LIMIT - lower) = 3】小于cdev-&gt;sysfs_min_state_req，则重新设置cooling dev的floor state 为3。主要作用为低温时，减少对CPU频率上限的限制。</li>
</ol>
<p>BCL battery voltage控制示例<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pmi632-vbat-lvl0 &#123;</span><br><span class="line">	polling-delay-passive = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">	polling-delay = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">	thermal-governor = <span class="string">&quot;low_limits_cap&quot;</span>;</span><br><span class="line">	thermal-sensors = &lt;&amp;bcl_sensor <span class="number">2</span>&gt;;</span><br><span class="line">	wake-capable-sensor;</span><br><span class="line">	tracks-low;</span><br><span class="line"></span><br><span class="line">	trips &#123;</span><br><span class="line">		pmi632_vbat_lvl0: vbat-lvl0 &#123;</span><br><span class="line">			temperature = &lt;<span class="number">3000</span>&gt;;</span><br><span class="line">			hysteresis = &lt;<span class="number">100</span>&gt;;</span><br><span class="line">			type = <span class="string">&quot;passive&quot;</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>此段dts的目的为</p>
<ol>
<li>注册一个名字为 pmi632-vbat-lvl0的thermal zone</li>
<li>此thermal zone没有使用轮询方式，而是 type为 passive 来主动进行温度制御</li>
<li>算法使用 low_limits_cap</li>
<li>使用的bcl_sensor id为2的sensor，虚构的sensor，实际是读取的电压值，单位为mV</li>
<li>设置sensor触发值为3v，滞后值为0.1v</li>
<li>当sensor值低于3v时，触发某些动作，由于此平台默认没有动作，所以没有cooling-maps部分，我们可以根据实际项目情况添加。</li>
</ol>
<p>BCL battery soc控制示例<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">soc &#123;</span><br><span class="line">	polling-delay-passive = &lt;<span class="number">100</span>&gt;;</span><br><span class="line">	polling-delay = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">	thermal-governor = <span class="string">&quot;low_limits_cap&quot;</span>;</span><br><span class="line">	thermal-sensors = &lt;&amp;bcl_soc&gt;;</span><br><span class="line">	wake-capable-sensor;</span><br><span class="line">	tracks-low;</span><br><span class="line"></span><br><span class="line">	trips &#123;</span><br><span class="line">		pmi632_low_soc: low-soc &#123;</span><br><span class="line">			temperature = &lt;<span class="number">10</span>&gt;;</span><br><span class="line">			hysteresis = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">			type = <span class="string">&quot;passive&quot;</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	cooling-maps &#123;</span><br><span class="line">		soc_cpu0 &#123;</span><br><span class="line">			trip = &lt;&amp;pmi632_low_soc&gt;;</span><br><span class="line">			cooling-device =</span><br><span class="line">				&lt;&amp;CPU0 (THERMAL_MAX_LIMIT<span class="number">-5</span>)</span><br><span class="line">					(THERMAL_MAX_LIMIT<span class="number">-5</span>)&gt;;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">		soc_cpu7 &#123;</span><br><span class="line">			trip = &lt;&amp;pmi632_low_soc&gt;;</span><br><span class="line">			cooling-device =</span><br><span class="line">				&lt;&amp;CPU7 THERMAL_MAX_LIMIT</span><br><span class="line">					THERMAL_MAX_LIMIT&gt;;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>此段dts的目的为</p>
<ol>
<li>注册一个名字为 soc 的thermal zone</li>
<li>此thermal zone没有使用轮询方式，而是 type为 passive 来主动进行温度制御</li>
<li>算法使用 low_limits_cap</li>
<li>使用的bcl_soc sensor，虚构的sensor，实际是读取电池容量百分比</li>
<li>设置sensor触发值为10%，无滞后值</li>
<li>当sensor值低于10%时，设置CPU0的cooling state为3（假设max = 8，min = 0），同时设置CPU7的cooling state为8，即hotplug该cpu。</li>
</ol>
<p>除了step wise,userspace,low_limits_floor 和 low_limits_cap算法在高通Android系统有经常使用到，<br>thermal governor还包括了power_allocator，bang_bang，fair_share算法，但是从目前高通Android代码看，基本没有使用到，所以这里就不做介绍了。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Thermal-Core总结"><a href="#Thermal-Core总结" class="headerlink" title="Thermal Core总结"></a>Thermal Core总结</h2><p>以使用backlight来控制亮度，step wise算法来控制温度为例，相关时序图如下：<br><img src="/2021/01/05/Thermal_Core_Framework_Architecture/Thermal_core.png" alt="Thermal Core 时序图"></p>
]]></content>
      <categories>
        <category>Thermal</category>
      </categories>
      <tags>
        <tag>Thermal</tag>
      </tags>
  </entry>
  <entry>
    <title>Android_USB_Framework_Architecture</title>
    <url>/2021/03/20/Android-USB-Framework-Architecture/</url>
    <content><![CDATA[<!-- toc -->
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>USB是通用串行总线（Universal Serial Bus）的缩写，，目前USB协议版本如下</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>USB Version</th>
<th>BandWidth</th>
<th>Power</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB1.0</td>
<td>1.5Mbps</td>
<td>5V/500mA</td>
<td>USB LOW SPEED</td>
</tr>
<tr>
<td>USB1.1</td>
<td>12Mbps</td>
<td>5V/500mA</td>
<td>USB FULL SPEED</td>
</tr>
<tr>
<td>USB2.0</td>
<td>480Mbps</td>
<td>5V/500mA</td>
<td>USB HIGH SPEED</td>
</tr>
<tr>
<td>USB3.0</td>
<td>5Gbps</td>
<td>5V/1A</td>
<td>SuperSpeed USB<br>当USB3.1推出时，USB3.0被追溯命名为 USB 3.1 Gen 1,<br>在2019年USB IF再次更新标准，USB3.0被称为USB 3.2 Gen1</td>
</tr>
<tr>
<td>USB3.1</td>
<td>10Gbps</td>
<td>5V/1A <br>12V/2A <br>20V/5A</td>
<td>SuperSpeed USB 10Gbps<br>当USB3.1推出时，按照新的标准命名为USB 3.1 Gen2，<br>在2019年USB IF再次更新标准，被重命名为USB 3.2 Gen 2</td>
</tr>
<tr>
<td>USB3.2</td>
<td>20Gbps</td>
<td>5V/1A<br>12V/2A<br>20V/5A</td>
<td>SuperSpeed USB 20Gbps<br>根据新标准，被命名为USB 3.2 Gen 2×2</td>
</tr>
<tr>
<td>USB4.0</td>
<td>40Gbps</td>
<td>5V/1A<br>12V/2A<br>20V/5A</td>
<td>只是协议，还没有配套硬件推出</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h3><p>USB的拓扑结构如下，可以看到主要由3种元素组成：主机、Hub和设备。<br><img src="/2021/03/20/Android-USB-Framework-Architecture/USB_Topology.PNG" alt="USB_Topology"></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="物理接口"><a href="#物理接口" class="headerlink" title="物理接口"></a>物理接口</h3><p>物理接口分为3类，USB1.x &amp;&amp; USB2.0，USB3.x和 Type-C，下面分别介绍3种类别的物理接口</p>
<p>USB1.x &amp;&amp; USB2.0:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>引脚</th>
<th>线缆颜色</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>VBUS</td>
<td>红色</td>
<td>+5V供电</td>
<td>Type-A/B</td>
</tr>
<tr>
<td>D+</td>
<td>白色</td>
<td>差分数据线</td>
<td>Type-A/B</td>
</tr>
<tr>
<td>D-</td>
<td>绿色</td>
<td>差分数据线</td>
<td>Type-A/B</td>
</tr>
<tr>
<td>GND</td>
<td>黑色</td>
<td>地</td>
<td>Type-A/B</td>
</tr>
<tr>
<td>ID</td>
<td>N/A</td>
<td>见如下备注</td>
<td>mini/micro-A/B USB</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备注：</span><br><span class="line">当设备检测到USB_ID信号为低时，表该设备应作为Host（主机，也称A设备）用。</span><br><span class="line">当设备检测到USB_ID信号为高时，表示该设备作为Slave(外设，也称B设备）用。</span><br><span class="line">实际的USB连接线中，是没有USB_ID这根线的。 都是在接口部分直接拉死的的。</span><br><span class="line">对于Host端，只需将连接线的USB_ID pin和地短接即可，</span><br><span class="line">对于Slave端，USB连接线的USB_ID pin是悬空的。（设备内部上拉）。</span><br></pre></td></tr></table></figure>
<p>USB3.x:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>A型连接器引脚B</th>
<th>B型连接器引脚</th>
<th>线缆颜色</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>VBUS</td>
<td>VBUS</td>
<td>红色</td>
<td>供电</td>
</tr>
<tr>
<td>D+</td>
<td>D+</td>
<td>绿色</td>
<td>USB 2.0数据差分线</td>
</tr>
<tr>
<td>D-</td>
<td>D-</td>
<td>白色</td>
<td>USB 2.0数据差分线</td>
</tr>
<tr>
<td>GND</td>
<td>GND</td>
<td>黑色</td>
<td>电源低</td>
</tr>
<tr>
<td>StdA_SSRX-</td>
<td>StdA_SSTX-</td>
<td>蓝色</td>
<td>高速数据差分对</td>
</tr>
<tr>
<td>StdA_SSR+</td>
<td>StdA_SSTX-</td>
<td>黄色</td>
<td>高速数据差分对</td>
</tr>
<tr>
<td>GND_DRAIN</td>
<td>GND_DRAIN</td>
<td>N/A</td>
<td>信号地</td>
</tr>
<tr>
<td>StdA_SSTX-</td>
<td>StdA_SSRX-</td>
<td>紫色</td>
<td>高速数据差分对</td>
</tr>
<tr>
<td>StdA_SSTX-</td>
<td>StdA_SSR+</td>
<td>橙色</td>
<td>高速数据差分对</td>
</tr>
</tbody>
</table>
</div>
<p>TYPE-C：Type-C的所有引脚定义如下图所示：<br><img src="/2021/03/20/Android-USB-Framework-Architecture/Type-C_pin.jpg" alt="Type-C_pin"></p>
<p>其中Type-C USB的插座和插头并不完全一样，相关定义如下图<br><img src="/2021/03/20/Android-USB-Framework-Architecture/Type-C_receptacle_plug.PNG" alt="Type-C_receptacle_plug"></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="传输模式"><a href="#传输模式" class="headerlink" title="传输模式"></a>传输模式</h3><p>USB的4种传输模式如下，这里只是粗略列出来：<br>控制传输：用于usb枚举过程<br>批量传输：用于大容量存储设备<br>等时传输：用于音频，视频设备<br>中断传输：用于鼠标键盘等设备</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h3><p>这里只说明USB的最基础常用的描述符</p>
<ol>
<li><p>标准描述符：是指一组准备设备描述符，他们具有类似的格式</p>
<ul>
<li>设备描述符：设备描述符描述有关USB设备的一般信息。它包括信息全局适用于设备和所有设备的配置。 USB设备只有一个设备描述符。</li>
<li>配置描述符：一个USB设备可以有多种配置，不同的配置使设备工作在不同的状态下。每个配置必须有一个配置描述符， 每个配置都有一个或多个接口，每个接口都有零个或多个端点。</li>
<li>字符串描述符：在USB协议中字符串描述符是可选的。字符串描述符用于保存一些供应商名称、产品序列号等文本信息</li>
<li>接口描述符：接口是端点的集合，负责完成USB的特定功能，例如数据的输入输出。接口描述符用于描述一个接口，包含了接口的特性，如端点个数，所属设备类和子类等。</li>
<li>端点描述符：描述端点的基本属性（地址，大小等）</li>
</ul>
</li>
<li><p>HID描述符：即Human Interface Devices，人机接口设备。这类设备包括鼠标、键盘等，主要用于人与计算机进行交互，传输方式通常采用中断方式。</p>
</li>
</ol>
<p>如下为某设备的基础描述符关系图：<br><img src="/2021/03/20/Android-USB-Framework-Architecture/USB_Descriptor.jpg" alt="USB_Descriptor"></p>
<ul>
<li>该设备有2个配置：配置0和配置1</li>
<li>配置0下面有1个接口：接口0，该接口下有3个端点</li>
<li>配置1下面有2个接口：接口0和接口1</li>
<li>接口0下面有1个端点，接口1下面有2个端点</li>
</ul>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="枚举流程"><a href="#枚举流程" class="headerlink" title="枚举流程"></a>枚举流程</h3><p>枚举就是从设备读取一些信息，知道设备是什么样的设备，使用什么协议，这样Host就可以根据这些信息来加载合适的驱动程序与Device进行通信。<br>枚举流程大致如下，这里只是简单说明一下流程，后面会根据代码进行情景分析。</p>
<ol>
<li>USB设备插入Uost的根hub或者下行端口上的hub端口或者系统启动时设备上电。</li>
<li>Hub端口通过 D+/D- 的电压值来判断是全速/低速设备插入端口。</li>
<li>Host通过Get_Port_Status请求(request)给hub以了解此次状态改变的确切含义。</li>
<li>Hub端口把设备的速度信息反馈给Host。</li>
<li>Host端口通过Set_Port_Feature请求让hub端口同时拉低D+/D-来复位刚插入的USB设备。</li>
<li>如果前面Hub端口通过 D+/D- 判断设备支持全速，Host端口继续检测所连接的USB设备是否支持高速模式。</li>
<li>Host向hub发现Get_Port_Status请求，以查询设备是否复位成功。</li>
<li>Host发送Get_Descriptor获取设备描述符，主要是获取描述符的长度，然后设备再次进行复位操作。</li>
<li>Host分配地址给设备</li>
<li>Host再次发送Get_Descriptor给新的usb设备地址来读取设备描述符，之后Host再通过Get_Descriptor来读取配置描述符，接口描述符，字符描述符。</li>
<li>Host通过获取到的设备信息，整合之后，找到该设备的驱动。</li>
<li>设备驱动选择一个配置。</li>
</ol>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h2 id="Android-USB-Driver"><a href="#Android-USB-Driver" class="headerlink" title="Android USB Driver"></a>Android USB Driver</h2><p>Android USB既可以做host，起控制作用，也可以作为slave，来应答host的控制。<br>Android USB设备，当连接PC时，自身作为Devcie设备，当连接U盘时，自身作为Host设备。<br>下面我们分别从 Host 和 Device 2个方面来分析 Android USB driver。</p>
<h3 id="Android-USB-Host"><a href="#Android-USB-Host" class="headerlink" title="Android USB Host"></a>Android USB Host</h3><p>USB Host整体如下图左侧：<br><img src="/2021/03/20/Android-USB-Framework-Architecture/Android-USB-Framework-Architecture_Host.jpg" alt="Android_USB_Framework_Architecture_Host"></p>
<p>Android USB作为host时，软件架构分为如下3层：</p>
<ul>
<li>USB设备驱动：具体的USB外设设备驱动，针对不同的USB外设，需要加载不同的USB设备驱动，比如说U盘需要加载 mass storage usb设备驱动，鼠标需要加载 mouse usb设备驱动</li>
<li>USB core：Linux usb的核心协议栈，纯软件部分，为USB设备驱动程序提供一个用于访问和控制USB硬件的接口，是USB设备驱动和HCD的桥梁。</li>
<li>HCD：Host controller Driver的缩写，是对主机控制器硬件的一个抽象，USB HCD包含多种USB接口规范：UHCI,OHCI,EHCI。</li>
</ul>
<p>下面我们根据代码流程详细分析Android USB host。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="代码路径"><a href="#代码路径" class="headerlink" title="代码路径"></a>代码路径</h4><div class="table-container">
<table>
<thead>
<tr>
<th>模块</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>core</td>
<td>kernel/msm-4.19/drivers/usb/core/usb.c</td>
</tr>
<tr>
<td>dwc3</td>
<td>kernel/msm-4.19/drivers/usb/dwc3/core.c</td>
</tr>
<tr>
<td>dwc3</td>
<td>kernel/msm-4.19/drivers/usb/dwc3/dwc3-msm.c</td>
</tr>
<tr>
<td>host</td>
<td>ernel/msm-4.19/drivers/usb/host/xhci-plat.c</td>
</tr>
<tr>
<td>ss-phy</td>
<td>kernel/msm-4.19/drivers/usb/phy/phy-msm-ssusb-qmp.c</td>
</tr>
<tr>
<td>hs-phy</td>
<td>kernel/msm-4.19/drivers/usb/phy/phy-msm-snps-hs.c</td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="核心结构体"><a href="#核心结构体" class="headerlink" title="核心结构体"></a>核心结构体</h4><p>在下面代码情景分析中，我们会遇到很多usb相关的结构体，下面列出核心结构体</p>
<ul>
<li>usb_device描述一个USB的device的软件信息，包括usb_device_descriptor</li>
<li>usb_device_descriptor来描述一个USB设备的device信息</li>
<li>urb_host_config描述一个USB设备config的软件信息，包括usb_config_descriptor</li>
<li>usb_config_descriptor来描述一个device的config信息</li>
<li>usb_interface描述一个接口信息</li>
<li>usb_host_interface描述一个interface的设置信息，包括usb_interface_descriptor，我们编写驱动就是针对这一层次的</li>
<li>usb_interface_descriptor来描述一个config的interface信息</li>
<li>usb_host_endpoint描述一个interdace的endpoint信息，包括usb_endpoint_descriptor，这是USB通信的最小单位，我们读写一个设备就是针对一个endpoint</li>
<li>usb_endpoint_descriptor来描述一个interface的endpoint信息</li>
</ul>
<p>它们的关系如图所示：</p>
<p><img src="/2021/03/20/Android-USB-Framework-Architecture/USB_STRUCT.PNG" alt="usb struct"></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="dwc3"><a href="#dwc3" class="headerlink" title="dwc3"></a>dwc3</h4><p>从dwc3的角度分析USB整体流程，查看反编译的dts如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ssusb@a600000 &#123;</span><br><span class="line">	compatible = <span class="string">&quot;qcom,dwc-usb3-msm&quot;</span>;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	dwc3@a600000 &#123;</span><br><span class="line">		compatible = <span class="string">&quot;snps,dwc3&quot;</span>;</span><br><span class="line">		...</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure><br>usb dts compatible匹配，导致如下2个probe执行</p>
<ul>
<li><p>a.compatible = “snps,dwc3”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** drivers/usb/dwc3/core.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dwc3_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dwc3</span>		*<span class="title">dwc</span>;</span></span><br><span class="line">	<span class="comment">//分配内存</span></span><br><span class="line">	dwc = devm_kzalloc(dev, <span class="keyword">sizeof</span>(*dwc), GFP_KERNEL);</span><br><span class="line">	dwc-&gt;dev = dev;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//申请中断</span></span><br><span class="line">	irq = platform_get_irq(to_platform_device(dwc-&gt;dev), <span class="number">0</span>);</span><br><span class="line">	devm_request_irq(dev, irq, dwc3_interrupt, IRQF_SHARED, <span class="string">&quot;dwc3&quot;</span>, dwc);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化队列</span></span><br><span class="line">	INIT_WORK(&amp;dwc-&gt;bh_work, dwc3_bh_work);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取dts中的属性，</span></span><br><span class="line">	dwc3_get_properties(dwc);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配各种buffer的内存</span></span><br><span class="line">	dwc3_alloc_event_buffers(dwc, DWC3_EVENT_BUFFERS_SIZE);</span><br><span class="line">	dwc3_alloc_scratch_buffers(dwc);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	 * dts中dr_mode = otg 或者 peripheral，初始化gadget相关的寄存器</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (dwc-&gt;dr_mode == USB_DR_MODE_OTG ||</span><br><span class="line">		dwc-&gt;dr_mode == USB_DR_MODE_PERIPHERAL) &#123;</span><br><span class="line">		ret = dwc3_gadget_init(dwc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建debugfs节点编译调试</span></span><br><span class="line">	dwc3_debugfs_init(dwc);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：这里主要做的一些基础的动作，如分配内存，申请中断，初始化队列，解析dts，初始化相关寄存器，创建debugfs节点等。</p>
</li>
<li><p>b.compatible = “qcom,dwc-usb3-msm”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** drivers/usb/dwc3/dwc3-msm.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dwc3_msm_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dwc3_msm</span> *<span class="title">mdwc</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dwc3</span>	*<span class="title">dwc</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//分配内存</span></span><br><span class="line">	mdwc = devm_kzalloc(&amp;pdev-&gt;dev, <span class="keyword">sizeof</span>(*mdwc), GFP_KERNEL);</span><br><span class="line">	mdwc-&gt;dev = &amp;pdev-&gt;dev;</span><br><span class="line"></span><br><span class="line">	INIT_LIST_HEAD(&amp;mdwc-&gt;req_complete_list);</span><br><span class="line">	INIT_WORK(&amp;mdwc-&gt;resume_work, dwc3_resume_work);</span><br><span class="line">	INIT_WORK(&amp;mdwc-&gt;restart_usb_work, dwc3_restart_usb_work);</span><br><span class="line">	INIT_WORK(&amp;mdwc-&gt;vbus_draw_work, dwc3_msm_vbus_draw_work);</span><br><span class="line">	INIT_DELAYED_WORK(&amp;mdwc-&gt;sm_work, dwc3_otg_sm_work);</span><br><span class="line">	INIT_DELAYED_WORK(&amp;mdwc-&gt;perf_vote_work, msm_dwc3_perf_vote_work);</span><br><span class="line">	INIT_DELAYED_WORK(&amp;mdwc-&gt;sdp_check, check_for_sdp_connection);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//解析dts并赋值给mdwc</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * static const struct usb_irq usb_irq_info[USB_MAX_IRQ] = &#123;</span></span><br><span class="line"><span class="comment">	 * 		&#123;&quot;hs_phy_irq&quot;, 0&#125;,</span></span><br><span class="line"><span class="comment">	 * 		&#123;&quot;pwr_event_irq&quot;, 0&#125;,</span></span><br><span class="line"><span class="comment">	 * 		&#123;&quot;dp_hs_phy_irq&quot;, 0&#125;,</span></span><br><span class="line"><span class="comment">	 * 		&#123;&quot;dm_hs_phy_irq&quot;, 0&#125;,</span></span><br><span class="line"><span class="comment">	 * 		&#123;&quot;ss_phy_irq&quot;, 0&#125;,</span></span><br><span class="line"><span class="comment">	 * &#125;;</span></span><br><span class="line"><span class="comment">	 * 申请usb_irq_info数组中的中断</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	devm_request_threaded_irq(&amp;pdev-&gt;dev,</span><br><span class="line">			mdwc-&gt;wakeup_irq[i].irq,</span><br><span class="line">			msm_dwc3_pwr_irq,</span><br><span class="line">			msm_dwc3_pwr_irq_thread,</span><br><span class="line">			irq_type,</span><br><span class="line">			mdwc-&gt;wakeup_irq[i].name, mdwc);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//继续解析dts赋值给mdwc</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置notify_event = dwc3_msm_notify_event;</span></span><br><span class="line">	dwc3_set_notifier(&amp;dwc3_msm_notify_event);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//又双叒解析dts赋值给mdwc</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (dwc-&gt;dr_mode) &#123;</span><br><span class="line">	<span class="keyword">case</span> USB_DR_MODE_OTG:</span><br><span class="line">		<span class="keyword">if</span> (of_property_read_bool(node,</span><br><span class="line">					<span class="string">&quot;qcom,default-mode-host&quot;</span>)) &#123;</span><br><span class="line">			dev_dbg(mdwc-&gt;dev, <span class="string">&quot;%s: start host mode\n&quot;</span>,</span><br><span class="line">							__func__);</span><br><span class="line">			mdwc-&gt;id_state = DWC3_ID_GROUND;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (of_property_read_bool(node,</span><br><span class="line">					<span class="string">&quot;qcom,default-mode-none&quot;</span>)) &#123;</span><br><span class="line">			dev_dbg(mdwc-&gt;dev, <span class="string">&quot;%s: stay in none mode\n&quot;</span>,</span><br><span class="line">							__func__);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			dev_dbg(mdwc-&gt;dev, <span class="string">&quot;%s: start peripheral mode\n&quot;</span>,</span><br><span class="line">							__func__);</span><br><span class="line">			mdwc-&gt;vbus_active = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> USB_DR_MODE_HOST:</span><br><span class="line">		mdwc-&gt;id_state = DWC3_ID_GROUND;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> USB_DR_MODE_PERIPHERAL:</span><br><span class="line">		<span class="comment">/* fall through */</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		mdwc-&gt;vbus_active = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 根据状态来设置mdwc-&gt;inputs，每个bit的含义如下</span></span><br><span class="line"><span class="comment">	/* Input bits to state machine (mdwc-&gt;inputs) */</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * #define ID			0</span></span><br><span class="line"><span class="comment">	 * #define B_SESS_VLD		1</span></span><br><span class="line"><span class="comment">	 * #define B_SUSPEND		2</span></span><br><span class="line"><span class="comment">	 * #define WAIT_FOR_LPM		3</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	dwc3_ext_event_notify(mdwc);</span><br><span class="line">		---&gt;根据当前状态设置mdwc-&gt;inputs的ID，B_SESS_VLD和B_SUSPEND bit</span><br><span class="line">		---&gt;queue_delayed_work(mdwc-&gt;sm_usb_wq, &amp;mdwc-&gt;sm_work, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建属性节点</span></span><br><span class="line">	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_mode);</span><br><span class="line">	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_speed);</span><br><span class="line">	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_usb_compliance_mode);</span><br><span class="line">	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_bus_vote);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>总结：</p>
<ol>
<li>一系列初始化动作：分配内存，初始化队列，解析dts，申请中断…</li>
<li>根据当前状态设置mdwc-&gt;inputs bit，一共有4个bit：ID，B_SESS_VLD,B_SUSPEND，WAIT_FOR_LPM</li>
<li>调用队列函数 dwc3_otg_sm_work</li>
<li>创建属性节点</li>
</ol>
<p>接下来是 dwc3_otg_sm_work 函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/dwc3/dwc3-msm.c **/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dwc3_otg_sm_work - workqueue function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @w: Pointer to the dwc3 otg workqueue</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> After any change in drd_state, we must reschdule the state machine.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * dwc3状态机，根据 mdwc-&gt;inputs 和 mdwc-&gt;drd_state来确定当前的状态</span></span><br><span class="line"><span class="comment"> * 这里主要是host状态和device状态，对应函数如下</span></span><br><span class="line"><span class="comment"> * Device ---&gt; dwc3_otg_start_peripheral(mdwc, 1);</span></span><br><span class="line"><span class="comment"> * Host ---&gt; dwc3_otg_start_host(mdwc, 1);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dwc3_otg_sm_work</span><span class="params">(struct work_struct *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dwc3_msm</span> *<span class="title">mdwc</span> = <span class="title">container_of</span>(<span class="title">w</span>, <span class="title">struct</span> <span class="title">dwc3_msm</span>, <span class="title">sm_work</span>.<span class="title">work</span>);</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dwc3</span> *<span class="title">dwc</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Check OTG state */</span></span><br><span class="line">	<span class="keyword">switch</span> (mdwc-&gt;drd_state) &#123;</span><br><span class="line">	<span class="keyword">case</span> DRD_STATE_UNDEFINED:</span><br><span class="line">		...</span><br><span class="line">		mdwc-&gt;drd_state = DRD_STATE_IDLE;</span><br><span class="line">		...</span><br><span class="line">		<span class="comment">/* fall-through */</span></span><br><span class="line">	<span class="keyword">case</span> DRD_STATE_IDLE:</span><br><span class="line">		...</span><br><span class="line">		<span class="comment">//恢复dwc3的工作</span></span><br><span class="line">		queue_delayed_work(mdwc-&gt;dwc3_wq,</span><br><span class="line">				&amp;mdwc-&gt;sdp_check,</span><br><span class="line">		msecs_to_jiffies(SDP_CONNETION_CHECK_TIME));</span><br><span class="line">		---&gt;queue_work(mdwc-&gt;dwc3_wq, &amp;mdwc-&gt;resume_work);</span><br><span class="line">		...</span><br><span class="line">		dwc3_otg_start_peripheral(mdwc, <span class="number">1</span>);</span><br><span class="line">		mdwc-&gt;drd_state = DRD_STATE_PERIPHERAL;</span><br><span class="line">		work = <span class="number">1</span>;</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> DRD_STATE_PERIPHERAL:</span><br><span class="line">		...</span><br><span class="line">		mdwc-&gt;drd_state = DRD_STATE_IDLE;</span><br><span class="line">		dwc3_otg_start_peripheral(mdwc, <span class="number">0</span>);</span><br><span class="line">		work = <span class="number">1</span>;</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> DRD_STATE_PERIPHERAL_SUSPEND:</span><br><span class="line">		...</span><br><span class="line">		mdwc-&gt;drd_state = DRD_STATE_IDLE;</span><br><span class="line">		dwc3_otg_start_peripheral(mdwc, <span class="number">0</span>);</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> DRD_STATE_HOST_IDLE:</span><br><span class="line">	</span><br><span class="line">		mdwc-&gt;drd_state = DRD_STATE_HOST;</span><br><span class="line">		dwc3_otg_start_host(mdwc, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> DRD_STATE_HOST:</span><br><span class="line">			dev_dbg(mdwc-&gt;dev, <span class="string">&quot;id || hc_died\n&quot;</span>);</span><br><span class="line">			dwc3_otg_start_host(mdwc, <span class="number">0</span>);</span><br><span class="line">			mdwc-&gt;drd_state = DRD_STATE_IDLE;</span><br><span class="line">			work = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		dev_err(mdwc-&gt;dev, <span class="string">&quot;%s: invalid otg-state\n&quot;</span>, __func__);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (work)</span><br><span class="line">		schedule_delayed_work(&amp;mdwc-&gt;sm_work, delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：dw3状态机，当mdwc-&gt;drd_state 发生改变，调用此队列，主要作用是根据 mdwc-&gt;drd_state 和 mdwc-&gt;inputs 来确认状态并调用对应的动作，这里最主要是根据host还是devices分别调用如下函数</p>
<ul>
<li>Host —-&gt; dwc3_otg_start_host</li>
<li>Device —-&gt; dwc3_otg_start_peripheral</li>
</ul>
<p>这里只介绍作为Host来分析代码，作Device的流程后面专门会分析<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/dwc3/dwc3-msm.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dwc3_otg_start_host</span><span class="params">(struct dwc3_msm *mdwc, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">dwc3</span> *<span class="title">dwc</span> = <span class="title">platform_get_drvdata</span>(<span class="title">mdwc</span>-&gt;<span class="title">dwc3</span>);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (on) &#123;</span><br><span class="line">		dev_dbg(mdwc-&gt;dev, <span class="string">&quot;%s: turn on host\n&quot;</span>, __func__);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * CONFIG_USB_MSM_SSPHY_QMP=y</span></span><br><span class="line"><span class="comment">		 * ---&gt;Enable this to support the SuperSpeed USB transceiver on MSM chips.</span></span><br><span class="line"><span class="comment">		 * CONFIG_MSM_HSUSB_PHY=y</span></span><br><span class="line"><span class="comment">		 * ---&gt;Enable this to support the HSUSB PHY on MSM chips.</span></span><br><span class="line"><span class="comment">		 * 调用SuperSpeed PHY和 high-speed PHY对应的驱动来修改连接状态</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		usb_phy_notify_connect(mdwc-&gt;ss_phy, USB_SPEED_SUPER);</span><br><span class="line">		usb_phy_notify_connect(mdwc-&gt;hs_phy, USB_SPEED_HIGH);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//注册host_nb通知事件链</span></span><br><span class="line">		mdwc-&gt;host_nb.notifier_call = dwc3_msm_host_notifier;</span><br><span class="line">		usb_register_notify(&amp;mdwc-&gt;host_nb);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//注册usbdev_nb通知事件链</span></span><br><span class="line">		mdwc-&gt;usbdev_nb.notifier_call = msm_dwc3_usbdev_notify;</span><br><span class="line">		usb_register_atomic_notify(&amp;mdwc-&gt;usbdev_nb);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment">        从 xhci-plat的角度，Path如下:</span></span><br><span class="line"><span class="comment">        kernel/msm-4.9/drivers/usb/host/xhci-plat.c</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        Source:</span></span><br><span class="line"><span class="comment">        static struct platform_driver usb_xhci_driver = &#123;</span></span><br><span class="line"><span class="comment">            .probe	= xhci_plat_probe,</span></span><br><span class="line"><span class="comment">            .remove	= xhci_plat_remove,</span></span><br><span class="line"><span class="comment">            .driver	= &#123;</span></span><br><span class="line"><span class="comment">                .name = &quot;xhci-hcd&quot;,</span></span><br><span class="line"><span class="comment">                .pm = DEV_PM_OPS,</span></span><br><span class="line"><span class="comment">                .of_match_table = of_match_ptr(usb_xhci_of_match),</span></span><br><span class="line"><span class="comment">                .acpi_match_table = ACPI_PTR(usb_xhci_acpi_match),</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        static int __init xhci_plat_init(void)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            xhci_init_driver(&amp;xhci_plat_hc_driver, &amp;xhci_plat_overrides);</span></span><br><span class="line"><span class="comment">            return platform_driver_register(&amp;usb_xhci_driver);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">		************************************************/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 这里调用platform device add 和上面的drvier 的name匹配，导致调用 xhci_plat_probe 函数</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		dwc3_host_init(dwc);</span><br><span class="line">		---&gt;platform_device_alloc(<span class="string">&quot;xhci-hcd&quot;</span>, PLATFORM_DEVID_AUTO);</span><br><span class="line">		---&gt;platform_device_add(xhci);</span><br><span class="line">	</span><br><span class="line">		mdwc-&gt;in_host_mode = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		msm_dwc3_perf_vote_update(mdwc, <span class="literal">true</span>);</span><br><span class="line">		schedule_delayed_work(&amp;mdwc-&gt;perf_vote_work,</span><br><span class="line">				msecs_to_jiffies(<span class="number">1000</span> * PM_QOS_SAMPLE_SEC));</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//stop the host controller driver.</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：</p>
<ol>
<li>通过 platform_device_add 来注册 “xhci-hcd” 设备。</li>
<li>在xhci-plat.c中有注册 “xhci-hcd” 驱动，这样导致对应的 xhci_plat_probe被调用。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xhci_plat_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">hc_driver</span>	*<span class="title">driver</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">xhci_hcd</span>		*<span class="title">xhci</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_hcd</span>		*<span class="title">hcd</span>;</span></span><br><span class="line"></span><br><span class="line">	driver = &amp;xhci_plat_hc_driver;</span><br><span class="line"></span><br><span class="line">	irq = platform_get_irq(pdev, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	hcd = __usb_create_hcd(driver, sysdev, &amp;pdev-&gt;dev,</span><br><span class="line">			       dev_name(&amp;pdev-&gt;dev), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* convert between an HCD pointer and the corresponding EHCI_HCD */</span></span><br><span class="line">	hcd_to_xhci(hcd);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 获取并调用相关phy的初始化函数 */</span></span><br><span class="line">	hcd-&gt;usb_phy = devm_usb_get_phy_by_phandle(phydev, <span class="string">&quot;usb-phy&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	usb_phy_init(hcd-&gt;usb_phy);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 对HCD进行初始化和注册 */</span></span><br><span class="line">	usb_add_hcd(hcd, irq, IRQF_SHARED);</span><br><span class="line">		<span class="comment">/* 注册 a root hub */</span></span><br><span class="line">	---&gt; register_root_hub(hcd)</span><br><span class="line">			<span class="comment">/* 执行usb core 内部的初始化设置，构建新usb devices */</span></span><br><span class="line">		---&gt; usb_new_device (usb_dev)</span><br><span class="line">			---&gt; usb_enumerate_device(udev)</span><br><span class="line">				<span class="comment">/* </span></span><br><span class="line"><span class="comment">				 * 在hub.c中有注册 &quot;hub&quot; driver:usb_register(&amp;hub_driver)</span></span><br><span class="line"><span class="comment">				 * 2者匹配导致 hub_probe 被调用 </span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">			---&gt; device_add(&amp;udev-&gt;dev);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 创建device attr file */</span></span><br><span class="line">	device_create_file(&amp;pdev-&gt;dev, &amp;dev_attr_config_imod);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：这里核心函数为 usb_add_hcd，主要是对HCD进行初始化和注册，最终会把 “hub” 通过device_add添加到设备队列中。而另外在 usb/core/hub.c 中，有通过usb_register(&amp;hub_driver)来注册 “hub” 驱动，从而导致 hub_probe 被调用。</p>
<p>这里简单时序图如下:<br><img src="/2021/03/20/Android-USB-Framework-Architecture/USB_HUB_Timing_Diagram.JPG" alt="USB root  hub flow"></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="usb-core"><a href="#usb-core" class="headerlink" title="usb core"></a>usb core</h4><p>在介绍 hub_probe 之前，我们从usb core的角度从上到下分析一下代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/core/usb.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">usb_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	usb_init_pool_max();<span class="comment">//初始化pool_max数组</span></span><br><span class="line"></span><br><span class="line">	usb_debugfs_init();<span class="comment">//初始化usb debugfs</span></span><br><span class="line"></span><br><span class="line">	usb_acpi_register();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册usb 总线，生成/sys/bus/usb文件目录</span></span><br><span class="line">	<span class="comment">//当我们注册一个总线的时候，他会初始化两个链表，一个用来链接总线上所有的device，一个用来链接总线上所有的driver</span></span><br><span class="line">	bus_register(&amp;usb_bus_type);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化通知链，回调函数为usb_bus_nb</span></span><br><span class="line">	bus_register_notifier(&amp;usb_bus_type, &amp;usb_bus_nb);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册 usb 字符设备，主设备号180</span></span><br><span class="line">	usb_major_init();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册usbfs驱动,添加到上面的usb总线上</span></span><br><span class="line">	usb_register(&amp;usbfs_driver);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册 usb 字符设备，主设备号189</span></span><br><span class="line">	usb_devio_init();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册usb hub驱动，重点分析该函数</span></span><br><span class="line">	usb_hub_init();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//注册usb_generic_driver驱动</span></span><br><span class="line">	usb_register_device_driver(&amp;usb_generic_driver, THIS_MODULE);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usb总线结构体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bus_type</span> <span class="title">usb_bus_type</span> = &#123;</span></span><br><span class="line">	.name =		<span class="string">&quot;usb&quot;</span>,</span><br><span class="line">	.match =	usb_device_match,</span><br><span class="line">	.uevent =	usb_uevent,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">usb通知链回调函数结构体</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> <span class="title">usb_bus_nb</span> = &#123;</span></span><br><span class="line">	.notifier_call = usb_bus_notify,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">注册字符设备，主设备号为<span class="number">180</span>对应的结构体</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">usb_fops</span> = &#123;</span></span><br><span class="line">	.owner =	THIS_MODULE,</span><br><span class="line">	.open =		usb_open,</span><br><span class="line">	.llseek =	noop_llseek,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">usbfs 驱动相关结构体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_driver</span> <span class="title">usbfs_driver</span> = &#123;</span></span><br><span class="line">	.name =		<span class="string">&quot;usbfs&quot;</span>,</span><br><span class="line">	.probe =	driver_probe,</span><br><span class="line">	.disconnect =	driver_disconnect,</span><br><span class="line">	.suspend =	driver_suspend,</span><br><span class="line">	.resume =	driver_resume,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">注册字符设备，主设备号为<span class="number">189</span>对应的结构体</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">usbdev_file_operations</span> = &#123;</span></span><br><span class="line">	.owner =	  THIS_MODULE,</span><br><span class="line">	.llseek =	  usbdev_lseek,</span><br><span class="line">	.read =		  usbdev_read,</span><br><span class="line">	.poll =		  usbdev_poll,</span><br><span class="line">	.unlocked_ioctl = usbdev_ioctl,</span><br><span class="line">#ifdef CONFIG_COMPAT</span><br><span class="line">	.compat_ioctl =   usbdev_compat_ioctl,</span><br><span class="line">#endif</span><br><span class="line">	.open =		  usbdev_open,</span><br><span class="line">	.release =	  usbdev_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">usb_generic_driver结构体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_device_driver</span> <span class="title">usb_generic_driver</span> = &#123;</span></span><br><span class="line">	.name =	<span class="string">&quot;usb&quot;</span>,</span><br><span class="line">	.probe = generic_probe,</span><br><span class="line">	.disconnect = generic_disconnect,</span><br><span class="line">#ifdef	CONFIG_PM</span><br><span class="line">	.suspend = generic_suspend,</span><br><span class="line">	.resume = generic_resume,</span><br><span class="line">#endif</span><br><span class="line">	.supports_autosuspend = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在usb_init函数中调用 usb_hub_init 函数，我们重点分析 usb_hub_init 该函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">usb hub 驱动相关结构体</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_driver</span> <span class="title">hub_driver</span> = &#123;</span></span><br><span class="line">	.name =		<span class="string">&quot;hub&quot;</span>,</span><br><span class="line">	.probe =	hub_probe,</span><br><span class="line">	.disconnect =	hub_disconnect,</span><br><span class="line">	.suspend =	hub_suspend,</span><br><span class="line">	.resume =	hub_resume,</span><br><span class="line">	.reset_resume =	hub_reset_resume,</span><br><span class="line">	.pre_reset =	hub_pre_reset,</span><br><span class="line">	.post_reset =	hub_post_reset,</span><br><span class="line">	.unlocked_ioctl = hub_ioctl,</span><br><span class="line">	.id_table =	hub_id_table,</span><br><span class="line">	.supports_autosuspend =	<span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_hub_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//注册hub_driver usb驱动</span></span><br><span class="line">	usb_register(&amp;hub_driver) </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//不使用系统workqueue，创建 hub_wq workqueue</span></span><br><span class="line">	hub_wq = alloc_workqueue(<span class="string">&quot;usb_hub_wq&quot;</span>, WQ_FREEZABLE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结:</p>
<ol>
<li>注册hub_driver usb驱动</li>
<li>新建 usb_hub_wq workqueue</li>
</ol>
<p>在usb2.0 spec上,规定了hub的设备class和接口class都为0x9.也就是代码中定义的USB_CLASS_HUB.<br>因为root hub内置在usb控制器中,所以当开机设备检测到root hub会根据idVendor找到hub_id_table，从而添加device.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_id</span> <span class="title">hub_id_table</span>[] = &#123;</span></span><br><span class="line">    &#123; .match_flags = USB_DEVICE_ID_MATCH_VENDOR</span><br><span class="line">			| USB_DEVICE_ID_MATCH_INT_CLASS,</span><br><span class="line">      .idVendor = USB_VENDOR_GENESYS_LOGIC,</span><br><span class="line">      .bInterfaceClass = USB_CLASS_HUB,</span><br><span class="line">      .driver_info = HUB_QUIRK_CHECK_PORT_AUTOSUSPEND&#125;,</span><br><span class="line">    &#123; .match_flags = USB_DEVICE_ID_MATCH_DEV_CLASS,</span><br><span class="line">      .bDeviceClass = USB_CLASS_HUB&#125;,</span><br><span class="line">    &#123; .match_flags = USB_DEVICE_ID_MATCH_INT_CLASS,</span><br><span class="line">      .bInterfaceClass = USB_CLASS_HUB&#125;,</span><br><span class="line">    &#123; &#125;						<span class="comment">/* Terminating entry */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>从 usb core 的角度，注册hub_driver usb驱动</li>
<li>从 dw3 的角度，添加了hub device设备。</li>
</ul>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="root-hub"><a href="#root-hub" class="headerlink" title="root hub"></a>root hub</h4><p>首先说明一下整个root hub的前置流程：</p>
<p>1.在usb core子系统初始化的时候会注册一个hub的驱动（hub_driver）和一个USB设备驱动（usb_generic_driver），</p>
<p>2.当root hub作为device注册到总线后首先会匹配到usb_generic_driver驱动，这时会调用usb_generic_driver中的probe函数，也就是generic_probe()函数，</p>
<p>3.在generic_probe()函数中会配置root hub，然后再分配USB接口设备，将USB接口设备注册到总线，此时才会匹配到hub_driver驱动，</p>
<p>4.然后调用hub_driver中的probe函数，也就是hub_probe()函数，在hub_probe()函数中会为hub的这个接口下的中断端点设置urb，并且会设置一个回调函数hub_irq()。</p>
<p>首先分析 hub_probe 函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hub_probe</span><span class="params">(struct usb_interface *intf, <span class="keyword">const</span> struct usb_device_id *id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化led指示灯work</span></span><br><span class="line">	INIT_DELAYED_WORK(&amp;hub-&gt;leds, led_work);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	INIT_DELAYED_WORK(&amp;hub-&gt;init_work, <span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化hub-&gt;events</span></span><br><span class="line">	INIT_WORK(&amp;hub-&gt;events, hub_event);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//配置hub</span></span><br><span class="line">	hub_configure(hub, endpoint)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>接下来是hub_configure函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hub_configure</span><span class="params">(struct usb_hub *hub,</span></span></span><br><span class="line"><span class="function"><span class="params">	struct usb_endpoint_descriptor *endpoint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//取得hub描述符</span></span><br><span class="line">	get_hub_descriptor(hdev, hub-&gt;descriptor);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取描述hub特性的信息</span></span><br><span class="line">	wHubCharacteristics = le16_to_cpu(hub-&gt;descriptor-&gt;wHubCharacteristics);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* FIXME for USB 3.0, skip for now */</span></span><br><span class="line">	<span class="comment">//是否是一个复合设备</span></span><br><span class="line">	<span class="keyword">if</span> ((wHubCharacteristics &amp; HUB_CHAR_COMPOUND) &amp;&amp;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//电源开关模式</span></span><br><span class="line">	<span class="keyword">switch</span> (wHubCharacteristics &amp; HUB_CHAR_LPSM) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">//过电流保护模式</span></span><br><span class="line">	<span class="keyword">switch</span> (wHubCharacteristics &amp; HUB_CHAR_OCPM) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	INIT_LIST_HEAD(&amp;hub-&gt;tt.clear_list);</span><br><span class="line">	INIT_WORK(&amp;hub-&gt;tt.clear_work, hub_tt_work);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//根据设备描述符中bDeviceProtocol字段信息设置hub-&gt;tt</span></span><br><span class="line">	<span class="keyword">switch</span> (hdev-&gt;descriptor.bDeviceProtocol) &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Note 8 FS bit times == (8 bits / 12000000 bps) ~= 666ns */</span></span><br><span class="line">	<span class="comment">//设置usb-&gt;tt.think_time</span></span><br><span class="line">	<span class="keyword">switch</span> (wHubCharacteristics &amp; HUB_CHAR_TTTT) &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断是否支持指示</span></span><br><span class="line">	<span class="keyword">if</span> (wHubCharacteristics &amp; HUB_CHAR_PORTIND) &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获得hub的状态</span></span><br><span class="line">	usb_get_status(hdev, USB_RECIP_DEVICE, <span class="number">0</span>, &amp;hubstatus);</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//对hub的电源管理</span></span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	hub_hub_status(hub, &amp;hubstatus, &amp;hubchange);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//分配一个urb</span></span><br><span class="line">	hub-&gt;urb = usb_alloc_urb(<span class="number">0</span>, GFP_KERNEL);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//利用usb_fill_int_urb来初始化这个urb结构，包括hub的中断服务程序hub_irq的，查询的周期等</span></span><br><span class="line">	usb_fill_int_urb(hub-&gt;urb, hdev, pipe, *hub-&gt;buffer, maxp, hub_irq,</span><br><span class="line">		hub, endpoint-&gt;bInterval);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//激活hub</span></span><br><span class="line">	hub_activate(hub, HUB_INIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：<br>1.获取hub相关信息及状态<br>2.利用函数usb_alloc_urb函数来分配一个urb<br>3.利用usb_fill_int_urb来初始化这个urb结构，包括hub的中断服务程序hub_irq的，查询的周期，每当有设备连接到USB接口时，USB总线在查询hub状态信息的时候会触发hub的中断服务程 hub_irq</p>
<p>我们接下分析该函数 hub_irq<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hub_irq</span><span class="params">(struct urb *urb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> status = urb-&gt;status;</span><br><span class="line">	<span class="keyword">switch</span> (status) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* let hub_wq handle things */</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:			<span class="comment">// 端口的状态发生了变化</span></span><br><span class="line">		bits = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; urb-&gt;actual_length; ++i)</span><br><span class="line">			bits |= ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) ((*hub-&gt;buffer)[i]))</span><br><span class="line">					&lt;&lt; (i*<span class="number">8</span>);</span><br><span class="line">		hub-&gt;event_bits[<span class="number">0</span>] = bits;<span class="comment">//保存状态改变的信息</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	hub-&gt;nerrors = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Something happened, let hub_wq figure it out */</span></span><br><span class="line">	<span class="comment">//唤醒hub工作队列</span></span><br><span class="line">	kick_hub_wq(hub);</span><br><span class="line">	----&gt;queue_work(hub_wq, &amp;hub-&gt;events)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面开始分析hub_wq工作队列&amp;hub-&gt;events对应的函数hub_event<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hub_event</span><span class="params">(struct work_struct *work)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* deal with port status changes */</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= hdev-&gt;maxchild; i++) &#123;</span><br><span class="line">	</span><br><span class="line">			port_event(hub, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* deal with hub status changes */</span></span><br><span class="line">	<span class="comment">//处理一些hub的状态改变，如power变化或者过流.</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：<br>hub_irq主要调用关系如下，主要核心函数为port_event<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hub_irq</span><br><span class="line">----&gt;kick_hub_wq(hub)</span><br><span class="line">	----&gt;queue_work(hub_wq, &amp;hub-&gt;events)</span><br><span class="line">		----&gt;hub_event</span><br><span class="line">			----&gt;port_event(hub, i)</span><br></pre></td></tr></table></figure></p>
<p>接下来分析port_event函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">port_event</span><span class="params">(struct usb_hub *hub, <span class="keyword">int</span> port1)</span></span></span><br><span class="line"><span class="function">		__<span class="title">must_hold</span><span class="params">(&amp;port_dev-&gt;status_lock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//获取hub状态变化</span></span><br><span class="line">	hub_port_status(hub, port1, &amp;portstatus, &amp;portchange)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对相应的状态进行简单处理</span></span><br><span class="line">	<span class="keyword">if</span> (portchange &amp; USB_PORT_STAT_C_CONNECTION) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (portchange &amp; USB_PORT_STAT_C_ENABLE) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (portchange &amp; USB_PORT_STAT_C_OVERCURRENT) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (portchange &amp; USB_PORT_STAT_C_RESET) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((portchange &amp; USB_PORT_STAT_C_BH_RESET)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (portchange &amp; USB_PORT_STAT_C_LINK_STATE) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (portchange &amp; USB_PORT_STAT_C_CONFIG_ERROR) &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (connect_change)</span><br><span class="line">		hub_port_connect_change(hub, port1, portstatus, portchange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> hub_port_connect_change(struct usb_hub *hub, <span class="keyword">int</span> port1,</span><br><span class="line">					u16 portstatus, u16 portchange)</span><br><span class="line">		__must_hold(&amp;port_dev-&gt;status_lock)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	hub_port_connect(hub, port1, portstatus, portchange);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> hub_port_connect(struct usb_hub *hub, <span class="keyword">int</span> port1, u16 portstatus,</span><br><span class="line">		u16 portchange)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//为探测到的usb设备（包括普通hub，u盘等）分配并初始化udev</span></span><br><span class="line">	usb_alloc_dev(hdev, hdev-&gt;bus, port1);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对这个usb_dev结构进行一系的初始化,在这个函数中会处理:Get_Description,Set_address.等操作</span></span><br><span class="line">	hub_port_init(hub, udev, port1, i);</span><br><span class="line">	----&gt;hub_set_address<span class="comment">//把地址告诉usb设备</span></span><br><span class="line">	----&gt;usb_get_device_descriptor<span class="comment">//获取usb设备描述符</span></span><br><span class="line">	----&gt;usb_get_device_descriptor<span class="comment">//再获取一次usb设备描述符</span></span><br><span class="line">	</span><br><span class="line">	usb_new_device(udev);</span><br><span class="line">	---&gt;usb_enumerate_device(udev);<span class="comment">//读取所有的描述符并解析</span></span><br><span class="line">	---&gt;announce_device(udev);<span class="comment">/* Tell the world! */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * announce_device dmesg对应的相关日志如下:</span></span><br><span class="line"><span class="comment">	 * [  313.706377] usb 2-1: udev 2, busnum 2, minor = 129</span></span><br><span class="line"><span class="comment">	 * [  313.706391] usb 2-1: New USB device found, idVendor=0951, idProduct=1666, bcdDevice= 0.01</span></span><br><span class="line"><span class="comment">	 * [  313.706399] usb 2-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span></span><br><span class="line"><span class="comment">	 * [  313.706407] usb 2-1: Product: DataTraveler 3.0</span></span><br><span class="line"><span class="comment">	 * [  313.706415] usb 2-1: Manufacturer: Kingston</span></span><br><span class="line"><span class="comment">	 * [  313.706431] usb 2-1: SerialNumber: 60A44C42539CF310971C3C75</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//把设备放入总线的dev链表，从总线的driver链表中取出driver一一比较,usb_interface和usb_driver的id_table比较,如果匹配上了，则调用对应driver的probe函数。</span></span><br><span class="line">	----&gt; device_add(&amp;udev-&gt;dev)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：<br>1.获取hub状态变化，对相应的状态进行简单处理<br>2.为探测到的usb设备（包括普通hub，u盘等）分配并初始化udev<br>3.对这个usb_dev结构进行一系的初始化,在这个函数中会处理:Get_Description,Set_address.等操作<br>4.读取并解析设备描述符，并且把设备放到总结的dev链表上<br>5.将usb设备注册到系统里，这个动作将触发驱动的匹配，由于这是个usb设备，所以万能usb驱动 usb_generic_driver 会匹配上，从而generic_probe会得到执行.关于usb_generic_driver的probe函数稍后分析。</p>
<p>先来看一下usb_device_match函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb_device_match</span><span class="params">(struct device *dev, struct device_driver *drv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* devices and interfaces are handled separately */</span></span><br><span class="line">	<span class="keyword">if</span> (is_usb_device(dev)) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* interface drivers never match devices */</span></span><br><span class="line">		<span class="keyword">if</span> (!is_usb_device_driver(drv))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* <span class="doctag">TODO:</span> Add real matching code */</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_usb_interface(dev)) &#123;</span><br><span class="line">		struct usb_interface *intf;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">usb_driver</span> *<span class="title">usb_drv</span>;</span></span><br><span class="line">		<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_id</span> *<span class="title">id</span>;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* device drivers never match interfaces */</span></span><br><span class="line">		<span class="keyword">if</span> (is_usb_device_driver(drv))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		intf = to_usb_interface(dev);</span><br><span class="line">		usb_drv = to_usb_driver(drv);</span><br><span class="line"></span><br><span class="line">		id = usb_match_id(intf, usb_drv-&gt;id_table);</span><br><span class="line">		<span class="keyword">if</span> (id)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		id = usb_match_dynamic_id(intf, usb_drv);</span><br><span class="line">		<span class="keyword">if</span> (id)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：<br>该函数的流程一条给USB设备走，一条给USB接口走。<br>1.当设备插入，枚举完成后，调用该匹配函数走设备分支，匹配usb万能驱动usb_generic_driver,在其中选择，设置配置，构造一个新的interface设备。<br>2.添加interface设备到总线，调用该匹配函数，走interface分支，在其中根据枚举中获取的信息构造的usb_device_id结构体的内容与interface驱动中的.id_table匹配，成功后调用具体的interface驱动的probe函数.</p>
<p>root hub驱动总结：<br>a.主要函数调用关系：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hub_probe</span><br><span class="line">----&gt;hub_configure</span><br><span class="line">	----&gt;hub_irq</span><br><span class="line">		----&gt;hub_event</span><br><span class="line">			----&gt;port_event</span><br><span class="line">				----&gt;hub_port_connect_change</span><br><span class="line">					----&gt;hub_port_connect</span><br></pre></td></tr></table></figure>
<p>b.root hub初始化流程：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>在usb子系统初始化的时候会注册一个hub的驱动（hub_driver）和一个USB设备驱动（usb_generic_driver），</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>当root hub的作为device注册到总线后首先会匹配到usb_generic_driver驱动，这时会调用usb_generic_driver中的probe函数，也就是 generic_probe()函数，</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在generic_probe()函数中会配置root hub，然后再分配USB接口设备，将USB接口设备注册到总线，此时才会匹配到hub_driver驱动，</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>然后调用hub_driver中的probe函数，也就是hub_probe()函数，在hub_probe()函数中会为hub的这个接口下的中断端点设置urb，并且会设置一个回调函数hub_irq()。</span><br></pre></td></tr></table></figure></p>
<p>c.普通usb插入流程<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">当有usb设备插入时，主机控制器检测到hub端口状态的变化，会执行hub_irq函数，然后按照上面的函数调用顺序一路往下执行，实现usb设备的识别过程：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>给新设备分配地址并将该地址告诉usb设备即设置usb地址</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>.获取设备描述符</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>读取所有的描述符并解析,向总线上添加usb设备,调用usb_bus_type.mach()，走 device 分支,万能usb驱动 usb_generic_driver 会匹配上,然后调用 generic_probe 函数</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>generic_probe中选择并设置配置，并利用描述符初始化一个新的interface设备，最后device_add添加接口设备，调用usb_bus_type.mach()，走interface分支，这个时候应该就根据id_table和自己写的设备驱动进行匹配操作了），然后调用对应的usb接口驱动的probe函数</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="usb-generic-driver"><a href="#usb-generic-driver" class="headerlink" title="usb generic driver"></a>usb generic driver</h4><p>当开机时检测到root hub或者后面插入usb设备时，检测到usb设备后，首先调用 usb_device_match 走device分支，导致generic_probe被调用。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">generic_probe</span><span class="params">(struct usb_device *udev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Choose and set the configuration.  This registers the interfaces</span></span><br><span class="line"><span class="comment">	 * with the driver core and lets interface drivers bind to them.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">/* 选择配置 */</span></span><br><span class="line">	usb_choose_configuration(udev);</span><br><span class="line">	<span class="comment">/* 核心函数，设置配置 */</span></span><br><span class="line">	usb_set_configuration(udev, c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USB device state == configured ... usable */</span></span><br><span class="line">    usb_notify_add_device(udev);</span><br><span class="line">    	<span class="comment">//调用如下事件通知链来通知相关驱动，回调函数为 dwc3_msm_host_notifier.</span></span><br><span class="line">    ---&gt;blocking_notifier_call_chain(&amp;usb_notifier_list, USB_DEVICE_ADD, udev);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_set_configuration</span><span class="params">(struct usb_device *dev, <span class="keyword">int</span> configuration)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_host_config</span> *<span class="title">cp</span> = <span class="title">NULL</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_interface</span> **<span class="title">new_interfaces</span> = <span class="title">NULL</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_hcd</span> *<span class="title">hcd</span> = <span class="title">bus_to_hcd</span>(<span class="title">dev</span>-&gt;<span class="title">bus</span>);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 申请指针数组的内存 */</span></span><br><span class="line">	new_interfaces = kmalloc_array(nintf, <span class="keyword">sizeof</span>(*new_interfaces),</span><br><span class="line">							GFP_NOIO);</span><br><span class="line">	<span class="comment">/* 申请每一项new_interfaces[n]的内存 */</span></span><br><span class="line">	new_interfaces[n] = kzalloc(<span class="keyword">sizeof</span>(struct usb_interface), </span><br><span class="line">							GFP_NOIO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Wake up the device so we can send it the Set-Config request */</span></span><br><span class="line">	ret = usb_autoresume_device(dev);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* if it&#x27;s already configured, clear out old state first.</span></span><br><span class="line"><span class="comment">	 * getting rid of old interfaces means unbinding their drivers.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (dev-&gt;state != USB_STATE_ADDRESS)</span><br><span class="line">		usb_disable_device(dev, <span class="number">1</span>);	<span class="comment">/* Skip ep0 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Make sure we have bandwidth (and available HCD resources) for this configuration. */</span></span><br><span class="line">	ret = usb_hcd_alloc_bandwidth(dev, cp, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Initialize the new interface structures and the</span></span><br><span class="line"><span class="comment">	 * hc/hcd/usbcore interface/endpoint state.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nintf; ++i) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">usb_interface_cache</span> *<span class="title">intfc</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">usb_interface</span> *<span class="title">intf</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">usb_host_interface</span> *<span class="title">alt</span>;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* 获得这个接口为0号设置,接口的默认设置总是0号设置 */</span></span><br><span class="line">		alt = usb_altnum_to_altsetting(intf, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Enable all the endpoints for an interface */</span></span><br><span class="line">		usb_enable_interface(dev, intf, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * usb_bus_type 结构体变量如下，后续会通过device_add添加intface导致</span></span><br><span class="line"><span class="comment">		 * match函数调用，继而走interface这条路.</span></span><br><span class="line"><span class="comment">		 * struct bus_type usb_bus_type = &#123;</span></span><br><span class="line"><span class="comment">		 * .name =		&quot;usb&quot;,</span></span><br><span class="line"><span class="comment">		 * .match =	usb_device_match,</span></span><br><span class="line"><span class="comment">		 * .uevent =	usb_uevent,</span></span><br><span class="line"><span class="comment">		 * .need_parent_lock =	true,</span></span><br><span class="line"><span class="comment">		 * &#125;;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		intf-&gt;dev.driver = <span class="literal">NULL</span>;</span><br><span class="line">		intf-&gt;dev.bus = &amp;usb_bus_type;</span><br><span class="line">		intf-&gt;dev.type = &amp;usb_if_device_type;</span><br><span class="line">		intf-&gt;dev.groups = usb_interface_groups;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * Please refer to usb_alloc_dev() to see why we set</span></span><br><span class="line"><span class="comment">		 * dma_mask and dma_pfn_offset.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">/* init device structure. */</span></span><br><span class="line">		device_initialize(&amp;intf-&gt;dev);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* increments the reference count of the usb device structure */</span></span><br><span class="line">		usb_get_dev(dev);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 发送配置请求 */</span></span><br><span class="line">	usb_control_msg(dev, usb_sndctrlpipe(dev, <span class="number">0</span>),</span><br><span class="line">			      USB_REQ_SET_CONFIGURATION, <span class="number">0</span>, configuration, <span class="number">0</span>,</span><br><span class="line">			      <span class="literal">NULL</span>, <span class="number">0</span>, USB_CTRL_SET_TIMEOUT);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 设置设备的状态为configured */</span></span><br><span class="line">	usb_set_device_state(dev, USB_STATE_CONFIGURED);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Now that all the interfaces are set up, register them</span></span><br><span class="line"><span class="comment">	 * to trigger binding of drivers to interfaces.  probe()</span></span><br><span class="line"><span class="comment">	 * routines may install different altsettings and may</span></span><br><span class="line"><span class="comment">	 * claim() any interfaces not yet bound.  Many class drivers</span></span><br><span class="line"><span class="comment">	 * need that: CDC, audio, video, etc.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  * 将接口所对应的设备添加到系统，此动作将引发接口设备和接口驱动匹配，</span></span><br><span class="line"><span class="comment">	  * 从而引发接口设备驱动对应的probe函数</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nintf; ++i) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">usb_interface</span> *<span class="title">intf</span> = <span class="title">cp</span>-&gt;<span class="title">interface</span>[<span class="title">i</span>];</span></span><br><span class="line">		<span class="comment">/* interface匹配，导致usb_device_match再次被调用，走interface这一路 */</span></span><br><span class="line">		ret = device_add(&amp;intf-&gt;dev);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Interface driver 和device匹配，从而usb_device_match再次被调用，走interface这一路<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb_device_match</span><span class="params">(struct device *dev, struct device_driver *drv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* devices and interfaces are handled separately */</span></span><br><span class="line">	<span class="keyword">if</span> (is_usb_device(dev)) &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_usb_interface(dev)) &#123;</span><br><span class="line">		struct usb_interface *intf;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">usb_driver</span> *<span class="title">usb_drv</span>;</span></span><br><span class="line">		<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_id</span> *<span class="title">id</span>;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* device drivers never match interfaces */</span></span><br><span class="line">		<span class="keyword">if</span> (is_usb_device_driver(drv))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="comment">/* 首先找到对应的usb_interface 和 usb_driver结构体 */</span></span><br><span class="line">		intf = to_usb_interface(dev);</span><br><span class="line">		usb_drv = to_usb_driver(drv);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* find first usb_device_id matching device or interface */</span></span><br><span class="line">        <span class="comment">/* 这里是查找在usb驱动通过 MODULE_DEVICE_TABLE 来注册的 usb_device_id*/</span></span><br><span class="line">		id = usb_match_id(intf, usb_drv-&gt;id_table);</span><br><span class="line">		---&gt;usb_match_one_id(interface, id)<span class="comment">/* 匹配核心函数 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* 如果在 usb_device_id 中没有找到，则在动态id链表dynids里查找*/</span></span><br><span class="line">		id = usb_match_dynamic_id(intf, usb_drv);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_match_one_id</span><span class="params">(struct usb_interface *interface,</span></span></span><br><span class="line"><span class="function"><span class="params">		     <span class="keyword">const</span> struct usb_device_id *id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_host_interface</span> *<span class="title">intf</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_device</span> *<span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 获取对应的usb_host_interface和usb_device结构体 */</span></span><br><span class="line">	intf = interface-&gt;cur_altsetting;</span><br><span class="line">	dev = interface_to_usbdev(interface);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 查看设备描述符中的如下数据是否与 usb_device_id 中的数据匹配：</span></span><br><span class="line"><span class="comment">	 * idVendor，idProduct，bcdDevice，bDeviceClass，bDeviceSubClass，bDeviceProtocol</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	usb_match_device(dev, id);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 查看接口描述符中的如下数据是否与usb_device_id 中的数据匹配：</span></span><br><span class="line"><span class="comment">	 * bInterfaceClass，bInterfaceSubClass，bInterfaceProtocol，bInterfaceNumber</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	usb_match_one_id_intf(dev, intf, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当匹配到对应的 usb_device_id 时，最终导致接口的probe函数被调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">usb_probe_interface</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_driver</span> *<span class="title">driver</span> = <span class="title">to_usb_driver</span>(<span class="title">dev</span>-&gt;<span class="title">driver</span>);</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_interface</span> *<span class="title">intf</span> = <span class="title">to_usb_interface</span>(<span class="title">dev</span>);</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_device</span> *<span class="title">udev</span> = <span class="title">interface_to_usbdev</span>(<span class="title">intf</span>);</span></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_id</span> *<span class="title">id</span>;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 再次确认接口与驱动的匹配情况 */</span></span><br><span class="line">	usb_match_dynamic_id(intf, driver);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 设置状态 */</span></span><br><span class="line">	intf-&gt;condition = USB_INTERFACE_BINDING;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 设置当前接口 */</span></span><br><span class="line">	usb_set_interface(udev, intf-&gt;altsetting[<span class="number">0</span>].desc.bInterfaceNumber, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">/* 调用具体驱动的probe函数 */</span></span><br><span class="line">	driver-&gt;probe(intf, id);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里终于调到最终的具体驱动的probe函数了。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="usb-skeleton-driver"><a href="#usb-skeleton-driver" class="headerlink" title="usb-skeleton  driver"></a>usb-skeleton  driver</h4><p>“./drivers/usb/usb-skeleton.c”是内核提供给usb设备驱动开发者的大容量存储usb设备的模板程序，我们简单分析该驱动的probe函数即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">skel_probe</span><span class="params">(struct usb_interface *interface,</span></span></span><br><span class="line"><span class="function"><span class="params">		      <span class="keyword">const</span> struct usb_device_id *id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_skel</span> *<span class="title">dev</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_endpoint_descriptor</span> *<span class="title">bulk_in</span>, *<span class="title">bulk_out</span>;</span></span><br><span class="line">	<span class="keyword">int</span> retval;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* allocate memory for our device state and initialize it */</span></span><br><span class="line">	dev = kzalloc(<span class="keyword">sizeof</span>(*dev), GFP_KERNEL);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 获取usb device 和 usb interface结构体 */</span></span><br><span class="line">	dev-&gt;udev = usb_get_dev(interface_to_usbdev(interface));</span><br><span class="line">	dev-&gt;interface = usb_get_intf(interface);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* set up the endpoint information */</span></span><br><span class="line">	<span class="comment">/* use only the first bulk-in and bulk-out endpoints */</span></span><br><span class="line">	retval = usb_find_common_endpoints(interface-&gt;cur_altsetting,</span><br><span class="line">			&amp;bulk_in, &amp;bulk_out, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 获取 bulk_in 端点的相关信息并赋值给dev相关结构体 */</span></span><br><span class="line">	dev-&gt;bulk_in_size = usb_endpoint_maxp(bulk_in);</span><br><span class="line">	dev-&gt;bulk_in_endpointAddr = bulk_in-&gt;bEndpointAddress;</span><br><span class="line">	dev-&gt;bulk_in_buffer = kmalloc(dev-&gt;bulk_in_size, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 给bulk_in申请分配一个urb*/</span></span><br><span class="line">	dev-&gt;bulk_in_urb = usb_alloc_urb(<span class="number">0</span>, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 获取 bulk_out 端点的相关信息*/</span></span><br><span class="line">	dev-&gt;bulk_out_endpointAddr = bulk_out-&gt;bEndpointAddress;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* save our data pointer in this interface device */</span></span><br><span class="line">	usb_set_intfdata(interface, dev);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* we can register the device now, as it is ready */</span></span><br><span class="line">	retval = usb_register_dev(interface, &amp;skel_class);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>首先利用探测函数 usb_find_common_endpoints 来搜索到当前接口的第一个 bulk_in 和 buld_out 端点。</li>
<li>申请usb请求块urb，urb的处理全流程如下<ul>
<li>使用usb_alloc_urb来创建urb。</li>
<li>填充urb（中断端点：usb_fill_int_urb，批量端点：usb_fill_bulk_urb，控制端点：usb_fill_control_urb）。</li>
<li>在USB设备驱动中的 read/write 操作中，使用usb_submit_urb()把urb提交给USB core。</li>
<li>USB core 把urb传递给 USB Host controller。</li>
<li>USB Host controller 对 urb进行处理，进行一次到USB设备的数据传递。</li>
<li>当urb传递完成后，调用urb的回调函数，将urb控制权重新交给USB设备驱动程序。</li>
</ul>
</li>
<li>注册usb设备，后续在 read/write 函数中利用urb来传递数据。</li>
</ol>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>以上就是USB HOST的基础流程，大体框图如下：<br><img src="/2021/03/20/Android-USB-Framework-Architecture/USB_FLOW.jpg" alt="USB_FLOW"></p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h3 id="USB-Device"><a href="#USB-Device" class="headerlink" title="USB Device"></a>USB Device</h3><h4 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h4><p>USB设备控制器（UDC）驱动指的是，当Android USB设备最为device时，插入其他USB主机控制器时，自身作为从设备而运行在底层硬件控制器的驱动。例如，当Android手机连接PC最为MTP功能时，Android 设备作为USB设备控制器的功能，这时运行在底层的是UDC驱动，在UDC驱动之上需要另外一个驱动，作为上层应用的接口，这个驱动为File Storage驱动，称为Function驱动。</p>
<p>简略框图参见如下右侧：<br><img src="/2021/03/20/Android-USB-Framework-Architecture/Android_USB_Framework_Architecture_Device.jpg" alt="Android_USB_Framework_Architecture_Device"></p>
<p>Android USB作为device时，引入gadget概念。Android USB Gadget软件架构分为3层：(Composite Framework和USB Gadget Interface为Gadget设备层)</p>
<ul>
<li><p>USB 功能驱动层:  最主要的结构是struct usb_composite_driver，这个结构在这层定义，并且实现结构中的各个函数。</p>
</li>
<li><p>Composite Framework 层:  最主要的数据结构是 struct usb_composite_dev 与 usb_gadget_driver。前一个代表一个USB复合设备，而后一个是Gadget驱动，与UDC层交互。</p>
</li>
<li><p>USB Gadget Interface层: 功能层的功能接口(interface)，主要对应USB协议，提供统一的APIGadget Function驱动，同时和UDC进行交互，和硬件无关。</p>
</li>
<li><p>UDC层:  最主要的数据结构是struct usb_gadget，通常包含在其他结构体中。这个结构体代表了一个USB设备控制器的所有关于USB通信的信息。该层和平台硬件相关。</p>
</li>
</ul>
<p>USB Host是从 HCD —-&gt; USB Core —-&gt; USB设备驱动 自下而上的进行代码分析，我们这里对USB Device进行源码分析时，选择  USB功能驱动层 和 Gaget 设备层 —-&gt; UDC的方向进行分析。（以Mass storage为例进行源码分析）</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="代码路径-1"><a href="#代码路径-1" class="headerlink" title="代码路径"></a>代码路径</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>msm-4.19/drivers/usb/gadget/function/f_mass_storage.c</td>
</tr>
<tr>
<td></td>
<td>kernel/msm-4.19/drivers/usb/gadget/legacy/mass_storage.c</td>
</tr>
<tr>
<td></td>
<td>kernel/msm-4.19/drivers/usb/gadget/composite.c</td>
</tr>
<tr>
<td></td>
<td>kernel/msm-4.19/drivers/usb/gadget/udc/core.c</td>
</tr>
</tbody>
</table>
</div>
<h4 id="核心结构体-1"><a href="#核心结构体-1" class="headerlink" title="核心结构体"></a>核心结构体</h4><ol>
<li><p>mass storage 结构体</p>
<ul>
<li>struct fsg_dev 代表mass storage 设备</li>
<li>fsg_common 代码mass storage设备中共同结构体</li>
</ul>
</li>
<li><p>核心结构体</p>
<ul>
<li>struct usb_composite_dev  代表一个复合的usb gadget设备，一般嵌入到具体的设备自定义结构体中，这里嵌入到 fsg_common中</li>
<li>usb_composite_driver 代表复合设备绑定的驱动</li>
<li>struct usb_udc 代表一个usb device controller</li>
<li>struct usb_gadget 代表一个usb从设备</li>
<li>struct usb_gadget_driver 代表 usb 从设备对应的驱动。</li>
<li>usb_function_driver 代表 usb function功能对应的驱动</li>
<li>usb_function_instance 代表 usb function功能对应的实例</li>
<li>usb_configuration 代表一个gadget设备的配置</li>
<li>usb_function 代表配置中的一个function</li>
</ul>
</li>
</ol>
<p>核心结构体对应的关系如下：<br><img src="/2021/03/20/Android-USB-Framework-Architecture/UDC_STRUCT.bmp" alt="usb device controller struct"></p>
<h4 id="USB-功能驱动层-amp-Gaget-设备层"><a href="#USB-功能驱动层-amp-Gaget-设备层" class="headerlink" title="USB 功能驱动层 &amp; Gaget 设备层"></a>USB 功能驱动层 &amp; Gaget 设备层</h4><ul>
<li><p>function 入口函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** msm-4.19/drivers/usb/gadget/function/f_mass_storage.c **/</span></span><br><span class="line"></span><br><span class="line">DECLARE_USB_FUNCTION_INIT(mass_storage, fsg_alloc_inst, fsg_alloc);</span><br><span class="line">宏定义为：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_USB_FUNCTION_INIT(_name, _inst_alloc, _func_alloc)</span></span><br></pre></td></tr></table></figure>
<p>展开该宏定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_function_driver</span> <span class="title">mass_storageusb_func</span> = &#123;</span></span><br><span class="line">	.name = __stringify(mass_storage),</span><br><span class="line">	.mod  = THIS_MODULE,</span><br><span class="line">	.alloc_inst = _inst_alloc,</span><br><span class="line">	.alloc_func = _func_alloc,</span><br><span class="line">&#125;;</span><br><span class="line">MODULE_ALIAS(<span class="string">&quot;usbfunc:&quot;</span>__stringify(mass_storage));</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">mass_storagemod_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> usb_function_register(&amp;mass_storageusb_func);</span><br><span class="line">	<span class="comment">//添加 mass_storageusb_func 到 func_list中</span></span><br><span class="line">	---&gt;list_add_tail(&amp;newf-&gt;<span class="built_in">list</span>, &amp;func_list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">mass_storagemod_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	usb_function_unregister(&amp;mass_storageusb_func);</span><br><span class="line">&#125;</span><br><span class="line">module_init(mass_storagemod_init);</span><br><span class="line">module_exit(mass_storagemod_exit);</span><br></pre></td></tr></table></figure>
<p>从如上展开的宏定义可以看出，该宏主要作用为调用 usb_function_register 来注册 mass_storageusb_func function。<br>可以看出，这里主要是添加上层的各个usb_function_driver 到 func_list 中。</p>
</li>
<li><p>legacy 入口函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/gadget/legacy/mass_storage.c **/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_driver</span> <span class="title">msg_driver</span> = &#123;</span></span><br><span class="line">	.name		= <span class="string">&quot;g_mass_storage&quot;</span>,</span><br><span class="line">	.dev		= &amp;msg_device_desc,</span><br><span class="line">	.max_speed	= USB_SPEED_SUPER_PLUS,</span><br><span class="line">	.needs_serial	= <span class="number">1</span>,</span><br><span class="line">	.strings	= dev_strings,</span><br><span class="line">	.bind		= msg_bind,</span><br><span class="line">	.unbind		= msg_unbind,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">msg_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> usb_composite_probe(&amp;msg_driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要是利用 usb_composite_probe注册一个 name 为 g_mass_storage 的复合驱动，我们接下来重点分析具体操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * usb_composite_probe() - register a composite driver</span></span><br><span class="line"><span class="comment"> * @driver: the driver to register</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Context: single threaded during gadget setup</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function is used to register drivers using the composite driver</span></span><br><span class="line"><span class="comment"> * framework.  The return value is zero, or a negative errno value.</span></span><br><span class="line"><span class="comment"> * Those values normally come from the driver&#x27;s @bind method, which does</span></span><br><span class="line"><span class="comment"> * all the work of setting up the driver to match the hardware.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * On successful return, the gadget is ready to respond to requests from</span></span><br><span class="line"><span class="comment"> * the host, unless one of its components invokes usb_gadget_disconnect()</span></span><br><span class="line"><span class="comment"> * while it was binding.  That would usually be done in order to wait for</span></span><br><span class="line"><span class="comment"> * some userspace participation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/gadget/composite.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_composite_probe</span><span class="params">(struct usb_composite_driver *driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget_driver</span> *<span class="title">gadget_driver</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	 * 把模板赋值给该usb_composite_driver的gadget_driver成员变量   </span></span><br><span class="line"><span class="comment">	 * 然后填充 gadget_driver 变量，最后通过 usb_gadget_probe_driver 注册该结构体</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	driver-&gt;gadget_driver = composite_driver_template;</span><br><span class="line">	gadget_driver = &amp;driver-&gt;gadget_driver;</span><br><span class="line"></span><br><span class="line">	gadget_driver-&gt;function =  (<span class="keyword">char</span> *) driver-&gt;name;</span><br><span class="line">	gadget_driver-&gt;driver.name = driver-&gt;name;</span><br><span class="line">	gadget_driver-&gt;max_speed = driver-&gt;max_speed;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> usb_gadget_probe_driver(gadget_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/gadget/udc/core.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_gadget_probe_driver</span><span class="params">(struct usb_gadget_driver *driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_udc</span>		*<span class="title">udc</span> = <span class="title">NULL</span>;</span></span><br><span class="line">	<span class="comment">/* 这里涉及到udc_list，其实就是框图中的UDC(这里为DW3 usb device controller)，后面在UDC章节分析*/</span></span><br><span class="line">	list_for_each_entry(udc, &amp;udc_list, <span class="built_in">list</span>) &#123;</span><br><span class="line">		<span class="comment">/* For now we take the first one */</span></span><br><span class="line">		<span class="keyword">if</span> (!udc-&gt;driver)</span><br><span class="line">			<span class="keyword">goto</span> found;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 如果在上面没有找到UDC，添加 usb_gadget_driver-&gt;pending 到 gadget_driver_pending_list 中 */</span></span><br><span class="line">	<span class="keyword">if</span> (!driver-&gt;match_existing_only) &#123;</span><br><span class="line">		list_add_tail(&amp;driver-&gt;pending, &amp;gadget_driver_pending_list);</span><br><span class="line">		pr_info(<span class="string">&quot;udc-core: couldn&#x27;t find an available UDC - added [%s] to list of pending drivers\n&quot;</span>,</span><br><span class="line">			driver-&gt;function);</span><br><span class="line">		ret = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 udc_bind_to_driver(udc, driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
</li>
</ul>
<ol>
<li>首先构造 usb_gadget_driver 结构体.</li>
<li>遍历udc_list，寻找udc 设备，高通平台对应dwc3 usb device  controller .</li>
<li>如果没有找到UDC，把 该 usb_gadget_driver 私有数据 pending 添加到 gadget_driver_pending_list 中</li>
<li>利用 udc_bind_to_driver 函数把 usb_gadget_driver（即msg_driver-&gt;gadget_driver） 与对应的 usb_udc（即dw3 usb device controller） 进行绑定。</li>
</ol>
<p>接下来对 udc_bind_to_driver 进行分析<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/gadget/udc/core.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">udc_bind_to_driver</span><span class="params">(struct usb_udc *udc, struct usb_gadget_driver *driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 注册UDC driver g_mass_storage*/</span></span><br><span class="line">	dev_dbg(&amp;udc-&gt;dev, <span class="string">&quot;registering UDC driver [%s]\n&quot;</span>,</span><br><span class="line">			driver-&gt;function);</span><br><span class="line">	<span class="comment">/* 关联 usb_udc 和 usb_gadget_driver */</span></span><br><span class="line">	udc-&gt;driver = driver;</span><br><span class="line">	udc-&gt;dev.driver = &amp;driver-&gt;driver;</span><br><span class="line">	udc-&gt;gadget-&gt;dev.driver = &amp;driver-&gt;driver;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 当前驱动支持的最大速度 */</span></span><br><span class="line">	usb_gadget_udc_set_speed(udc, driver-&gt;max_speed);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 前面构造 usb_gadget_driver 时，</span></span><br><span class="line"><span class="comment">	 * 把 composite_driver_template 结构体赋值给 usb_gadget_driver</span></span><br><span class="line"><span class="comment">	 * 所以这里对应的bind为 composite_bind</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	driver-&gt;bind(udc-&gt;gadget, driver);</span><br><span class="line">		---&gt; composite_bind</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	 * 通知UDC开始启动</span></span><br><span class="line"><span class="comment">	 * 最终调用kernel/msm-4.19/drivers/usb/dwc3/gadget.c</span></span><br><span class="line"><span class="comment">	 * .udc_start		= dwc3_gadget_start,</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	usb_gadget_udc_start(udc);</span><br><span class="line">	---&gt; udc-&gt;gadget-&gt;ops-&gt;udc_start(udc-&gt;gadget, udc-&gt;driver);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * software-controlled connect to USB host</span></span><br><span class="line"><span class="comment">	 *  主要动作为使能 D+/D- 上拉，host接受到该信息后会开始进行枚举动作</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	usb_udc_connect_control(udc);</span><br><span class="line">		---&gt; usb_gadget_connect(udc-&gt;gadget);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 发送uevent事件 */</span></span><br><span class="line">	kobject_uevent(&amp;udc-&gt;dev.kobj, KOBJ_CHANGE);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：</p>
<ol>
<li>把 usb_udc 和 usb_gadget_driver 通过成员变量关联起来</li>
<li>设置驱动支持的最大的速度</li>
<li>第一次调用模板 composite_driver_template 的成员变量 bind —-&gt; composite_bind</li>
<li>使能 D+/D- 上拉，host接受到该信息后会开始进行枚举动作</li>
<li>发生 usb change uevent 事件</li>
</ol>
<p>接下来分析上面的核心函数 composite_bind</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/gadget/composite.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">composite_bind</span><span class="params">(struct usb_gadget *gadget,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct usb_gadget_driver *gdriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_dev</span>	*<span class="title">cdev</span>;</span></span><br><span class="line">	<span class="comment">/* 获取到 msg_driver 结构体*/</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_driver</span>	*<span class="title">composite</span> = <span class="title">to_cdriver</span>(<span class="title">gdriver</span>);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*初始化 confis 和gstrings 2个list*/</span></span><br><span class="line">	INIT_LIST_HEAD(&amp;cdev-&gt;configs);</span><br><span class="line">	INIT_LIST_HEAD(&amp;cdev-&gt;gstrings);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 设置 usb_composite_dev	*cdev ，做一些准备动作*/</span></span><br><span class="line">	composite_dev_prepare(composite, cdev);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* composite gadget needs to assign strings for whole device (like</span></span><br><span class="line"><span class="comment">	 * serial number), register function drivers, potentially update</span></span><br><span class="line"><span class="comment">	 * power state and consumption, etc</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这里调取 usb_composite_driver msg_driver中的bind函数.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	composite-&gt;bind(cdev);</span><br><span class="line">	---&gt; .bind		= msg_bind,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更新设备描述符 */</span></span><br><span class="line">	update_unchanged_dev_desc(&amp;cdev-&gt;desc, composite-&gt;dev);</span><br><span class="line"></span><br><span class="line">	INFO(cdev, <span class="string">&quot;%s ready\n&quot;</span>, composite-&gt;name);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板bind函数，主要作用为调用上层对应的 usb_composite_driver 结构体的bind —-&gt; msg_bind，这里又回到 legacy 入口函数时，注册的 msg_driver的bind成员变量 —-&gt; msg_bind。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** kernel/msm-4.19/drivers/usb/gadget/legacy/mass_storage.c **/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">msg_bind</span><span class="params">(struct usb_composite_dev *cdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsg_opts</span> *<span class="title">opts</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsg_config</span> <span class="title">config</span>;</span></span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">	fi_msg = usb_get_function_instance(<span class="string">&quot;mass_storage&quot;</span>);</span><br><span class="line">	<span class="comment">/* 请求安装 mass_storge kernel module ko */</span></span><br><span class="line">	---&gt; request_module(<span class="string">&quot;usbfunc:%s&quot;</span>, name);</span><br><span class="line">	---&gt; try_get_usb_function_instance(name);</span><br><span class="line">		<span class="comment">/* 调用 mass_storageusb_func.alloc_inst 来分配实例，</span></span><br><span class="line"><span class="comment">		/* 这里主要和mass storage相关，不具体分析*/</span></span><br><span class="line">		---&gt; fsg_alloc_inst</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 配置一些 mass storage的一些基础参数 */</span></span><br><span class="line">	fsg_config_from_params(&amp;config, &amp;mod_data, fsg_num_buffers);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 获取到 fsg_opts */</span></span><br><span class="line">	opts = fsg_opts_from_func_inst(fi_msg);</span><br><span class="line"></span><br><span class="line">	opts-&gt;no_configfs = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 设置一些mass storage专用的配置 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 判断是否为OTG，如果是，对OTG设备描述符进行一些操作 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为 dev 添加绑定一个 config */</span></span><br><span class="line">	usb_add_config(cdev, &amp;msg_config_driver, msg_do_config);</span><br><span class="line">	---&gt; usb_add_config_only(cdev, config);</span><br><span class="line">    ---&gt; bind(config);</span><br><span class="line">		---&gt; msg_do_config</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>获取 mass_storage function实例</li>
<li>设置一些mass storage的配置</li>
<li>判断是否为OTG设备，进行一些操作</li>
<li>为 dev 添加绑定一个 config，最终调用 msg_do_config 来实现</li>
</ol>
<p>接下来分析 msg_do_config<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">msg_do_config</span><span class="params">(struct usb_configuration *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	 * 根据name，遍历func_list中name为 mass_storage 的 function</span></span><br><span class="line"><span class="comment">	 * 在kernel/msm-4.19/drivers/usb/gadget/function/f_mass_storage.c中</span></span><br><span class="line"><span class="comment">	 * 我们有通过宏 DECLARE_USB_FUNCTION_INIT 来注册一个name为mass_storage的usb_function_driver，</span></span><br><span class="line"><span class="comment">	 * 即添加 mass_storageusb_func 到 func_list中</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	f_msg = usb_get_function(fi_msg);</span><br><span class="line">	---&gt; fi_msg-&gt;fd-&gt;alloc_func(fi_msg);</span><br><span class="line">		<span class="comment">/* 构建fsg_dev *fsg </span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.name	= FSG_DRIVER_DESC;</span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.bind	= fsg_bind;</span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.unbind	= fsg_unbind;</span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.setup	= fsg_setup;</span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.set_alt	= fsg_set_alt;</span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.disable	= fsg_disable;</span></span><br><span class="line"><span class="comment">		 * fsg-&gt;function.free_func	= fsg_free;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		---&gt;fsg_alloc</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为 config 添加一个function ---&gt; mass_storageusb_func */</span></span><br><span class="line">	usb_add_function(c, f_msg);</span><br><span class="line">	---&gt; f_msg-&gt;bind(config, function);</span><br><span class="line">		---&gt;fsg_bind</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结：</p>
<ol>
<li>遍历 func_list 中 name 为 mass_storage 的 function</li>
<li>构造一个fsg_dev，对其成员变量 function 进行赋值操作</li>
<li>为该 usb config 添加绑定如上 function，最终调用 fsg_bind 进行绑定操作。</li>
</ol>
<p>接下来看 fsg_bind 函数：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fsg_bind</span><span class="params">(struct usb_configuration *c, struct usb_function *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsg_dev</span>		*<span class="title">fsg</span> = <span class="title">fsg_from_func</span>(<span class="title">f</span>);</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsg_common</span>	*<span class="title">common</span> = <span class="title">fsg</span>-&gt;<span class="title">common</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget</span>	*<span class="title">gadget</span> = <span class="title">c</span>-&gt;<span class="title">cdev</span>-&gt;<span class="title">gadget</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_ep</span>		*<span class="title">ep</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fsg_opts</span>		*<span class="title">opts</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Don&#x27;t allow to bind if we don&#x27;t have at least one LUN */</span></span><br><span class="line">	ret = _fsg_common_get_max_lun(common);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 创建 &quot;file-storage&quot; thread，并启动，这里主要和mass storage相关，不具体分析*/</span></span><br><span class="line">    common-&gt;thread_task =kthread_create(fsg_main_thread, common, <span class="string">&quot;file-storage&quot;</span>);</span><br><span class="line">    wake_up_process(common-&gt;thread_task);</span><br><span class="line">msg_bind</span><br><span class="line">	<span class="comment">/* New interface */</span></span><br><span class="line">	i = usb_interface_id(c, f);</span><br><span class="line"></span><br><span class="line">	fsg_intf_desc.bInterfaceNumber = i;</span><br><span class="line">	fsg-&gt;interface_number = i;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Find all the endpoints we will use */</span></span><br><span class="line">	ep = usb_ep_autoconfig(gadget, &amp;fsg_fs_bulk_in_desc);</span><br><span class="line">	fsg-&gt;bulk_in = ep;</span><br><span class="line"></span><br><span class="line">	ep = usb_ep_autoconfig(gadget, &amp;fsg_fs_bulk_out_desc);</span><br><span class="line">	fsg-&gt;bulk_out = ep;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 根据不同的usb速度分配usb interface 和 usb endpoint描述符 */</span></span><br><span class="line">	usb_assign_descriptors(f, fsg_fs_function, fsg_hs_function,</span><br><span class="line">			fsg_ss_function, fsg_ss_function);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>mass storage最终的bind函数主要做了如下事情 ：</p>
<ol>
<li>创建并运行 file-storage 子进程</li>
<li>构建interface和endpoint，并分配他们的描述符</li>
</ol>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>总结：<br>USB 功能驱动层 &amp; Gaget 设备层的关系比较紧密，存在很多回调函数，下图只是列出了简单的调用关系图:<br><img src="/2021/03/20/Android-USB-Framework-Architecture/USB_Gadget_Framework.jpg" alt="USB Gadget Framework"></p>
<p>另外从上面的代码流程可以看出，mass storage一共经历了4次 bind 函数，最终实现mass storage功能。</p>
<ul>
<li><p>struct usb_gadget_driver composite_driver_template 对应的 composite_bind，所有 gadget 驱动都走这个公共函数。</p>
</li>
<li><p>struct usb_composite_driver msg_driver 对应的 msg_bind，这里回调到 上层 legacy/mass_storage.c 的mass storage的驱动。</p>
</li>
<li><p>usb_add_config 中，回调 msg_do_config，来给 dev 绑定一个 configuration</p>
</li>
<li><p>usb_add_function中，回调到 function/f_mass_storage.c 中 struct usb_function_driver mass_storageusb_func-&gt;ubs_function-&gt;bind 函数</p>
</li>
</ul>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h4 id="UDC"><a href="#UDC" class="headerlink" title="UDC"></a>UDC</h4><p>在Android USB作为Host的代码流程 dwc3_probe 函数中：<br>如果dts中dr_mode = otg 或者 peripheral，调用 dwc3_gadget_init 来初始化gadget相关的寄存器。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dwc3_gadget_init - Initializes gadget related registers</span></span><br><span class="line"><span class="comment"> * @dwc: pointer to our controller context structure</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns 0 on success otherwise negative errno.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dwc3_gadget_init</span><span class="params">(struct dwc3 *dwc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dwc-&gt;gadget.ops			= &amp;dwc3_gadget_ops;</span><br><span class="line">	dwc-&gt;gadget.max_speed		= USB_SPEED_SUPER;</span><br><span class="line">	dwc-&gt;gadget.speed		= USB_SPEED_UNKNOWN;</span><br><span class="line">	dwc-&gt;gadget.name		= <span class="string">&quot;dwc3-gadget&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 初始化 OUT 和 IN 端点 */</span></span><br><span class="line">	dwc3_gadget_init_endpoints(dwc);</span><br><span class="line">	---&gt; dwc3_gadget_init_hw_endpoints(dwc, dwc-&gt;num_out_eps, <span class="number">0</span>);</span><br><span class="line">	---&gt; dwc3_gadget_init_hw_endpoints(dwc, dwc-&gt;num_in_eps, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 在udc class driver list 中增加新的 gadget:&quot;dwc3-gadget&quot; */</span></span><br><span class="line">	usb_add_gadget_udc((struct device *)dwc-&gt;dev, &amp;dwc-&gt;gadget);</span><br><span class="line">	---&gt; usb_add_gadget_udc_release(parent, gadget, <span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着分析 usb_add_gadget_udc_release 函数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * usb_add_gadget_udc_release - adds a new gadget to the udc class driver list</span></span><br><span class="line"><span class="comment"> * @parent: the parent device to this udc. Usually the controller driver&#x27;s</span></span><br><span class="line"><span class="comment"> * device.</span></span><br><span class="line"><span class="comment"> * @gadget: the gadget to be added to the list.</span></span><br><span class="line"><span class="comment"> * @release: a gadget release function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns zero on success, negative errno otherwise.</span></span><br><span class="line"><span class="comment"> * Calls the gadget release function in the latter case.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_add_gadget_udc_release</span><span class="params">(struct device *parent, struct usb_gadget *gadget,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">void</span> (*release)(struct device *dev))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">usb_udc</span>		*<span class="title">udc</span>;</span></span><br><span class="line"></span><br><span class="line">	dev_set_name(&amp;gadget-&gt;dev, <span class="string">&quot;gadget&quot;</span>);</span><br><span class="line">	INIT_WORK(&amp;gadget-&gt;work, usb_gadget_state_work);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 初始化 gadget-&gt;dev 和 udc-&gt;dev 结构体 */</span></span><br><span class="line">	device_initialize(&amp;gadget-&gt;dev);</span><br><span class="line">	device_initialize(&amp;udc-&gt;dev);</span><br><span class="line">	</span><br><span class="line">	udc-&gt;dev.release = usb_udc_release;</span><br><span class="line">	udc-&gt;dev.class = udc_class;</span><br><span class="line">	udc-&gt;dev.groups = usb_udc_attr_groups;</span><br><span class="line">	udc-&gt;dev.parent = parent;</span><br><span class="line">	ret = dev_set_name(&amp;udc-&gt;dev, <span class="string">&quot;%s&quot;</span>, kobject_name(&amp;parent-&gt;kobj));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 把 gadget-&gt;dev 添加到gadget设备中 */</span></span><br><span class="line">	ret = device_add(&amp;gadget-&gt;dev);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* udc 和 gadget 相互建立连接 */</span></span><br><span class="line">	udc-&gt;gadget = gadget;</span><br><span class="line">	gadget-&gt;udc = udc;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/* 把udc，即dwc3 usb device controller 添加到 udc_list 中 */</span></span><br><span class="line">    list_add_tail(&amp;udc-&gt;<span class="built_in">list</span>, &amp;udc_list);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/* 把 udev-&gt;dev 添加到udc设备中 */</span></span><br><span class="line">	device_add(&amp;udc-&gt;dev);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* pick up one of pending gadget drivers */</span></span><br><span class="line">	check_pending_gadget_drivers(udc);</span><br><span class="line">	---&gt; 遍历 gadget_driver_pending_list ，根据 name 来给 udc 绑定对应的 driver</span><br><span class="line">	---&gt; udc_bind_to_driver(udc, driver);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这里和从Gadget Driver层往下分析时调用 udc_bind_to_driver 绑定 usb_gadget_driver（即msg_driver-&gt;gadget_driver） 与对应的 usb_udc（即dw3 usb device controller） 时一致，最终把UDC和对应的驱动绑定，从而使上层gadget driver可以使用。</p>
<p>大致框图如下：</p>
<p><img src="/2021/03/20/Android-USB-Framework-Architecture/UDC_Framework.jpg" alt="UDC Framework Architecture"></p>
<h4 id="Configfs"><a href="#Configfs" class="headerlink" title="Configfs"></a>Configfs</h4><p>详情介绍可以参考 kernel 官方文档，这里只是简单介绍一下。</p>
<ul>
<li>Documentation/filesystems/configfs/configfs.txt</li>
<li>Documentation/usb/gadget_configfs.txt</li>
</ul>
<p>和 usb gadget 相关的configfs主要源码实现路径：</p>
<ul>
<li>kernel/msm-4.19/drivers/usb/gadget/configfs.c</li>
</ul>
<p>首先看下 configfs 中 和 gadget 相关的设备内容， adb 进入设备 /config/usb_gadget/g1 路径<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">xxx:/config/usb_gadget/g1 <span class="meta"># tree</span></span><br><span class="line">.</span><br><span class="line">./strings</span><br><span class="line">./strings/<span class="number">0x409</span></span><br><span class="line">./strings/<span class="number">0x409</span>/serialnumber <span class="comment">/*串号，使用emmc时，该值为emmc id号经过hash运算后生成的唯一值*/</span></span><br><span class="line">./strings/<span class="number">0x409</span>/product</span><br><span class="line">./strings/<span class="number">0x409</span>/manufacturer</span><br><span class="line">./configs</span><br><span class="line">./configs/c<span class="number">.1</span></span><br><span class="line">./configs/c<span class="number">.1</span>/ncm.usb0 -&gt; ../../../../usb_gadget/g1/functions/ncm.usb0</span><br><span class="line">./configs/c<span class="number">.1</span>/strings</span><br><span class="line">./configs/c<span class="number">.1</span>/strings/<span class="number">0x409</span></span><br><span class="line"><span class="comment">/* ------ 在rc文件中，写入对应的功能，即可以把相应function添加到该configuration中 ------ */</span></span><br><span class="line">./configs/c<span class="number">.1</span>/strings/<span class="number">0x409</span>/configuration </span><br><span class="line">./configs/c<span class="number">.1</span>/bmAttributes</span><br><span class="line">./configs/c<span class="number">.1</span>/MaxPower</span><br><span class="line">./functions</span><br><span class="line">./functions/ncm.usb0</span><br><span class="line">./functions/ncm.usb0/ifname</span><br><span class="line">./functions/ncm.usb0/qmult</span><br><span class="line">./functions/ncm.usb0/host_addr</span><br><span class="line">./functions/ncm.usb0/dev_addr</span><br><span class="line">./UDC <span class="comment">/*USB device controller 名字，这里为 a600000.dwc3*/</span></span><br><span class="line">./bcdUSB <span class="comment">/* 该设备遵循的USB版本号，以BCD码表示，USB1.1为0x0101，USB2.0为0x0200 */</span></span><br><span class="line">./bcdDevice <span class="comment">/*用于表示USB设备的版本号*/</span></span><br><span class="line">./idProduct <span class="comment">/* USB product ID */</span></span><br><span class="line">./idVendor <span class="comment">/* USB vendor ID */</span></span><br><span class="line">./bMaxPacketSize0 <span class="comment">/* 用于表示在USB设备中，端点0所支持最大数据包的长度，它以字节为单位 */</span></span><br><span class="line">./bDeviceProtocol <span class="comment">/* 用于表示USB设备类所采用的设备类协议，其值和bDeviceClass和bDeviceSubClass有关 */</span></span><br><span class="line">./bDeviceSubClass <span class="comment">/* 该设备所属的标准设备子类 */</span></span><br><span class="line">./bDeviceClass <span class="comment">/* 该设备所属的标准设备类 */</span></span><br></pre></td></tr></table></figure></p>
<p>在 init.msm.usb.configfs.rc 中，当 sys.usb.config 匹配为mass_storege,adb时，执行脚本如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">on property:sys.usb.ffs.ready=<span class="number">1</span> &amp;&amp; property:sys.usb.config=mass_storage,adb &amp;&amp; property:sys.usb.configfs=<span class="number">1</span></span><br><span class="line">    write /config/usb_gadget/g1/configs/b<span class="number">.1</span>/strings/<span class="number">0x409</span>/configuration <span class="string">&quot;adb_msc&quot;</span></span><br><span class="line">	...</span><br><span class="line">    write /config/usb_gadget/g1/idVendor <span class="number">0x05C6</span></span><br><span class="line">    write /config/usb_gadget/g1/idProduct <span class="number">0x9015</span></span><br><span class="line">    symlink /config/usb_gadget/g1/functions/ffs.adb /config/usb_gadget/g1/configs/b<span class="number">.1</span>/f1</span><br><span class="line">    symlink /config/usb_gadget/g1/functions/mass_storage<span class="number">.0</span> /config/usb_gadget/g1/configs/b<span class="number">.1</span>/f2</span><br><span class="line">    write /config/usb_gadget/g1/UDC $&#123;sys.usb.controller&#125;</span><br><span class="line">    setprop sys.usb.state $&#123;sys.usb.config&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，该脚本主要做了如下事情：</p>
<ul>
<li>把选择的 function 组合 写入到 /config/usb_gadget/g1/configs/b.1/strings/0x409/configuration 中</li>
<li>重写 idVendor 和 idProduct</li>
<li>把2个 function 做 link操作，映射到/config/usb_gadget/g1/configs/b.1/f1和f2</li>
<li>把usb device controller的名字写入到 /config/usb_gadget/g1/UDC</li>
<li>最后设置 sys.usb.state 为当前状态</li>
</ul>
<p>到此，我们通过设置 sys.usb.config 等属性值，就可以切换Android USB设备作为Device的功能选择。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>注：此 USB 文档主要讲述了 Android USB 设备作为 Host 和Device的整体代码流程分析，其中省略掉了 OTG 部分的分析。此外，Android USB 还有如下特性没有分析，后面找机会分别介绍，这里记录一下：</p>
<ul>
<li>OTG</li>
<li>Type C</li>
<li>USB Charging &amp; PD</li>
<li>DP</li>
</ul>
]]></content>
      <categories>
        <category>usb</category>
      </categories>
      <tags>
        <tag>usb</tag>
      </tags>
  </entry>
  <entry>
    <title>USB-Type-C-Specification-Release</title>
    <url>/2021/08/24/USB-Type-C-Specification-Release/</url>
    <content><![CDATA[<p>USB Type-C List of Signals</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Signal Group</th>
<th>Signal</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB 3.1</td>
<td>SSTXp1,SSTXn1<br>SSRXp1,SSRXn1<br>SSTXp2,SSTXn2<br>SSRXp2,SSRXn2</td>
<td>SuperSpeed USB serial data interface defines 1 differential transmit pair and 1 differential receive pair. On a USB Type-C receptacle, two sets of SuperSpeed USB signal pins are defined to enable plug flipping feature</td>
</tr>
<tr>
<td>USB 2.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Configuration</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Auxilliary signals</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Power</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>The typical flow for the configuration of the interface in the general USB case of a DFP to a<br>UFP is as follows:</p>
<ol>
<li>Detect a valid connection between the ports (including determining cable<br>orientation and DFP/UFP relationship)</li>
<li>Optionally discover the cable’s capabilitiesRelease</li>
<li>Optionally establish alternatives to traditional USB power (See Section 4.6.2)<br> a. USB PD communication over CC for advanced power delivery negotiation<br> b. USB Type-C Current modes<br> c. USB BC 1.2</li>
<li>USB Device Enumeration</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Yocto_Build_System_Introduction</title>
    <url>/2021/06/30/Yocto-Build-System-Introduction/</url>
    <content><![CDATA[<h1 id="1-初识yocto"><a href="#1-初识yocto" class="headerlink" title="1 初识yocto"></a>1 初识yocto</h1><p>Yocto项目是一个开源合作项目，它帮助开发者创建基于Linux的定制系统，这些系统是为嵌入式产品设计的，与产品的硬件架构无关。Yocto项目提供了一个灵活的工具集和开发环境，全球的嵌入式开发人员可以共享技术，软件堆栈，配置和最佳实践，可用于为嵌入式设备创建定制的Linux镜像。</p>
<h2 id="1-1-基本名词"><a href="#1-1-基本名词" class="headerlink" title="1.1 基本名词"></a>1.1 基本名词</h2><p>首先介绍几个概念，</p>
<ul>
<li>Yocto：开源协作项目，该项目主要是为了帮助开发人员为嵌入式产品创建基于 Linux的定制系统。主要提供一套灵活的工具和空间。</li>
<li>Poky：有2个含义<ul>
<li>用来构建 Linux 的构建系统，包含了 BitBake工具、编译工具链、BSP、诸多程序包或层，可以认为Poky即是Yocto的本质</li>
<li>使用Poky系统构建编译出来的参考 Linux 发行版本也叫Poky.</li>
</ul>
</li>
<li>openembedded：Yocto的协同开源项目，主要提供 Linux 交叉编译环境，是Yocto项目推荐的编译系统。主要为Yocto项目提供 BitBake 和OpenEmbedded-Core。</li>
</ul>
<p>它们之间的关系框图如下：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Poky_OpenEmbedded_Relationship.JPG" alt="Yocto_Poky_OpenEmbedded_Relationship"></p>
<h2 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h2><p>具体参见&lt;<a href="https://docs.yoctoproject.org/singleindex.html#features">Welcome to the Yocto Project Documentation -&gt; 2.1.1 Features</a>&gt;，这里不直接引用了，直接看官方英文文档吧。</p>
<h2 id="1-3-相关路径"><a href="#1-3-相关路径" class="headerlink" title="1.3 相关路径"></a>1.3 相关路径</h2><p>以 yocto 开源项目为例，来看一下项目有哪些目录：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">├── bitbake</span><br><span class="line">├── build</span><br><span class="line">├── contrib</span><br><span class="line">├── documentation</span><br><span class="line">├── LICENSE</span><br><span class="line">├── LICENSE.GPL<span class="number">-2.0</span>-only</span><br><span class="line">├── LICENSE.MIT</span><br><span class="line">├── MEMORIAM</span><br><span class="line">├── meta</span><br><span class="line">	├── classes</span><br><span class="line">	├── conf</span><br><span class="line">	├── files</span><br><span class="line">	├── lib</span><br><span class="line">    ├── recipes-bsp</span><br><span class="line">    ├── recipes-connectivity</span><br><span class="line">    ├── recipes-core</span><br><span class="line">    ├── recipes-devtools</span><br><span class="line">    ├── recipes-gnome</span><br><span class="line">    ├── recipes-graphics</span><br><span class="line">    └── recipes-kernel</span><br><span class="line">		├── kmod</span><br><span class="line">		├── linux</span><br><span class="line">		├── perf</span><br><span class="line">		└── dtc <span class="comment">//这里会编译出一个dtc工具</span></span><br><span class="line">			├── dtc</span><br><span class="line">			│   └── make_install.patch</span><br><span class="line">			├── dtc_1<span class="number">.6</span><span class="number">.0</span>.bb</span><br><span class="line">			└── dtc.inc</span><br><span class="line">├── meta-poky</span><br><span class="line">├── meta-qt5</span><br><span class="line">├── meta-selftest</span><br><span class="line">├── meta-skeleton</span><br><span class="line">├── meta-test-layer</span><br><span class="line">├── meta-yocto-bsp</span><br><span class="line">├── oe-init-build-env</span><br><span class="line">├── README.hardware -&gt; meta-yocto-bsp/README.hardware</span><br><span class="line">├── README.OE-Core</span><br><span class="line">├── README.poky -&gt; meta-poky/README.poky</span><br><span class="line">├── README.qemu</span><br><span class="line">└── scripts</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>相关目录详情如下</p>
<style> table th:first-of-type { width: 150px; } </style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">目录 &nbsp; &nbsp; &nbsp;</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">bitbake</td>
<td>存放bitbake相关工具，BitBake是一个通用的任务执行引擎，类似Make的构建引擎（差异其实较大）。</td>
</tr>
<tr>
<td style="text-align:left">build</td>
<td>包含用户配置文件，以及OpenEmbedded构建系统的输出产物（包括拷贝的用于编译的源码，编译中间产物，编译最终输出）</td>
</tr>
<tr>
<td style="text-align:left">meta</td>
<td>meta目录是OpenEmbedded的核心元数据，包含基本的class，conf（machine机器配置，发行版本配置）和一些recipe</td>
</tr>
<tr>
<td style="text-align:left">meta-poky</td>
<td>Poky发行版的配置</td>
</tr>
<tr>
<td style="text-align:left">meta-selftest</td>
<td>这个目录添加了额外的配方和附加文件，由OpenEmbedded selftests用来验证构建系统的行为，一般不在构建系统中</td>
</tr>
<tr>
<td style="text-align:left">meta-skeleton</td>
<td>这个目录包含BSP和内核开发的模板配方</td>
</tr>
<tr>
<td style="text-align:left">meta-yocto-bsp</td>
<td>这个目录包含了Yocto项目的参考硬件板卡支持包（BSPs）。关于BSP的更多信息，请参见<a href="http://docs.yoctoproject.org/bsp-guide/index.html#yocto-project-board-support-package-developer-s-guide">Yocto Project Board Support Package Developer’s Guide — The Yocto Project ® dev documentation</a></td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-4-专业术语"><a href="#1-4-专业术语" class="headerlink" title="1.4 专业术语"></a>1.4 专业术语</h2><p><style> table th:first-of-type { width: 150px; } </style><br>| 术语               | 描述                                                         |<br>| ————————— | —————————————————————————————— |<br>| 类（<code>class</code>）      | 类文件被用来抽象出共同的功能，并在多个配方（.bb）文件中共享，<code>BitBake</code>类文件使用<code>bbclass</code>后缀 |<br>| 配置文件（<code>conf</code>） | 包含变量的全局定义，用户定义的变量和硬件配置信息的文件，已.conf文件名结尾。<br>build目录中的conf/local.conf配置文件为编译自动生成，包含了用户定义的变量，这些变量会影响到每次构建。 |<br>| 食谱（recipe)      | 一系列构建packages的指令，后缀为bb文件名。<br>主要描述从哪里获取源码，应用哪些patch，如何编译他们等等，同时还描述了库或者其他食谱的依赖关系 |<br>| 元数据（Metadata） | 元数据包括类，菜谱，配置文件和引用构建指令本身的其他信息，以及用于控制构建内容并影响构建方式的数据。<code>OpenEmbedded Core</code>是一组重要的经过验证的元数据 |<br>| Bitbake            | 作为<code>OpenEmbedded</code>构建系统中的构建引擎，它通过以特定格式编写的食谱工作，以执行一系列任务。 |<br>| Task（任务）       | Bitbake执行的基本单元                                        |<br>| 层（layer）        | 层是包含相关指令集的仓库，告诉OpenEmbedded构建系统要做什么。<br>主要作用为模块化开发，降低耦合度，每个大模块都构建一个Layer，例如BSP layer，主要涉及到与特定硬件相关的内容 |<br>| 包（<code>package</code>）    | 包含可执行的二进制文件，库，文档，配置信息和其他文件，一个食谱默认如下package：<br>  ${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN} |</p>
<p>简单来说，<br>Metadata = Configuration(.conf) + Classes(.bbclass) + Recipes(.bb)<br>Yocto = Bitbake + Metadata<br>大致框图如下：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto.JPG" alt="Yocto"></p>
<hr>
<p>&nbsp;</p>
<h1 id="2-yocto工作流程"><a href="#2-yocto工作流程" class="headerlink" title="2 yocto工作流程"></a>2 yocto工作流程</h1><p>Yocto的工作流程大致如下：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/yocto_workflow.JPG" alt="Yocto_Poky_OpenEmbedded_Relationship"><br>主要组成部分如下：</p>
<ul>
<li>User Configuration: 可用于控制构建过程的元数据。</li>
<li>Metadata Layers: 元数据Layer，可以是软件层，硬件机器层，Distro等等层，主要用来减少耦合，重复利用。</li>
<li>Source Files: 包括上游版本（例如，tarball 或 zip 文件），本地源码，源控制管理（SCM）的提取器（例如，git 或 svn）</li>
<li>Build System: 在BitBake控制下的过程。这个区块阐述了BitBake如何获取源代码、应用补丁、完成编译、分析输出以生成包、创建和测试包、生成镜像以及生成交叉开发工具。</li>
<li>Package Feeds: 包含输出包（RPM、DEB或IPK）的目录，这些包随后被用于构建产生镜像或软件开发工具包（SDK）。</li>
<li>Images: 由工作流程产生的图像。</li>
<li>Application Development SDK: 与镜像一起制作或与BitBake单独制作的交叉开发工具。</li>
</ul>
<h2 id="2-1-User-Configuration"><a href="#2-1-User-Configuration" class="headerlink" title="2.1 User Configuration"></a>2.1 User Configuration</h2><p>用户配置有助于定义构建。通过用户配置，你能告诉BitBake你要构建的镜像的目标架构是什么，在哪里存储下载的源码，以及其他构建属性。<br>下图显示工作流程：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_User_Configuration.JPG" alt="Yocto_User_Configuration"></p>
<p>使用yocto poky项目tree一下build目录，查看conf目录</p>
<p>BitBake需要一些基本的配置文件，以完成构建。这些文件是*.conf文件。最小的必要文件作为示例文件存在于Source Directory的build/conf目录中</p>
<ul>
<li>local.conf：文件提供了许多定义构建环境的基本变量。（包括目标机选择，下载目录，共享状态目录，构建输出等等）</li>
<li>bblayers.conf：文件告诉BitBake，在构建时你需要考虑哪些layer。默认情况下，该文件中列出的层包括构建系统所需的最小层。</li>
<li>site.conf：略</li>
<li>auto.conf：略，自动生成</li>
</ul>
<h2 id="2-2-Metadata-Layers"><a href="#2-2-Metadata-Layers" class="headerlink" title="2.2 Metadata Layers"></a>2.2 Metadata Layers</h2><p>上小一节描述了定义BitBake全局行为的用户配置。本节讲仔细分析那些用来进一步控制编译的构建系统的layer。这些层提供software、machine和policy的元数据。</p>
<p>一般来说，有三种类型的layer输入，你可以在工作流程图的最左侧看到它们。</p>
<ul>
<li>Metadata(.bb + Patches)：软件layer包含用户提供的recipe文件，patches 和append文件。示例：meta-qt5 layer layer，这个层是针对流行的Qt跨平台应用开发框架的5.0版本，用于桌面、嵌入式和移动。</li>
<li>Machine BSP Configuration：板卡支持包（BSP）layer提供机器特定的配置，这种类型的信息是针对特定的目标架构的，示例：meta-yocto-bsp layer</li>
<li>Policy Configuration：Distro Layer，为某一特定发行版构建的镜像或SDK提供顶层或一般策略，示例如下：<ul>
<li>高通Ubuntu项目 —-&gt; meta-qti-ubuntu/conf/distro/qti-distro-ubuntu-fullstack-debug.conf</li>
<li>yocto poky项目 —-&gt; meta-poky/conf/distro/poky.conf</li>
</ul>
</li>
</ul>
<p>下面为何3个layer的扩展框图：</p>
<p><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Metadata.JPG" alt="Yocto_Metadata"></p>
<p>如图所示，一般来说，所有的层都有一个类似的结构。它们都包含一个许可文件（例如：COPYING.MIT），一个README文件一个配置目录，以及配方目录。<br>在上一小节，我们有说道，Bitbake 根据 build/conf/bblayers.conf文件的内容来确定有哪些layer参与到编译。</p>
<h2 id="2-3-Sources"><a href="#2-3-Sources" class="headerlink" title="2.3 Sources"></a>2.3 Sources</h2><p>构建镜像自然会使用到源码，我们使用Android的编译系统的时候，所有源码都存放在本地，而Yocto编译系统构建系统时使用到的源码主要来自如下3个方面：</p>
<ul>
<li>Upstream Project Releases：以存档文件的形式存在于任何地方（例如，tarball或zip文件）。</li>
<li>Local Projects：本地源码，和之前的Android项目的源码类似，</li>
<li>SCMs(optional)：源控制管理（SCM）的提取器，如Git或Subversion。BitBake内部的do_fetch任务使用SRC_URI变量和参数的前缀来确定正确的获取器模块。</li>
</ul>
<p>下图是对源文件区域的工作流程图<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Sources.JPG" alt="Yocto_Sources"></p>
<h2 id="2-4-Package-Feeds"><a href="#2-4-Package-Feeds" class="headerlink" title="2.4 Package Feeds"></a>2.4 Package Feeds</h2><p>Package Feeds 是构建过程中的一个中间步骤，构建系统用来临时存储包的目录是由变量的组合和使用中的特定包管理器决定的。<br>同时OpenEmbedded构建系统通过PACKAGE_CLASSES变量来指定package的类型，并且在将包放入Package Feeds中之前会使用insane类来验证它们。</p>
<p><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Package_Feeds.JPG" alt="Yocto_Package_Feeds"></p>
<ul>
<li>DEPLOY_DIR: 定义为构建目录中的tmp/deploy。</li>
<li>DEPLOY<em>DIR</em>*: 根据package的类型不同，分别为DEPLOY_DIR_RPM, DEPLOY_DIR_IPK, DEPLOY_DIR_DEB<ul>
<li>DEPLOY_DIR_RPM = “${DEPLOY_DIR}/rpm”</li>
<li>DEPLOY_DIR_IPK = “${DEPLOY_DIR}/ipk”</li>
<li>DEPLOY_DIR_DEB = “${DEPLOY_DIR}/deb”</li>
</ul>
</li>
<li>PACKAGE_ARCH:定义了特定于架构的子文件夹。例如，软件包可以存在于i586或qemux86架构下。</li>
</ul>
<h2 id="2-5-BitBake-Tool"><a href="#2-5-BitBake-Tool" class="headerlink" title="2.5 BitBake Tool"></a>2.5 BitBake Tool</h2><p>OpenEmbedded构建系统使用BitBake来构建镜像和软件开发工具包（SDK）。在工作流程总图中，蓝色代表Bitbake部分，可以看到，BitBake区域由如下几个功能区组成。</p>
<p><img src="/2021/06/30/Yocto-Build-System-Introduction/yocto_bitbake_tool.JPG" alt="yocto_bitbake_tool.JPG"></p>
<ul>
<li>Source Fetching</li>
<li>Patching</li>
<li>Configuration, Compilation, and Staging</li>
<li>Package Splitting</li>
<li>Image Generation</li>
<li>SDK Generation</li>
<li>Stamp Files and the Rerunning of Tasks</li>
<li>Setscene Tasks and Shared State</li>
</ul>
<h3 id="2-5-1Source-Fetching"><a href="#2-5-1Source-Fetching" class="headerlink" title="2.5.1Source Fetching"></a>2.5.1Source Fetching</h3><p>构建 recipe 的第一个阶段是获取和解压源代码。</p>
<ul>
<li>do_fetch：获取源文件</li>
<li>do_unpack解压源文件到构建目录。</li>
</ul>
<p>详细框图如下：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Source_Fetching.JPG" alt="Yocto_Source_Fetching"></p>
<p>注：<br>对于每个本地文件（e.g. file://）, OpenEmbedded构建系统为 recipe 提取文件的 checksum，并将该 checksum 插入do_fetch任务的签名中。如果任何本地文件被修改，do_fetch任务和所有依赖它的任务将被重新执行。</p>
<p>每个配方在构建目录中都有一个区域，用来存放已解压的源代码。S变量指向配方解压后的源代码的这个区域。</p>
<p>其中涉及到如下宏定义：</p>
<ul>
<li>TMPDIR：基础目录，OpenEmbedded构建系统在构建过程中执行其所有工作。默认的基础目录是tmp目录。</li>
<li>PACKAGE_ARCH。构建软件包的架构。根据包或包的最终目的地（即机器架构、构建主机、SDK或特定机器），PACKAGE_ARCH会有所不同。详情请参见变量的描述。</li>
<li>TARGET_OS：目标设备的操作系统。一个典型的值是 “linux”（例如：”qemux86-poky-linux”）。</li>
<li>PN。用于构建软件包的配方的名称。这个变量可以有多种含义。然而，当在输入文件的上下文中使用时，PN代表配方的名称。</li>
<li>WORKDIR：OpenEmbedded构建系统构建配方的位置（即进行创建软件包的工作的位置）。</li>
<li>PV：用于构建软件包的配方的版本。</li>
<li>PR：用于构建软件包的配方的修订版。</li>
<li>S: 包含给定配方的未打包的源文件。</li>
<li>BPN。用于建立软件包的配方的名称。BPN变量是PN变量的一个版本，但去掉了常见的前缀和后缀。</li>
<li>PV：用于构建软件包的配方的版本。</li>
</ul>
<p>注意：<br>在前面的图中，注意到有两个样本层次：一个是基于包架构的（即PACKAGE_ARCH），一个是基于机器的（即MACHINE）。底层结构是相同的。区别在于OpenEmbedded构建系统使用什么作为构建目标（如一般架构、构建主机、SDK或特定机器）。</p>
<h3 id="2-5-2-Patching"><a href="#2-5-2-Patching" class="headerlink" title="2.5.2 Patching"></a>2.5.2 Patching</h3><p>一旦获取了源代码并解压，BitBake就会定位补丁文件并将其应用于源文件，详细框图如下：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Patching.JPG" alt="Yocto_Patching"></p>
<p>do_patch任务使用配方的SRC_URI语句和FILESPATH变量来定位适用的补丁文件。FILESPATH 变量定义了构建系统用来搜索补丁文件的默认目录集。一旦找到，补丁就会应用于配方的源文件，这些源文件位于S目录下。</p>
<h3 id="2-5-3-Configuration-Compilation-and-Staging"><a href="#2-5-3-Configuration-Compilation-and-Staging" class="headerlink" title="2.5.3 Configuration, Compilation, and Staging"></a>2.5.3 Configuration, Compilation, and Staging</h3><p>源代码打完补丁后，BitBake执行配置和编译源代码的任务。编译完成后，文件被复制到一个保存区（staged），准备打包。</p>
<p><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Configuration_Compilation_and_Staging.JPG" alt="Yocto_Configuration_Compilation_and_Staging"></p>
<p>构建过程由以下任务组成：</p>
<ul>
<li>do_prepare_recipe_sysroot：这项任务在 ${WORKDIR} 中设置了两个系统根（即 recipe-sysroot 和 recipe-sysroot-native）</li>
<li>do_configure: 为构建中的软件 enable/disalbe 任何 build-time 和配置选项，从而来配置源。</li>
<li>do_compile。一旦配置任务得到满足，BitBake会使用do_compile任务编译源代码。编译发生在B变量所指向的目录中。请注意，B目录默认与S目录相同。</li>
<li>do_install: 编译完成后，BitBake执行do_install任务。这个任务从B目录复制文件，并把它们放在由D变量指向的保留区中。稍后会使用这个保留目录中的文件进行打包。</li>
</ul>
<h3 id="2-5-4-Package-Splitting"><a href="#2-5-4-Package-Splitting" class="headerlink" title="2.5.4 Package Splitting"></a>2.5.4 Package Splitting</h3><p>在源代码被配置、编译和 staged 后，the build system analyzes the results and splits the output into packages。<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Package_Splitting.JPG" alt="Yocto_Package_Splitting"></p>
<ul>
<li>do_package 和 do_packagedata 任务结合起来，分析在D目录中发现的文件，并根据可用的包和文件将它们分成子集。</li>
<li>do_packagedata 任务根据分析结果创建包的元数据，以便构建系统能够生成最终的包。</li>
<li>do_populate_sysroot 任务将 do_install 任务所安装的文件子集分阶段（复制）到适当的系统根中。</li>
</ul>
<p>根据正在创建的包的类型（RPM、DEB或IPK），do<em>package_write</em>*任务会创建实际的包，并把它们放在Package Feed区域，也就是${TMPDIR}/deploy。</p>
<h3 id="2-5-5-Image-Generation"><a href="#2-5-5-Image-Generation" class="headerlink" title="2.5.5 Image Generation"></a>2.5.5 Image Generation</h3><p>一旦软件包被拆分并存储在Package Feeds区域，构建系统就会使用BitBake来生成根文件系统镜像。大致流程图如下：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Image_Generation.JPG" alt="Yocto_Image_Generation"></p>
<p>镜像生成过程由几个阶段组成，并依赖于几个任务和变量。</p>
<ul>
<li>do_rootfs 任务为一个镜像创建根文件系统（文件和目录结构）。这个任务使用几个关键变量来帮助创建要实际安装的软件包列表。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMAGE_INSTALL: 列出基本的软件包集，从Package Feeds区进行安装。</span><br><span class="line">package_exclude: 指定不应该被安装到镜像中的软件包。</span><br><span class="line">image_features: 指定要包含在镜像中的特性。大多数这些功能都映射到额外的软件包中进行安装。</span><br><span class="line">package_classes: 指定要使用的软件包后端（例如 RPM、DEB 或 IPK），从而帮助确定在软件包馈送区域内找到软件包的位置。</span><br><span class="line">IMAGE_LINGUAS: 确定安装额外语言支持包的语言。</span><br><span class="line">PACKAGE_INSTALL: 传递给软件包管理器以安装到镜像中的最终软件包列表。</span><br></pre></td></tr></table></figure></li>
<li>do_rootfs任务的最后阶段是处理后期处理。后期处理包括创建一个清单文件和优化。</li>
<li>do_image:在根文件系统建立后，通过do_image任务开始对镜像进行处理</li>
<li>do<em>image</em>*：将所有东西变成一个镜像文件或一组镜像文件，并可以压缩根文件系统镜像以减少镜像的整体大小</li>
<li>do_image_complete：This task completes the image by applying any image post processing as defined through the IMAGE_POSTPROCESS_COMMAND variable. 该变量指定了在构建系统创建最终镜像时输出文件后要调用的函数列表。</li>
</ul>
<h3 id="2-5-6-SDK-Generation"><a href="#2-5-6-SDK-Generation" class="headerlink" title="2.5.6 SDK Generation"></a>2.5.6 SDK Generation</h3><p>OpenEmbedded构建系统使用BitBake来生成标准SDK和可扩展SDK（eSDK）的软件开发工具包（SDK）安装脚本。</p>
<p><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_SDK_Generation.JPG" alt="Yocto_SDK_Generation"></p>
<p>与镜像生成一样，SDK脚本的过程由几个阶段组成，并取决于许多变量。</p>
<ul>
<li>do_populate_sdk任务帮助创建标准的SDK，并处理两个部分：一个目标部分和一个主机部分。目标部分是为目标硬件建立的部分，包括库和头文件。主机部分是SDK中在SDKMACHINE上运行的部分。</li>
<li>do_populate_sdk_ext任务有助于创建可扩展的SDK，它处理主机和目标部分的方式与处理标准SDK的方式不同。对于可扩展的SDK，该任务封装了构建系统，其中包括SDK所需的一切（主机和目标）。</li>
</ul>
<p>无论构建何种类型的SDK，任务都会进行一些清理工作，然后创建交叉开发环境设置脚本和任何需要的配置文件。最后的输出是交叉开发工具链安装脚本（.sh文件），其中包括环境设置脚本。</p>
<h3 id="2-5-7-Stamp-Files-and-the-Rerunning-of-Tasks"><a href="#2-5-7-Stamp-Files-and-the-Rerunning-of-Tasks" class="headerlink" title="2.5.7 Stamp Files and the Rerunning of Tasks"></a>2.5.7 Stamp Files and the Rerunning of Tasks</h3><p>对于每个成功完成的任务，BitBake会在STAMPS_DIR目录下写一个印章文件。Stamp 文件的文件名的开头由STAMP变量决定，文件名的结尾由任务的名称和当前输入的校验值组成。</p>
<p>为了确定一个任务是否需要重新运行，BitBake检查该任务是否存在一个具有匹配输入校验和的Stamp 文件。在这种情况下，任务的输出被认为是存在的并且仍然有效。否则，该任务将被重新运行。</p>
<h3 id="2-5-8-Setscene-Tasks-and-Shared-State"><a href="#2-5-8-Setscene-Tasks-and-Shared-State" class="headerlink" title="2.5.8 Setscene Tasks and Shared State"></a>2.5.8 Setscene Tasks and Shared State</h3><p>略</p>
<h2 id="2-6-Images"><a href="#2-6-Images" class="headerlink" title="2.6 Images"></a>2.6 Images</h2><p>构建系统产生的镜像是根文件系统的压缩形式，可以在目标设备上启动。<br>如下图所示，BitBake的部分产物来构成镜像。<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Images.JPG" alt="Yocto_Images"></p>
<p>如图所示，构建过程将镜像写到tmp/deploy/images/machine/文件夹内的构建目录。这个文件夹包含了预期在目标设备上加载的任何文件。</p>
<ul>
<li>DEPLOY_DIR变量指向部署目录</li>
<li>DEPLOY_DIR_IMAGE变量指向包含当前配置镜像的合适目录。</li>
<li>kernel-image：一个内核二进制文件。KERNEL_IMAGETYPE变量决定了内核镜像文件的命名方案。根据这个变量，该文件可以以各种命名字符串开始。deploy/images/machine目录可以包含机器的多个镜像文件。</li>
<li>root-filesystem-image：目标设备的根文件系统（例如，<em>.ext3或</em>.bz2文件）。IMAGE_FSTYPES变量决定了根文件系统镜像的类型。deploy/images/machine目录可以包含机器的多个根文件系统。</li>
<li>kernel-modules：包含所有为内核建立的模块的压缩包。内核模块压缩包的存在是出于传统的目的，可以通过将MODULE_TARBALL_DEPLOY变量设置为 “0 “来抑制。deploy/images/machine目录可以包含机器的多个内核模块tarballs。</li>
<li>bootloaders：如果适用于目标机器，支持镜像的引导程序。deploy/images/machine目录可以包含该机器的多个引导程序。</li>
<li>symlinks：deploy/images/machine文件夹包含一个符号链接，指向每台机器的最新构建的文件。这些链接对于需要获得每个文件的最新版本的外部脚本可能很有用。</li>
</ul>
<h2 id="2-7-Application-Development-SDK"><a href="#2-7-Application-Development-SDK" class="headerlink" title="2.7 Application Development SDK"></a>2.7 Application Development SDK</h2><p>在总的工作流程图中，标有 “Application Development SDK “的输出代表一个SDK。<br>详情略</p>
<h2 id="2-8-Shared-State-Cache"><a href="#2-8-Shared-State-Cache" class="headerlink" title="2.8 Shared State Cache"></a>2.8 Shared State Cache</h2><p>根据设计，OpenEmbedded构建系统从头开始构建，除非BitBake可以确定部件不需要重新构建。从根本上说，从头开始构建是有吸引力的，因为它意味着所有的部件都是全新构建的，没有可能出现陈旧的数据而导致问题。当开发人员遇到问题时，他们通常会默认回到从头开始构建，这样他们从一开始就有一个已知的状态。</p>
<p>从头开始构建镜像的过程既是一个优势，也是一个劣势。正如上一段提到的，从头开始构建可以确保所有的东西都是最新的，并从已知的状态开始。然而，从头开始构建也需要更长的时间，因为它通常意味着重建那些不一定需要重建的东西。</p>
<p>Yocto项目实现了共享状态代码，支持增量构建。共享状态代码的实现回答了以下问题，这些问题是OpenEmbedded增量构建支持系统中的基本路障。</p>
<p>Q：系统的哪些部分已经改变，哪些部分没有改变？<br>A：构建系统通过创建任务输入的校验和（或签名）来检测给定任务的 “输入 “的变化。如果校验和发生变化，系统就认为输入发生了变化，任务就需要重新运行。</p>
<p>Q：如何删除和替换已经改变的软件片段？<br>A：共享状态（sstate）代码跟踪哪些任务为构建过程增加了哪些输出。这意味着一个特定任务的输出可以被删除、升级或以其他方式操作</p>
<p>Q：当预建的组件可用时，如何使用这些不需要从头开始重建的组件？<br>由第二个问题的解决方案部分解决，假设构建系统可以从远程位置获取sstate对象，如果它们被认为是有效的，就可以安装它们。</p>
<p>本节的其余部分将详细介绍整个增量构建架构、校验和（签名）和共享状态。</p>
<h3 id="2-8-1-Overall-Architecture"><a href="#2-8-1-Overall-Architecture" class="headerlink" title="2.8.1 Overall Architecture"></a>2.8.1 Overall Architecture</h3><p>当确定系统的哪些部分需要被构建时，BitBake以每任务为基础工作，而不是以每配方为基础，因为以任务为基础比以配方为基础更加高效。</p>
<h3 id="2-8-2-Checksums-Signatures"><a href="#2-8-2-Checksums-Signatures" class="headerlink" title="2.8.2 Checksums (Signatures)"></a>2.8.2 Checksums (Signatures)</h3><p>共享状态代码使用校验和，这是一个任务输入的唯一签名，以确定一个任务是否需要再次运行。因为触发重新运行的是任务输入的变化，所以这个过程需要检测一个特定任务的所有输入。</p>
<h3 id="2-8-3-Shared-State"><a href="#2-8-3-Shared-State" class="headerlink" title="2.8.3 Shared State"></a>2.8.3 Shared State</h3><p>略</p>
<h2 id="2-9-Automatically-Added-Runtime-Dependencies"><a href="#2-9-Automatically-Added-Runtime-Dependencies" class="headerlink" title="2.9 Automatically Added Runtime Dependencies"></a>2.9 Automatically Added Runtime Dependencies</h2><p>OpenEmbedded构建系统会自动添加软件包之间的常见类型的运行时依赖关系，这意味着你不需要使用RDEPENDS明确地声明软件包。有三种自动机制（shlibdeps、pcdeps和depchains）分别处理共享库、包配置（pkg-config）模块以及-dev和-dbg包。对于其他类型的运行时依赖关系，你必须手动声明这些依赖关系。<br>详细介绍略</p>
<p>当允许执行某些通常为根用户保留的操作时，一些任务更容易实现（例如do_install、do_package_write<em>、do_rootfs和do_image</em>）。例如，do_install任务可以将已安装文件的UID和GID设置为任意值，这让它受益匪浅。</p>
<p>允许任务执行仅有root权限的操作的一种方法是要求BitBake以root身份运行。然而，这种方法很麻烦，而且有安全问题。实际使用的方法是在一个 “假 “根环境中运行受益于根权限的任务。在这个环境中，任务和它的子进程认为它们是以根用户身份运行的，并看到文件系统的内部一致视图。只要生成最终的输出（例如，一个包或一个镜像）不需要根权限，那么先前的一些步骤在假根环境中运行的事实就不会造成问题。</p>
<p>在假根环境中运行任务的能力被称为 “fakeroot”，它来自于BitBake的关键字/变量标志，要求为一个任务提供假根环境。</p>
<h2 id="2-10-Fakeroot-and-Pseudo"><a href="#2-10-Fakeroot-and-Pseudo" class="headerlink" title="2.10 Fakeroot and Pseudo"></a>2.10 Fakeroot and Pseudo</h2><p>当允许执行某些通常为根用户保留的操作时，一些任务更容易实现（例如do_install、do_package_write<em>、do_rootfs和do_image</em>）。例如，do_install任务可以将已安装文件的UID和GID设置为任意值，这让它受益匪浅。</p>
<p>允许任务执行仅有root权限的操作的一种方法是要求BitBake以root身份运行。然而，这种方法很麻烦，而且有安全问题。实际使用的方法是在一个 “假 “根环境中运行受益于根权限的任务。在这个环境中，任务和它的子进程认为它们是以根用户身份运行的，并看到文件系统的内部一致视图。只要生成最终的输出（例如，一个包或一个镜像）不需要根权限，那么先前的一些步骤在假根环境中运行的事实就不会造成问题。</p>
<p>在假根环境中运行任务的能力被称为 “fakeroot”，它来自于BitBake的关键字/变量标志，要求为一个任务提供假根环境。</p>
<p>在OpenEmbedded构建系统中，实现fakeroot的程序被称为Pseudo。Pseudo通过使用环境变量LD_PRELOAD来重写系统调用，这就造成了以root身份运行的假象。为了跟踪需要root权限的操作所产生的 “假 “文件所有权和权限，Pseudo使用一个SQLite 3数据库。这个数据库存储在${WORKDIR}/pseudo/files.db中，用于各个菜谱。将数据库存储在文件中，而不是存储在内存中，使得任务和构建之间具有持久性，而这是使用fakeroot无法实现的。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<h1 id="3-Yocto-Project组件"><a href="#3-Yocto-Project组件" class="headerlink" title="3. Yocto Project组件"></a>3. Yocto Project组件</h1><p>组成整个Yocto Project的最重要的组件如下：</p>
<ul>
<li>BitBake</li>
<li>Recipes</li>
<li>Configuration Files</li>
<li>Classes</li>
<li>Layers</li>
<li>Append Files</li>
</ul>
<p>下面我们分别来介绍这几个组件。</p>
<h2 id="BitBake"><a href="#BitBake" class="headerlink" title="BitBake"></a>BitBake</h2><p>从根本上说，BitBake是一个通用的任务执行引擎，它允许shell和Python任务有效地并行运行，同时在复杂的任务间依赖性约束下工作。BitBake的主要用户之一，OpenEmbedded，采用这个核心，用面向任务的方法构建嵌入式Linux软件堆栈。</p>
<p>从概念上讲，BitBake在某些方面类似于GNU Make，GNU Make通过 “makefiles “实现其控制，而BitBake使用 “recipes”，但又有很大的不同。</p>
<p>BitBake扩展了像GNU Make这样的简单工具的能力，允许定义更复杂的任务，如组装整个嵌入式Linux发行版。</p>
<p>BitBake通过提供能建立任务的元数据来执行任务。元数据存储在配方（.bb）和相关的配方”附加”（.bbappend）文件、配置（.conf）和底层包括（.inc）文件，以及类（.bbclass）文件中。元数据为BitBake提供了关于运行什么任务以及这些任务之间的依赖关系的指示。</p>
<p>BitBake包括一个获取器库，用于从各种地方获取源代码，如本地文件、源码控制系统或网站。</p>
<p>每个要构建的单元（如一个软件）的指令被称为 “配方 “文件，包含该单元的所有信息（依赖性、源文件位置、校验和、描述等）。</p>
<p>Bitbake的工作流程简易图如下<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Simple_Workflow.png" alt="Yocto_Simple_Workflow"></p>
<p>OE task编译的顺序如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">do_setscene</span><br><span class="line">do_fetch</span><br><span class="line">do_unpack</span><br><span class="line">do_path</span><br><span class="line">do_configure</span><br><span class="line">do_qa_configure</span><br><span class="line">do_compile</span><br><span class="line">do_stage</span><br><span class="line">do_install</span><br><span class="line">do_package</span><br><span class="line">do_populate_staging</span><br><span class="line">do_package_write_deb</span><br><span class="line">do_package_write</span><br><span class="line">do_distribute_sources</span><br><span class="line">do_qa_staging</span><br><span class="line">do_build</span><br><span class="line">do_rebuild</span><br></pre></td></tr></table></figure><br>Note:<br>可以使用如下命令来单独执行某个recipe的task<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitbake &lt;target&gt; -c &lt;task&gt;</span><br></pre></td></tr></table></figure><br>同时可以使用如下命令来显示某个recipe可执行的任务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitbake &lt;target&gt; -c listtasks</span><br></pre></td></tr></table></figure></p>
<h2 id="Recipes"><a href="#Recipes" class="headerlink" title="Recipes"></a>Recipes</h2><p>BitBake配方，以文件扩展名.bb表示，是最基本的元数据文件。这些配方文件为BitBake提供了以下内容。</p>
<ul>
<li>关于软件包的描述性信息（作者、主页、许可证，等等</li>
<li>配方的版本</li>
<li>现有的依赖性（包括构建和运行时的依赖性</li>
<li>源代码的位置以及如何获取它</li>
<li>源代码是否需要任何补丁，在哪里可以找到它们，以及如何应用它们</li>
<li>如何配置和编译源代码</li>
<li>如何将生成的工件组装成一个或多个可安装包</li>
<li>在目标机器上哪里安装所创建的包？</li>
</ul>
<h2 id="Configuration-Files"><a href="#Configuration-Files" class="headerlink" title="Configuration Files"></a>Configuration Files</h2><p>配置文件，用.conf扩展名表示，定义了管理项目构建过程的各种配置变量。<br>这些文件分为几个区域，分别定义机器配置、分布式配置、可能的编译器tuning、一般通用配置和用户配置。</p>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>类文件，用.bbclass扩展名表示，包含在元数据文件之间共享的有用信息。<br>BitBake source tree目前带有一个名为base.bbclass的类元数据文件。<br>你可以在meta/classes/目录中找到这个文件。base.bbclass类文件很特别，因为它总是自动包含在所有配方和类中。<br>这个类包含了标准基本任务的定义，如获取、解包、配置（默认为空）、编译（运行任何存在的Makefile）、安装（默认为空）和打包（默认为空）。这些任务经常被在项目开发过程中添加的其他类所覆盖或扩展。</p>
<h2 id="Layers"><a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2><p>Layer允许你将不同类型的定制内容相互隔离。当你在一个项目上工作时，你可能会发现把所有东西都放在一个层里是很诱人的，但你的元数据越是模块化，就越容易应对未来的变化。</p>
<h2 id="Append-Files"><a href="#Append-Files" class="headerlink" title="Append Files"></a>Append Files</h2><p>附加文件，是具有.bbappend文件扩展名的文件，扩展或覆盖现有配方文件中的信息。</p>
<p>BitBake希望每个附加文件都有一个相应的配方文件。此外，附录文件和相应的配方文件必须使用相同的根文件名。文件名只能在使用的文件类型后缀上有所不同（例如formfactor_0.0.bb和formfactor_0.0.bbappend）。</p>
<p>附加文件中的信息扩展或覆盖了底层的、类似名称的配方文件中的信息。</p>
<p>当你为append文件命名时，你可以使用”%”通配符来允许匹配配方名称。例如，假设你有一个附录文件，命名如下。</p>
<p>busybox_1.21.%.bbappend<br>该附录文件将匹配任何busybox_1.21.x.bb版本的配方。因此，该附录文件将与以下配方名称相匹配。</p>
<p>busybox_1.21.1.bb<br>busybox_1.21.2.bb<br>busybox_1.21.3.bb</p>
<h1 id="4-bitbake-语法"><a href="#4-bitbake-语法" class="headerlink" title="4. bitbake 语法"></a>4. bitbake 语法</h1><p>BitBake文件有自己的语法，这里只是列出常用语法，详细规则请参考官方如下文档：<br><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#syntax-and-operators">3 Syntax and Operators — Bitbake dev documentation (yoctoproject.org)</a></p>
<h2 id="Basic-语法"><a href="#Basic-语法" class="headerlink" title="Basic 语法"></a>Basic 语法</h2><p>本节提供一些基本的语法例子。</p>
<h3 id="1-基本变量设置"><a href="#1-基本变量设置" class="headerlink" title="1. 基本变量设置"></a>1. 基本变量设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置变量 VARIABLE 为 “value”</span><br><span class="line">VARIABLE &#x3D; &quot;value&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用单引号，这样做允许你使用包含双引号字符的值。</span><br><span class="line">VARIABLE &#x3D; &#39;I have a &quot; in my value&#39;</span><br><span class="line"></span><br><span class="line"># 与Bourne shells不同，单引号与双引号在所有其他方面的作用相同。它们不会抑制变量的扩展。</span><br></pre></td></tr></table></figure>
<h3 id="2-Line-Joining"><a href="#2-Line-Joining" class="headerlink" title="2. Line Joining"></a>2. Line Joining</h3><p>在函数之外，BitBake在解析语句之前将任何以反斜杠字符结尾的行与下一行连接起来。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOO &#x3D; &quot;bar \</span><br><span class="line">       baz \</span><br><span class="line">       qaz&quot;</span><br></pre></td></tr></table></figure><br>在连接行时，””字符和它后面的换行符都被删除。因此，FOO的值中没有换行符。</p>
<p>注意，下面示例中FOO的值一致：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOO &#x3D; &quot;barbaz&quot;</span><br><span class="line">FOO &#x3D; &quot;bar\</span><br><span class="line">baz&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-变量名展开"><a href="#3-变量名展开" class="headerlink" title="3. 变量名展开"></a>3. 变量名展开</h3><p>变量可以使用类似于 Bourne shell 中的变量扩展的语法来引用其他变量的内容。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &#x3D; &quot;aval&quot;</span><br><span class="line">B &#x3D; &quot;pre$&#123;A&#125;post&quot;</span><br></pre></td></tr></table></figure><br>A的当前值为”aval”，B的值为”preavalpost”，有2点需要注意</p>
<pre><code>- &quot;=&quot;运算符不会立即展开右侧的变量引用。相反，扩展被推迟到实际使用被分配的变量时进行。其结果取决于被引用变量的当前值，即B的值都会依赖当时A的值。
- 变量扩展时，“&#123;&#125;”不可省略。
</code></pre><h3 id="4-变量的其他赋值方式"><a href="#4-变量的其他赋值方式" class="headerlink" title="4. 变量的其他赋值方式"></a>4. 变量的其他赋值方式</h3><p>a. 设置默认值(?=)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A ?&#x3D;&quot;aval&quot;</span><br></pre></td></tr></table></figure><br>如果在解析这条语句时，A被设置了，那么该变量将保留其值。但是，如果A没有被设置，变量就会被设置为 “aval”。<br>注：”?=”这个赋值是即时的。因此，如果对一个变量存在多个”?=”赋值，那么最终会使用其中的第一个。</p>
<p>b. 设置weak默认值(??=)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A ??&#x3D; &quot;somevalue&quot;</span><br></pre></td></tr></table></figure><br>和”?=”功能相同，只是赋值是在解析过程的最后进行，而不是立即进行。<br>因此，当存在多个”??=”赋值时，将使用最后一个。另外，任何”=”或”?=”赋值都将覆盖用”?=”设置的值。这里有一个例子。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A ??&#x3D; &quot;some value&quot;</span><br><span class="line">A ??&#x3D; &quot;some other value&quot;</span><br></pre></td></tr></table></figure><br>如果在解析上述语句之前设置了A，则该变量保留其值。如果没有设置A，则变量被设置为 “some other value”.</p>
<p>c. 立即变量展开(:=)<br>“:=”操作符的结果是变量的内容被立即展开，而不是在实际使用该变量时。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T &#x3D; &quot;123&quot;</span><br><span class="line">A :&#x3D; &quot;test $&#123;T&#125;&quot;</span><br><span class="line">T &#x3D; &quot;456&quot;</span><br><span class="line">B :&#x3D; &quot;$&#123;T&#125; $&#123;C&#125;&quot;</span><br><span class="line">C &#x3D; &quot;cval&quot;</span><br><span class="line">C :&#x3D; &quot;$&#123;C&#125;append&quot;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，A变量值为 “test 123”，尽管T的最终值是 “456”。<br>变量B最终值为 “456 cvalappend”。这是因为对未定义变量的引用在（即时）扩展过程中被原样保留。<br>这与GNU Make不同，在GNU Make中，未定义的变量会被扩展为零。因为${C}立即扩展为 “cval”，所以变量C的值为 “cvalappend”。</p>
<p>d. 自带空格的Appending(+=)和Prepending(=+)<br>“+=”和”=+”在当前值和新追加的值之间会插入一个空格,操作为即时赋值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B &#x3D; &quot;bval&quot;</span><br><span class="line">B +&#x3D; &quot;additionaldata&quot;</span><br><span class="line">C &#x3D; &quot;cval&quot;</span><br><span class="line">C &#x3D;+ &quot;test&quot;</span><br></pre></td></tr></table></figure><br>变量B值为 “bval additionaldata”，变量C值为 “test cval”。</p>
<p>e. 不带空格的Appending(.=)和Prepending(=.)<br>如果你想在后追加或者前追加变量值，而又不带空格，可以使用”.=” 和 “=.”,操作为即时赋值。<br>B = “bval”<br>B .= “additionaldata”<br>C = “cval”<br>C =. “test”<br>变量B值为 “bvaladditionaldata”，变量C值为 “testcval”。</p>
<p>f. Appending and Prepending (Override Style Syntax)<br>上面的”:=”、”.=”、”=.”、”+=”和”=+”都是即时操作，这里介绍的变量赋值是变量展开时应用，并且不会插入空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B_append &#x3D; &quot; additional data&quot;</span><br><span class="line">C &#x3D; &quot;cval&quot;</span><br><span class="line">C_prepend &#x3D; &quot;additional data &quot;</span><br><span class="line">D &#x3D; &quot;dval&quot;</span><br><span class="line">D_append &#x3D; &quot;additional data&quot;</span><br></pre></td></tr></table></figure>
<p>变量B值为 “bvaladditionaldata” ，变量C值为 “testcval”.</p>
<p>g. Removal (Override Style Syntax)<br>同样，bitbake提供Override Style Syntax来移除某些变量值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOO &#x3D; &quot;123 456 789 123456 123 456 123 456&quot;</span><br><span class="line">FOO_remove &#x3D; &quot;123&quot;</span><br><span class="line">FOO_remove &#x3D; &quot;456&quot;</span><br><span class="line">FOO2 &#x3D; &quot; abc def ghi abcdef abc def abc def def&quot;</span><br><span class="line">FOO2_remove &#x3D; &quot;\</span><br><span class="line">    def \</span><br><span class="line">    abc \</span><br><span class="line">    ghi \</span><br><span class="line">    &quot;</span><br></pre></td></tr></table></figure>
<p>变量FOO变成 “789 123456”，变量FOO2变成 “abcdef”。<br>像”_append “和”_prepend “一样，”_remove “为非即时操作，而是在变量扩展时应用。</p>
<p>h. 解除变量的设置(unset)<br>使用unset来删除变量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除变量DATE</span><br><span class="line">unset DATE</span><br></pre></td></tr></table></figure></p>
<h2 id="共享功能"><a href="#共享功能" class="headerlink" title="共享功能"></a>共享功能</h2><p><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#sharing-functionality">https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#sharing-functionality</a><br>后面抽空补上</p>
<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#functions">https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#functions</a><br>后面抽空补上</p>
<h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><p><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#tasks">https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#tasks</a><br>后面补上</p>
<h1 id="5-How-to-add-the-layer-and-recipe"><a href="#5-How-to-add-the-layer-and-recipe" class="headerlink" title="5. How to add the layer and recipe"></a>5. How to add the layer and recipe</h1><p>meta layer有很多开源的项目，各大厂家有提供自己的meta layer（高通:meta-qcom, TI:meta-ti, Intel：meta-intel ARM:meta-arm 等等），有时候我们可能会使用到一些第三方的meta layer，那么就需要手动添加这些 meta layer,有2种方法，如下：</p>
<h2 id="手动添加第三方-meta-layer"><a href="#手动添加第三方-meta-layer" class="headerlink" title="手动添加第三方 meta layer"></a>手动添加第三方 meta layer</h2><ol>
<li>下载需要的meta layer 到poky目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ git clone git@github.com:meta-qt5&#x2F;meta-qt5.git</span><br></pre></td></tr></table></figure></li>
<li><p>切换 meta-qt5 到合适poky的版本：<br> a.在meta/conf/layer.conf文件中查找如下属性，确定poky版本</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LAYERSERIES_CORENAMES &#x3D; &quot;dunfell&quot; #yocto版本名</span><br></pre></td></tr></table></figure>
<p> b.在master分支中，查看meta-qt5/conf/layer.conf文件内容如下,说明是兼容yocto的当前版本的</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">LAYERSERIES_COMPAT_qt5-layer &#x3D; &quot;dunfell gatesgarth hardknott&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p> c.如果master分支不兼容yocto版本，需要切换为支持当前yocto版本的分支。</p>
</li>
<li><p>添加meta-qt5:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ source oe-init-build-env</span><br><span class="line">...</span><br><span class="line">build$ bitbake-layers add-layer ..&#x2F;meta-qt5</span><br></pre></td></tr></table></figure>
<h2 id="自动添加第三方-meta-layer"><a href="#自动添加第三方-meta-layer" class="headerlink" title="自动添加第三方 meta layer"></a>自动添加第三方 meta layer</h2></li>
</ol>
<p>如下命令会自行在 <a href="http://layers.openembedded.org/layerindex/branch/master/layers/">http://layers.openembedded.org/layerindex/branch/master/layers/</a> 网址中拉取 meta layer并添加该meta layer到项目中。<br>（如果目标meta layer有依赖，该命令会同时添加所依赖的meta layer）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ source oe-init-build-env</span><br><span class="line">build$ bitbake-layers layerindex-fetch meta-qt5</span><br></pre></td></tr></table></figure></p>
<h2 id="创建自己的layer"><a href="#创建自己的layer" class="headerlink" title="创建自己的layer"></a>创建自己的layer</h2><p>对于当前项目中没有合适的meta layer，这种情况我们可能需要新建自己的layer，方法如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ source oe-init-build-env</span><br><span class="line"></span><br><span class="line"># 在上级目录 poky 中创建 meta-test-layer 目录</span><br><span class="line">build$ bitbake-layers create-layer ..&#x2F;meta-test-layer</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line"></span><br><span class="line"># 把 poky&#x2F;meta-test-layer 添加到项目中</span><br><span class="line">build$ bitbake-layers add-layer ..&#x2F;meta-test-layer</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line"></span><br><span class="line"># 查看目前有哪些meta layer</span><br><span class="line">build$ bitbake-layers show-layers</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">layer                 path                                      priority</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">meta                  &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;meta       5</span><br><span class="line">meta-poky             &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;meta-poky  5</span><br><span class="line">meta-yocto-bsp        &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;meta-yocto-bsp  5</span><br><span class="line">meta-test-layer       &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;meta-test-layer  6</span><br><span class="line"></span><br><span class="line"># 查看添加的 meta-test-layer 有如下内容，里面包含了一个示例recipe,名字为example，该recipe仅仅在编译时打印字符串输出</span><br><span class="line">poky$ tree meta-test-layer&#x2F;</span><br><span class="line">meta-test-layer&#x2F;</span><br><span class="line">├── conf</span><br><span class="line">│   └── layer.conf</span><br><span class="line">├── COPYING.MIT</span><br><span class="line">├── README</span><br><span class="line">└── recipes-example</span><br><span class="line">    └── example</span><br><span class="line">        └── example_0.1.bb</span><br></pre></td></tr></table></figure></p>
<h2 id="第一个recipe"><a href="#第一个recipe" class="headerlink" title="第一个recipe"></a>第一个recipe</h2><p>接下来我们将添加一个 hello-world recipe demo，分别使用Makefile，Autotools和Cmake 3种构建方式。<br>首先在 recipes-example 统计目录 新增 recipes-hello-world 目录。</p>
<h3 id="Makefile-方式"><a href="#Makefile-方式" class="headerlink" title="Makefile 方式"></a>Makefile 方式</h3><ol>
<li><p>构造demo源码:hello-world.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写相应的 Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TARGET = hello-world-makefile-bin</span><br><span class="line">all := <span class="variable">$(TARGET)</span></span><br><span class="line">CFLAGS ?= -Wall -O</span><br><span class="line"></span><br><span class="line">OBJS = hello-world.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        <span class="variable">$(RM)</span> <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: all clean</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>3.编译hello-world-makefile.bb文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SUMMARY = <span class="string">&quot;helloworld of makefile recipe&quot;</span></span><br><span class="line">DESCRIPTION = <span class="string">&quot;My hello world application&quot;</span></span><br><span class="line">LICENSE = <span class="string">&quot;CLOSED&quot;</span></span><br><span class="line"></span><br><span class="line">FILESEXTRAPATHS_prepend := <span class="string">&quot;$&#123;THISDIR&#125;:&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定源文件路径</span></span><br><span class="line">SRC_URI = <span class="string">&quot;file://source-makefile \</span></span><br><span class="line"><span class="string">           &quot;</span></span><br><span class="line"><span class="comment"># 构建目录中解压后的配方源代码所在的位置</span></span><br><span class="line">S = <span class="string">&quot;$&#123;WORKDIR&#125;/source-makefile/&quot;</span></span><br><span class="line"></span><br><span class="line">CFLAGS_append = <span class="string">&quot;-Wall -O -g&quot;</span></span><br><span class="line"></span><br><span class="line">EXTRA_OEMAKE = <span class="string">&quot;&#x27;CC=$&#123;CC&#125;&#x27; &#x27;CFLAGS=$&#123;CFLAGS&#125;&#x27;&quot;</span></span><br><span class="line">EXTRA_OEMAKE_append = <span class="string">&quot; &#x27;LDFLAGS=$&#123;LDFLAGS&#125;&#x27;&quot;</span></span><br><span class="line">EXTRA_OEMAKE_append = <span class="string">&quot; &#x27;DESTDIR=$&#123;D&#125;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">do_compile() &#123;</span><br><span class="line">    oe_runmake</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do_install () &#123;</span><br><span class="line">    install -d $&#123;D&#125;$&#123;bindir&#125;/</span><br><span class="line">    install -m 0755 $&#123;S&#125;/hello-world-makefile-bin $&#123;D&#125;$&#123;bindir&#125;/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FILES_$&#123;PN&#125; = <span class="string">&quot;$&#123;bindir&#125;/&quot;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>构建目录结构，可以看到我们在meta-test-layer中，我们添加了recipes-hello-world目录，在其中新添加了 hello-world-makefile 配方<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">poky$ tree meta-test-layer/recipes-hello-world/</span><br><span class="line">meta-test-layer/recipes-hello-world/</span><br><span class="line">└── hello-world-makefile</span><br><span class="line">    ├── hello-world-makefile.bb</span><br><span class="line">    └── source-makefile</span><br><span class="line">        ├── hello-world.c</span><br><span class="line">        └── Makefile</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> directories, <span class="number">3</span> files</span><br></pre></td></tr></table></figure></li>
<li>最后执行如下命令来编译 hello-world-makefile 配方。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">poky$ source oe-init-build-env</span><br><span class="line">poky/build$ bitbake hello-world-makefile</span><br></pre></td></tr></table></figure></li>
<li>最后我们来看下在build目录下，生成了哪些内容。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.b</span>uild/sstate-cache目录，为共享状态缓存，编译后出出现很多如下文件</span><br><span class="line">build/sstate-cache/<span class="number">8b</span>/<span class="number">2</span>a/sstate:hello-world-makefile:core2<span class="number">-64</span>-poky-linux:<span class="number">1.0</span>:r0:core2<span class="number">-64</span>:<span class="number">3</span>:<span class="number">8b</span>2ad563f4d36563ec534b32d33870d0f563d6bd0584a09eedb83da339c763d0_populate_sysroot.tgz.siginfo</span><br><span class="line"></span><br><span class="line"><span class="number">2.b</span>uild/tmp/sysroots-components目录，该目录包含的内容是任务 do_prepare_recipe_sysroot 把在DEPENDS列出来的recipe link 或者 copy 到 recipe-specific sysroot</span><br><span class="line">build/tmp/sysroots-components/core2<span class="number">-64</span>/hello-world-makefile</span><br><span class="line">build/tmp/sysroots-components/core2<span class="number">-64</span>/hello-world-makefile/sysroot-providers/hello-world-makefile</span><br><span class="line"></span><br><span class="line"><span class="number">3.b</span>uild/tmp/stamps目录，bitbake通过该目录对应的文件来判断任务是否修改，从而在编译时重新编译该任务</span><br><span class="line">build/tmp/stamps/core2<span class="number">-64</span>-poky-linux/hello-world-makefile</span><br><span class="line"></span><br><span class="line"><span class="number">4.b</span>uild/tmp/sstate-control/目录：OpenEmbedded构建系统使用这个目录来保存共享状态清单文件</span><br><span class="line">build/tmp/sstate-control/manifest-core2<span class="number">-64</span>-hello-world-makefile.package_qa</span><br><span class="line">build/tmp/sstate-control/manifest-core2<span class="number">-64</span>-hello-world-makefile.deploy_source_date_epoch</span><br><span class="line">build/tmp/sstate-control/manifest-core2<span class="number">-64</span>-hello-world-makefile.populate_sysroot</span><br><span class="line">build/tmp/sstate-control/manifest-core2<span class="number">-64</span>-hello-world-makefile.package_write_rpm</span><br><span class="line">build/tmp/sstate-control/manifest-core2<span class="number">-64</span>-hello-world-makefile.populate_lic</span><br><span class="line">build/tmp/sstate-control/manifest-core2<span class="number">-64</span>-hello-world-makefile.package</span><br><span class="line">build/tmp/sstate-control/manifest-qemux86_64-hello-world-makefile.packagedata</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>$&#123;WORKDIR&#125;目录，OpenEmbedded构建系统构建配方的工作目录的路径名称，</span><br><span class="line"># 具体路径为 $&#123;TMPDIR&#125;/work/$&#123;MULTIMACH_TARGET_SYS&#125;/$&#123;PN&#125;/$&#123;EXTENDPE&#125;$&#123;PV&#125;-$&#123;PR&#125;。</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>在bb文件有指定：S = <span class="string">&quot;$&#123;WORKDIR&#125;/source-makefile/&quot;</span></span><br><span class="line">构建目录中解压后的配方源代码所在的位置，hello-world-makefile-bin也生成在该目录</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/source-makefile/hello-world-makefile-bin</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>$&#123;WORKDIR&#125;/package目录，do_package任务的输出，该输出还没有被分割为独立的package</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/package/usr/src/debug/hello-world-makefile</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/package/usr/bin/hello-world-makefile-bin</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/package/usr/bin/.debug/hello-world-makefile-bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>$&#123;WORKDIR&#125;/package目录,do_package任务的输出，该输出已经被分割为独立的package</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile/usr/bin/hello-world-makefile-bin</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-src</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-src/usr/src/debug/hello-world-makefile</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-doc</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-locale</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-dev</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-staticdev</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile.shlibdeps</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-dbg</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/packages-split/hello-world-makefile-dbg/usr/bin/.debug/hello-world-makefile-bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>$&#123;WORKDIR&#125;/pkgdata目录,指向do_package任务保存软件包元数据的临时工作区。</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/hello-world-makefile</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime-reverse/hello-world-makefile</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime-reverse/hello-world-makefile-src</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime-reverse/hello-world-makefile-dev</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime-reverse/hello-world-makefile-dbg</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-dbg.packaged</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-src</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile.packaged</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-doc</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-locale</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-dev</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-staticdev</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-dev.packaged</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-src.packaged</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/pkgdata/runtime/hello-world-makefile-dbg</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>$&#123;WORKDIR&#125;/image目录,包含do_install任务的输出，与该任务中的$&#123;D&#125;变量相对应。</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/image/usr/bin/hello-world-makefile-bin</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>$&#123;WORKDIR&#125;/sysroot-destdirmulu ,包含do_populate_sysroot任务的输出。</span><br><span class="line">build/tmp/work/core2<span class="number">-64</span>-poky-linux/hello-world-makefile/<span class="number">1.0</span>-r0/sysroot-destdir/sysroot-providers/hello-world-makefile</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>DEPLOY_DIR变量指向build/tmp/deploy/目录，此目录包含OpenEmbedded构建过程中的任何 <span class="string">&quot;最终结果 &quot;</span>输出。</span><br><span class="line">build/tmp/deploy/rpm/这个目录接收由构建过程产生的任何 .rpm 包。这些软件包会被分类到不同架构类型的feeds中。</span><br><span class="line">build/tmp/deploy/rpm/core2_64/hello-world-makefile-src<span class="number">-1.0</span>-r0.core2_64.rpm</span><br><span class="line">build/tmp/deploy/rpm/core2_64/hello-world-makefile<span class="number">-1.0</span>-r0.core2_64.rpm</span><br><span class="line">build/tmp/deploy/rpm/core2_64/hello-world-makefile-dev<span class="number">-1.0</span>-r0.core2_64.rpm</span><br><span class="line">build/tmp/deploy/rpm/core2_64/hello-world-makefile-dbg<span class="number">-1.0</span>-r0.core2_64.rpm</span><br><span class="line"></span><br><span class="line">对其中一个rpm进行解压，目录结构如下,可以看到生成产物/usr/bin/hello-world-makefile-bin.</span><br><span class="line">├── hello-world-makefile<span class="number">-1.0</span>-r0.core2_64</span><br><span class="line">│   └── usr</span><br><span class="line">│       └── bin</span><br><span class="line">│           └── hello-world-makefile-bin</span><br><span class="line">└── hello-world-makefile<span class="number">-1.0</span>-r0.core2_64.cpio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span>$&#123;STAGING_DIR_HOST&#125;/pkgdata目录</span><br><span class="line">指向一个共享的、全局状态的目录，该目录保存着打包过程中产生的数据。在打包过程中，do_packagedata任务为每个配方打包数据并将其安装到这个临时的共享区域。</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/hello-world-makefile</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime-reverse/hello-world-makefile</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime-reverse/hello-world-makefile-src</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime-reverse/hello-world-makefile-dev</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime-reverse/hello-world-makefile-dbg</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-src</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-src.packaged</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-dbg</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-dbg.packaged</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-staticdev</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-dev</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-dev.packaged</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-doc</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile-locale</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile</span><br><span class="line">build/tmp/pkgdata/qemux86<span class="number">-64</span>/runtime/hello-world-makefile.packaged</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Autotools-方式"><a href="#Autotools-方式" class="headerlink" title="Autotools 方式"></a>Autotools 方式</h3><ol>
<li>构造demo源码:hello-world.c<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello World with using autotools \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>编写configure.ac和编写Makefile.am文件<br>configure.ac:<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#                                               -*- Autoconf -*-</span><br><span class="line"># Process <span class="keyword">this</span> file with autoconf to produce a configure script.</span><br><span class="line"></span><br><span class="line">AC_PREREQ([<span class="number">2.69</span>])</span><br><span class="line">#AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])</span><br><span class="line">AC_INIT(hello-world-autotoos-bin, <span class="number">1.0</span>)</span><br><span class="line">AM_INIT_AUTOMAKE(hello-world-autotoos-bin, <span class="number">1.0</span>)</span><br><span class="line">AC_CONFIG_SRCDIR([hello-world.c])</span><br><span class="line">AC_CONFIG_HEADERS([config.h])</span><br><span class="line"></span><br><span class="line"># Checks <span class="keyword">for</span> programs.</span><br><span class="line">AC_PROG_CC</span><br><span class="line"></span><br><span class="line"># Checks <span class="keyword">for</span> libraries.</span><br><span class="line"></span><br><span class="line"># Checks <span class="keyword">for</span> header files.</span><br><span class="line">AC_CHECK_HEADERS([stdlib.h])</span><br><span class="line"></span><br><span class="line"># Checks <span class="keyword">for</span> typedefs, structures, <span class="keyword">and</span> compiler characteristics.</span><br><span class="line"></span><br><span class="line"># Checks <span class="keyword">for</span> library functions.</span><br><span class="line">AC_CONFIG_FILES([Makefile])</span><br><span class="line">AC_OUTPUT</span><br><span class="line"></span><br></pre></td></tr></table></figure>
Makefile.am:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AUTOMAKE_OPTIONS&#x3D;foreign</span><br><span class="line">bin_PROGRAMS&#x3D; hello-world-autotools-bin</span><br><span class="line">hello_world_autotools_bin_SOURCES&#x3D; hello-world.c</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们一般使用autotools配套的如下工具，来一步一步的生成配置文件和Makefile，</span><br><span class="line">autoscan,aclocal,autoconf,autoheader,automake .&#x2F;configure</span><br><span class="line">验证Makefile没有问题后，删除掉其中的很多中间配置文件，只需要留configure.ac 和 Makefile.am即可。</span><br></pre></td></tr></table></figure></p>
<p>3.编译hello-world-autotools.bb文件<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SUMMARY = <span class="string">&quot;helloworld of autotools recipe&quot;</span></span><br><span class="line">DESCRIPTION = <span class="string">&quot;My hello world application with using the autotools&quot;</span></span><br><span class="line">LICENSE = <span class="string">&quot;CLOSED&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inherit autotools</span><br><span class="line">FILESEXTRAPATHS_prepend := <span class="string">&quot;$&#123;THISDIR&#125;:&quot;</span></span><br><span class="line"></span><br><span class="line"># 指定源文件路径</span><br><span class="line">SRC_URI = <span class="string">&quot;file://source-autotools \</span></span><br><span class="line"><span class="string">           &quot;</span></span><br><span class="line"># 构建目录中解压后的配方源代码所在的位置</span><br><span class="line">S = <span class="string">&quot;$&#123;WORKDIR&#125;/source-autotools&quot;</span></span><br><span class="line"></span><br><span class="line"># autotools class自动执行了如下类似的操作，并且生成的bin并没有存放在$&#123;S&#125;中</span><br><span class="line"># do_install_append () &#123;</span><br><span class="line">#     install -d $&#123;D&#125;$&#123;bindir&#125;/</span><br><span class="line">#     install -m <span class="number">0755</span> $&#123;S&#125;/hello-world-autotools-bin $&#123;D&#125;$&#123;bindir&#125;/</span><br><span class="line"></span><br><span class="line"># &#125;</span><br><span class="line"></span><br><span class="line">FILES_$&#123;PN&#125; = <span class="string">&quot;$&#123;bindir&#125;/&quot;</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>构建目录结构，我们在recipes-hello-world目录下，即hello-world-makefile 配方的同级目录，添加了hello-world-autotools 配方<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ tree meta-test-layer&#x2F;recipes-hello-world&#x2F;</span><br><span class="line">meta-test-layer&#x2F;recipes-hello-world&#x2F;</span><br><span class="line">├── hello-world-autotools</span><br><span class="line">│   ├── hello-world-autotools.bb</span><br><span class="line">│   └── source-autotools</span><br><span class="line">│       ├── configure.ac</span><br><span class="line">│       ├── hello-world.c</span><br><span class="line">│       └── Makefile.am</span><br><span class="line">└── hello-world-makefile</span><br><span class="line"></span><br><span class="line">4 directories, 7 files</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>最后执行如下命令来编译 hello-world-autotools 配方，可以在build看到，生成的内容和hello-world-makefile 配方基本一直，这里不展开说明了。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ source oe-init-build-env</span><br><span class="line">poky&#x2F;build$ bitbake hello-world-makefile</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Cmake方式"><a href="#Cmake方式" class="headerlink" title="Cmake方式"></a>Cmake方式</h3><ol>
<li>构造demo源码:hello-world.c<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello World with using cmake \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>编写 CMakeLists.txt 文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include(GNUInstallDirs)</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.5.1)</span><br><span class="line"></span><br><span class="line">project(hello_world_cmake C)</span><br><span class="line"></span><br><span class="line">add_executable (hello-world-cmake-bin &quot;hello-world.c&quot;)</span><br><span class="line"></span><br><span class="line">INSTALL(TARGETS hello-world-cmake-bin</span><br><span class="line">  RUNTIME DESTINATION $&#123;CMAKE_INSTALL_BINDIR&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>执行cmake &amp; make 生成 hello-world-cmake-bin 并测试pass，删除测试相关文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hello-world-cmake/source-cmake$ mkdir build/</span><br><span class="line">hello-world-cmake/source-cmake$ cd build/</span><br><span class="line">hello-world-cmake/source-cmake/build$ cmake ../</span><br><span class="line">-- The C compiler identification is GNU <span class="number">7.5</span><span class="number">.0</span></span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc</span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/user/host/code/poky/poky/meta-test-layer/recipes-hello-world/hello-world-cmake/source-cmake/build</span><br><span class="line">hello-world-cmake/source-cmake/build$ make</span><br><span class="line">Scanning dependencies of target hello-world-cmake-bin</span><br><span class="line">[ <span class="number">50</span>%] Building C object CMakeFiles/hello-world-cmake-bin.dir/hello-world.c.o</span><br><span class="line">[<span class="number">100</span>%] Linking C executable hello-world-cmake-bin</span><br><span class="line">[<span class="number">100</span>%] Built target hello-world-cmake-bin</span><br><span class="line">hello-world-cmake/source-cmake/build$ ./hello-world-cmake-bin</span><br><span class="line">Hello World with <span class="keyword">using</span> cmake</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译hello-world-cmake.bb文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SUMMARY = <span class="string">&quot;helloworld of cmake recipe&quot;</span></span><br><span class="line">DESCRIPTION = <span class="string">&quot;My hello world application with using the cmake&quot;</span></span><br><span class="line">LICENSE = <span class="string">&quot;CLOSED&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inherit cmake</span><br><span class="line">FILESEXTRAPATHS_prepend := <span class="string">&quot;$&#123;THISDIR&#125;:&quot;</span></span><br><span class="line"></span><br><span class="line"># 指定源文件路径</span><br><span class="line">SRC_URI = <span class="string">&quot;file://source-cmake \</span></span><br><span class="line"><span class="string">           &quot;</span></span><br><span class="line"># 构建目录中解压后的配方源代码所在的位置</span><br><span class="line">S = <span class="string">&quot;$&#123;WORKDIR&#125;/source-cmake&quot;</span></span><br><span class="line"></span><br><span class="line"># cmake class自动执行了如下类似的操作，并且生成的bin并没有在$&#123;S&#125;中</span><br><span class="line"># do_install_append () &#123;</span><br><span class="line">#     install -d $&#123;D&#125;$&#123;bindir&#125;/</span><br><span class="line">#     install -m <span class="number">0755</span> $&#123;S&#125;/hello-world-cmake-bin $&#123;D&#125;$&#123;bindir&#125;/</span><br><span class="line"></span><br><span class="line"># &#125;</span><br><span class="line"></span><br><span class="line">FILES_$&#123;PN&#125; = <span class="string">&quot;$&#123;bindir&#125;/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>构建目录结构，我们在recipes-hello-world目录下，即hello-world-makefile 配方的同级目录，添加了hello-world-cmake 配方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;poky$  tree meta-test-layer&#x2F;recipes-hello-world&#x2F;</span><br><span class="line">meta-test-layer&#x2F;recipes-hello-world&#x2F;</span><br><span class="line">├── hello-world-autotools</span><br><span class="line">│   ├── hello-world-autotools.bb</span><br><span class="line">│   └── source-autotools</span><br><span class="line">│       ├── configure.ac</span><br><span class="line">│       ├── hello-world.c</span><br><span class="line">│       └── Makefile.am</span><br><span class="line">├── hello-world-cmake</span><br><span class="line">└── hello-world-makefile</span><br><span class="line"></span><br><span class="line">6 directories, 11 files</span><br></pre></td></tr></table></figure></li>
<li>最后执行如下命令来编译 hello-world-cmake 配方，可以在build看到，生成的内容和hello-world-makefile 配方基本一直，这里不展开说明了。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky$ source oe-init-build-env</span><br><span class="line">poky&#x2F;build$ bitbake hello-world-cmake</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>常用全局变量</strong></p>
<ol>
<li>SRC_URI<br>源文件列表 - 本地或远程。 此变量告诉 OpenEmbedded 构建系统在哪里拉取源文件以及如何拉取它们。</li>
</ol>
<p>下面列出2个最最最常用的 URI protocols：</p>
<ul>
<li><p>file:// —-&gt; 从本地机器获取文件，通常是元数据附带的文件（例如补丁文件）。 该路径是相对于 FILESPATH  变量的。 因此，构建系统按顺序从以下目录中搜索，这些目录假定为配方文件 (.bb) 或附加文件 (.bbappend) 所在目录的子目录：</p>
<ul>
<li><p>${BPN}：没有任何特殊后缀或版本号的基本配方名称。</p>
</li>
<li><p>${BP}：即${BPN}-${PV}. 基本配方名称和版本，但没有任何特殊的包名称后缀。</p>
</li>
<li><p>files：与与配方或附加文件同一级目录下面的Files目录</p>
</li>
</ul>
</li>
<li><p>git:// —-&gt; 从 Git 版本控制存储库中获取文件。</p>
</li>
</ul>
<ol>
<li>recipe 相关</li>
</ol>
<ul>
<li>PN：配方名称或者生成的包的名称<ul>
<li>1.指的是recipe最基本的名称，如果配方被命名为expat_2.0.1.bb，那么PN的默认值将是 “expat”。</li>
<li>2.指的是OpenEmbedded构建系统创建或生产的文件中的软件包名称。</li>
</ul>
</li>
<li>PV：配方的版本，版本通常是从配方的文件名中提取的。如果配方名为expat_2.0.1.bb，那么PV的默认值将是 “2.0.1”</li>
<li>BPN：PN变量的一个版本，删除了常见的前缀和后缀，例如nativesdk-，-cross，-native等等。</li>
<li>BP：基本配方名称和版本，但没有任何特殊的配方名称后缀（即-native，lib64-，等等）。BP由以下部分组成。${BPN}-${PV}</li>
</ul>
<ol>
<li>TOPDIR<br>顶层的构建目录。当你使用oe-init-build-env初始化你的构建环境时，BitBake自动设置这个变量。<br>Epoch 项目 apps_proc/build-qti-distro-ubuntu-fullstack-debug/<br>Poky开源项目 poky/build/</li>
</ol>
<ol>
<li><p>THISDIR<br>BitBake目前正在解析的文件所在的目录。不要手动设置这个变量。</p>
</li>
<li><p>TMPDIR<br>这个变量是OpenEmbedded构建系统用于所有构建输出和中间文件（除了共享状态缓存）的基础目录。默认情况下，TMPDIR变量指向Source Directory的tmp目录<br>apps_proc/build-qti-distro-ubuntu-fullstack-debug/tmp-glibc/</p>
</li>
<li><p>WORKDIR<br>OpenEmbedded构建系统构建配方的工作目录的路径名称。这个目录位于TMPDIR目录结构中，并且是特定于正在构建的配方和正在构建的系统。</p>
</li>
</ol>
<p>WORKDIR目录定义如下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;TMPDIR&#125;&#x2F;work&#x2F;$&#123;MULTIMACH_TARGET_SYS&#125;&#x2F;$&#123;PN&#125;&#x2F;$&#123;EXTENDPE&#125;$&#123;PV&#125;-$&#123;PR&#125;。</span><br></pre></td></tr></table></figure></p>
<p>实际的目录取决于如下宏定义。</p>
<p>TMPDIR：top-levle的构建输出目录<br>MULTIMACH_TARGET_SYS: 目标系统标识符，即对应的机器类型<br>PN：配方名称<br>EXTENDPE:  The epoch - (if PE is not specified, which is usually the case for most recipes, then EXTENDPE is blank)<br>PV：配方版本<br>PR。配方修订版<br>作为一个例子，假设源目录的顶级文件夹名为poky，默认的构建目录为poky/build，目标系统为qemux86-poky-linux机器。此外，假设你的配方被命名为foo_1.3.0-r0.bb。在这种情况下，构建系统用来构建软件包的工作目录将是如下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky&#x2F;build&#x2F;tmp&#x2F;work&#x2F;qemux86-poky-linux&#x2F;foo&#x2F;1.3.0-r0</span><br></pre></td></tr></table></figure></p>
<ol>
<li>S<br>构建目录中未打包的配方源代码所在的位置。默认情况下，该目录为${WORKDIR}/${BPN}-${PV}，其中${BPN}是基本配方名称，${PV}是配方版本。如果源码压缩包将代码提取到${BPN}-${PV}以外的目录，或者源码是从SCM（如Git或Subversion）获取的，那么你必须在配方中设置S，以便OpenEmbedded构建系统知道在哪里找到解压后的源码。</li>
</ol>
<p>作为一个例子，假设 Source Directory 顶层为poky，Build irectory目录在poky/build，配方为db。在这种情况下，构建系统用来保存db的解压配方的工作目录是这样的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky&#x2F;build&#x2F;tmp&#x2F;work&#x2F;qemux86-poky-linux&#x2F;db&#x2F;5.1.19-r3&#x2F;db-5.1.19</span><br></pre></td></tr></table></figure></p>
<p>解压后的源代码位于db-5.1.19文件夹中。</p>
<p>接下来的例子假设了一个 Git 仓库。默认情况下，Git 仓库在 do_fetch 过程中会被克隆到 ${WORKDIR}/git。由于这个路径与S的默认值不同，你必须特别设置，以便能找到源。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SRC_URI &#x3D; &quot;git:&#x2F;&#x2F;path&#x2F;to&#x2F;repo.git&quot;</span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;git&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<ol>
<li>D<br>目标目录。构建目录中组件被do_install任务安装的位置。该位置默认为:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;WORKDIR&#125;&#x2F;image</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="6-devtool-调试的神"><a href="#6-devtool-调试的神" class="headerlink" title="6. devtool 调试的神"></a>6. devtool 调试的神</h1><p>yocto project包含了一些便于我们构建的工具，这里只介绍devtool。</p>
<h3 id="devtool-是什么"><a href="#devtool-是什么" class="headerlink" title="devtool 是什么"></a>devtool 是什么</h3><p>devtool命令行工具提供了许多功能，帮助你构建、测试和打包软件，这个命令与bitbake命令一起使用。<br>我们可以通过如下命令来查看devtool的基本用法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@xxx:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build$ devtool --help</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">usage: devtool [--basepath BASEPATH] [--bbpath BBPATH] [-d] [-q]</span><br><span class="line">               [--color COLOR] [-h]</span><br><span class="line">               &lt;subcommand&gt; ...</span><br><span class="line"></span><br><span class="line">OpenEmbedded development tool</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  --basepath BASEPATH   Base directory of SDK &#x2F; build directory</span><br><span class="line">  --bbpath BBPATH       Explicitly specify the BBPATH, rather than getting it</span><br><span class="line">                        from the metadata</span><br><span class="line">  -d, --debug           Enable debug output</span><br><span class="line">  -q, --quiet           Print only errors</span><br><span class="line">  --color COLOR         Colorize output (where COLOR is auto, always, never)</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line"></span><br><span class="line">subcommands:</span><br><span class="line">  Beginning work on a recipe:</span><br><span class="line">    add                   Add a new recipe</span><br><span class="line">    modify                Modify the source for an existing recipe</span><br><span class="line">    upgrade               Upgrade an existing recipe</span><br><span class="line">  Getting information:</span><br><span class="line">    status                Show workspace status</span><br><span class="line">    search                Search available recipes</span><br><span class="line">    latest-version        Report the latest version of an existing recipe</span><br><span class="line">    check-upgrade-status  Report upgradability for multiple (or all) recipes</span><br><span class="line">  Working on a recipe in the workspace:</span><br><span class="line">    build                 Build a recipe</span><br><span class="line">    rename                Rename a recipe file in the workspace</span><br><span class="line">    edit-recipe           Edit a recipe file</span><br><span class="line">    find-recipe           Find a recipe file</span><br><span class="line">    configure-help        Get help on configure script options</span><br><span class="line">    update-recipe         Apply changes from external source tree to recipe</span><br><span class="line">    reset                 Remove a recipe from your workspace</span><br><span class="line">    finish                Finish working on a recipe in your workspace</span><br><span class="line">  Testing changes on target:</span><br><span class="line">    deploy-target         Deploy recipe output files to live target machine</span><br><span class="line">    undeploy-target       Undeploy recipe output files in live target machine</span><br><span class="line">    build-image           Build image including workspace recipe packages</span><br><span class="line">  Advanced:</span><br><span class="line">    create-workspace      Set up workspace in an alternative location</span><br><span class="line">    extract               Extract the source for an existing recipe</span><br><span class="line">    sync                  Synchronize the source tree for an existing recipe</span><br><span class="line">    import                Import exported tar archive into workspace</span><br><span class="line">    export                Export workspace into a tar archive</span><br><span class="line">    menuconfig            Alter build-time configuration for a recipe</span><br><span class="line">Use devtool &lt;subcommand&gt; --help to get help on a specific command</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>可以看到它的每个功能都有一些子命令，我们通过如下命令来查看子功能的用法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtool sub-command --help</span><br></pre></td></tr></table></figure><br>从如上说明中看到，devtool 工具有如下作用：</p>
<ol>
<li>新建一个recipe或者修改/更新一个存在的recipe</li>
<li>获取recipes或者workspace的相关信息</li>
<li>修改workspace中的recipes</li>
<li>把相关修改点部署到设备验证功能</li>
<li>其他高级功能</li>
</ol>
<p>devtool 在工作时不是直接在项目源码中进行工作，而是都会重新新建一个workspace目录环境，在该目录环境 Layer 中执行新建/修改等操作。</p>
<h3 id="The-Workspace-Layer-Structure"><a href="#The-Workspace-Layer-Structure" class="headerlink" title="The Workspace Layer Structure"></a>The Workspace Layer Structure</h3><p>devtool 使用”Workspace” Layer 来完成构建。 该层并非特定于任何单个 devtool命令，而是整个工具中使用的公共工作区域。</p>
<p>下图显示了工作区结构：<br><img src="/2021/06/30/Yocto-Build-System-Introduction/Yocto_Workspace_Layer_Structure.JPG" alt="Yocto_Workspace_Layer_Structure"></p>
<h3 id="Adding-a-New-Recipe-to-the-Workspace-Layer-本地源码"><a href="#Adding-a-New-Recipe-to-the-Workspace-Layer-本地源码" class="headerlink" title="Adding a New Recipe to the Workspace Layer(本地源码)"></a>Adding a New Recipe to the Workspace Layer(本地源码)</h3><ol>
<li><p>新建 devtool-hello-world 源码，copy的之前hello-world-cmake的源码，目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@d6ae2233aca6:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky$ tree -L 1</span><br><span class="line">.</span><br><span class="line">├── bitbake</span><br><span class="line">├── build</span><br><span class="line">├── contrib</span><br><span class="line">├── devtool-hello-world</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── hello-world.c</span><br><span class="line">├── documentation</span><br><span class="line">├── LICENSE</span><br><span class="line">├── ...</span><br><span class="line">└── scripts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Note：<br>项目源码建议最好添加到~/host/code/poky/poky目录（git rev-parse —show-toplevel输出结果）及子目录下，否则最后使用devtool finish命令时可能无法工作。</p>
</li>
<li><p>使用 devtool 把 devtool-hello-world 添加到workspace Layer<br>使用 devtoo add命令添加新的 recipe 到 workspace Layer时，如果workspace环境目录不存在，则会首先新建该目录，同时需要指定recipe的源码路径, 命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@d6ae2233aca6:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky$ devtool add devtool-hello-world .&#x2F;devtool-hello-world&#x2F;</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">INFO: Creating workspace layer in &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build&#x2F;workspace</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">NOTE: Reconnecting to bitbake server...</span><br><span class="line">NOTE: Retrying server connection (#1)...</span><br><span class="line">NOTE: Reconnecting to bitbake server...</span><br><span class="line">NOTE: Reconnecting to bitbake server...</span><br><span class="line">NOTE: Retrying server connection (#1)...</span><br><span class="line">NOTE: Retrying server connection (#1)...</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">INFO: Recipe &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build&#x2F;workspace&#x2F;recipes&#x2F;devtool-hello-world&#x2F;devtool-hello-world.bb has been automatically created; further editing may be required to make it fully functional</span><br></pre></td></tr></table></figure>
<p>执行命令后的目录结构,可以看到在workspace Layer中已经存在一些基础配置目录以及devtool-hello-world recipe.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@d6ae2233aca6:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky$ tree -L 1</span><br><span class="line">.</span><br><span class="line">├── bitbake</span><br><span class="line">├── build</span><br><span class="line">    └── build</span><br><span class="line">		└── workspace</span><br><span class="line">			├── appends</span><br><span class="line">			│   └── devtool-hello-world.bbappend</span><br><span class="line">			├── conf</span><br><span class="line">			│   └── layer.conf</span><br><span class="line">			├── README</span><br><span class="line">			└── recipes</span><br><span class="line">				└── devtool-hello-world</span><br><span class="line">					└── devtool-hello-world.bb</span><br><span class="line">├── devtool-hello-world</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── hello-world.c</span><br><span class="line">├── documentation</span><br><span class="line">├── ...</span><br><span class="line">└── scripts</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译 devtool-hello-world recipe<br>命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtool build devtool-hello-world</span><br></pre></td></tr></table></figure>
<p>编译完成后，我们找到源码路径，可以看到生成2个软连接，分别指向该recipe的编译log目录和$S目录(${WORKDIR}/${BPN}-${PV}),这样我们可以非常方便地找到对应的生成物。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@d6ae2233aca6:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;devtool-hello-world$ tree</span><br><span class="line">.</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── hello-world.c</span><br><span class="line">├── oe-logs -&gt; &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build&#x2F;tmp&#x2F;work&#x2F;core2-64-poky-linux&#x2F;devtool-hello-world&#x2F;1.0-r0&#x2F;temp</span><br><span class="line">└── oe-workdir -&gt; &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build&#x2F;tmp&#x2F;work&#x2F;core2-64-poky-linux&#x2F;devtool-hello-world&#x2F;1.0-r0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>把新的 recipe 添加到 meta-test-layer<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@d6ae2233aca6:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build$ devtool finish   devtool-hello-world  meta-test-layer</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">NOTE: Reconnecting to bitbake server...</span><br><span class="line">NOTE: Retrying server connection (#1)...</span><br><span class="line">Loading cache: 100% |######################################################################################################################################################################################################| Time: 0:00:00</span><br><span class="line">Loaded 1316 entries from dependency cache.</span><br><span class="line">Parsing recipes: 100% |####################################################################################################################################################################################################| Time: 0:00:00</span><br><span class="line">Parsing of 776 .bb files complete (775 cached, 1 parsed). 1317 targets, 40 skipped, 0 masked, 0 errors.</span><br><span class="line">ERROR: Unable to find initial revision - please specify it with --initial-rev</span><br></pre></td></tr></table></figure>
提示没有找到初始化版本，尝试在 ~/host/code/poky/poky/devtool-hello-world 目录使用git init新建库，并做初始化提交（commit id:6833c8de29441f22c2515bcf1ce8f7f3f79ade29）<br>Note:<br>如果源码本身存在项目的某个git库中，应该不会出现该错误。<br>然后重新执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@d6ae2233aca6:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;devtool-hello-world$ devtool finish --initial-rev 6833c8de29441f22c2515bcf1ce8f7f3f79ade29  devtool-hello-world  meta-test-layer</span><br><span class="line">NOTE: Starting bitbake server...</span><br><span class="line">NOTE: Reconnecting to bitbake server...</span><br><span class="line">NOTE: Retrying server connection (#1)...</span><br><span class="line">Loading cache: 100% |######################################################################################################################################################################################################| Time: 0:00:00</span><br><span class="line">Loaded 1316 entries from dependency cache.</span><br><span class="line">Parsing recipes: 100% |####################################################################################################################################################################################################| Time: 0:00:00</span><br><span class="line">Parsing of 776 .bb files complete (775 cached, 1 parsed). 1317 targets, 40 skipped, 0 masked, 0 errors.</span><br><span class="line">INFO: No patches or files need updating</span><br><span class="line">INFO: Moving recipe file to &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;meta-test-layer&#x2F;recipes-devtool-hello-world&#x2F;devtool-hello-world</span><br><span class="line">INFO: Leaving source tree &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;devtool-hello-world as-is; if you no longer need it then please delete it manually</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>查看 meta-test-layer 目录结构，可以看到 devtool-hello-world recipe已经被添加到 meta-test-layer 了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">├── COPYING.MIT</span><br><span class="line">├── README</span><br><span class="line">├── recipes-devtool-hello-world</span><br><span class="line">	└── devtool-hello-world</span><br><span class="line">		└── devtool-hello-world.bb</span><br><span class="line">├── recipes-example</span><br><span class="line">└── recipes-hello-world</span><br></pre></td></tr></table></figure></p>
<ol>
<li>删除 workspace 中的 devtool-hello-world recipe<br>执行如下命令即可<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtool reset devtool-hello-world</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Modify-a-Recipe-in-the-Workspace-Layer-git源码"><a href="#Modify-a-Recipe-in-the-Workspace-Layer-git源码" class="headerlink" title="Modify a Recipe in the Workspace Layer(git源码)"></a>Modify a Recipe in the Workspace Layer(git源码)</h3><p>很多时候，我们需要对一些来源为git/svn上的Source Files进行修改，这里有2中方法</p>
<ol>
<li><p>执行对应的 recipe 的 do_patch task，这样会在 build 目录对应的 $S目录(${WORKDIR}/${BPN}-${PV})中生成已经打完patch的源文件，找到对应的源文件进行修改生成patch，最后在对应的bb文件中添加上该patch.</p>
</li>
<li><p>使用devtool工具</p>
</li>
</ol>
<p>我们以修改 ca-certificates_20190110.bb 为例来介绍怎么使用 devtool 工具来生成patch.</p>
<p>a. 首先查看一下 ca-certificates 路径和内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）代码tree：</span><br><span class="line">&#x2F;poky&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates$ tree</span><br><span class="line">.</span><br><span class="line">├── ca-certificates</span><br><span class="line">│   ├── 0001-certdata2pem.py-use-python3.patch</span><br><span class="line">│   ├── 0001-update-ca-certificates-don-t-use-Debianisms-in-run-p.patch</span><br><span class="line">│   ├── 0002-update-ca-certificates-use-SYSROOT.patch</span><br><span class="line">│   ├── 0003-update-ca-certificates-use-relative-symlinks-from-ET.patch</span><br><span class="line">│   ├── default-sysroot.patch</span><br><span class="line">│   ├── sbindir.patch</span><br><span class="line">│   └── update-ca-certificates-support-Toybox.patch</span><br><span class="line">└── ca-certificates_20190110.bb</span><br><span class="line"></span><br><span class="line">2）ca-certificates_20190110.bb：</span><br><span class="line">SRC_URI &#x3D; &quot;git:&#x2F;&#x2F;salsa.debian.org&#x2F;debian&#x2F;ca-certificates.git;protocol&#x3D;https \</span><br><span class="line">           file:&#x2F;&#x2F;0002-update-ca-certificates-use-SYSROOT.patch \</span><br><span class="line">           file:&#x2F;&#x2F;0001-update-ca-certificates-don-t-use-Debianisms-in-run-p.patch \</span><br><span class="line">           file:&#x2F;&#x2F;update-ca-certificates-support-Toybox.patch \</span><br><span class="line">           file:&#x2F;&#x2F;default-sysroot.patch \</span><br><span class="line">           file:&#x2F;&#x2F;sbindir.patch \</span><br><span class="line">           file:&#x2F;&#x2F;0003-update-ca-certificates-use-relative-symlinks-from-ET.patch \</span><br><span class="line">           &quot;</span><br></pre></td></tr></table></figure><br>从如上代码结构很容易看出来，ca-certificates是利用git://salsa.debian.org/debian/ca-certificates.git 的内容，同时引用本地的这些patch，最终编译生成输出deb包。</p>
<p>b. 执行devtoo modify + recipes<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@a8b2146aff8c:~&#x2F;host&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build$ devtool modify ca-certificates</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Initialising tasks: 100% |######################################################################################################################################################################| Time: 0:00:00</span><br><span class="line">NOTE: Executing RunQueue Tasks</span><br><span class="line">NOTE: Tasks Summary: Attempted 3 tasks of which 0 didn&#39;t need to be rerun and all succeeded.</span><br><span class="line">NOTE: Writing buildhistory</span><br><span class="line">NOTE: Source tree extracted to &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;sb_dev&#x2F;apps_proc&#x2F;build-qti-distro-ubuntu-fullstack-debug&#x2F;workspace&#x2F;sources&#x2F;ca-certificates</span><br><span class="line">NOTE: Using source tree as build directory since that would be the default for this recipe</span><br><span class="line">NOTE: Recipe ca-certificates now set up to build from &#x2F;home&#x2F;user&#x2F;host&#x2F;code&#x2F;sb_dev&#x2F;apps_proc&#x2F;build-qti-distro-ubuntu-fullstack-debug&#x2F;workspace&#x2F;sources&#x2F;ca-certificates</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>执行此命令后，会在 workspace/appends/ 目录生成 ca-certificates_20190110.bbappend，同时会在 workspace/sources/ca-certificates 目录中把bb文件中 SRC_URI 对应的git库下载下来并应用好本地的patch.<br>查看本地的patch，主要是对 sbin/update-ca-certificates 工具进行修改，这里我们在workspace/sources/ca-certificates中找到update-ca-certificates，对其进行修改后执行，修改内如只要是添加了一句打印。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m &quot;test for the devtool modify feature&quot;</span><br><span class="line"></span><br><span class="line">leix@leix:~&#x2F;code&#x2F;poky&#x2F;poky&#x2F;build&#x2F;workspace&#x2F;sources&#x2F;ca-certificates&#x2F;sbin$ git show</span><br><span class="line">commit d39db63bbdae9ce72908deead393b7bd5b28a519</span><br><span class="line">Author: BSP) Leixiang0320 &lt;leixiang0320@thundersoft.com&gt;</span><br><span class="line">Date:   Fri Oct 1 17:00:31 2021 +0800</span><br><span class="line"></span><br><span class="line">    test for the devtool modify feature</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;sbin&#x2F;update-ca-certificates b&#x2F;sbin&#x2F;update-ca-certificates</span><br><span class="line">index ca1f0e8..f177680 100755</span><br><span class="line">--- a&#x2F;sbin&#x2F;update-ca-certificates</span><br><span class="line">+++ b&#x2F;sbin&#x2F;update-ca-certificates</span><br><span class="line">@@ -62,6 +62,7 @@ do</span><br><span class="line">       HOOKSDIR&#x3D;&quot;$1&quot;;;</span><br><span class="line">     --help|-h|*)</span><br><span class="line">       echo &quot;$0: [--verbose] [--fresh]&quot;</span><br><span class="line">+      echo &quot;test for devtool modify feature&quot;</span><br><span class="line">       exit;;</span><br><span class="line">   esac</span><br><span class="line">   shift</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>c. 执行 devtool update-recipe ca-certificates<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky&#x2F;build&#x2F;workspace&#x2F;sources&#x2F;ca-certificates$ devtool update-recipe ca-certificates</span><br><span class="line">...</span><br><span class="line">Summary: There were 62 WARNING messages shown.</span><br><span class="line">NOTE: Adding new patch 0001-add-print-to-test-devtool.patch</span><br><span class="line">NOTE: Updating recipe ca-certificates_20190110.bb</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>检测对应的源码路径， 可以发现patch已经生成，我们接下来只需要执行 git add &amp; git commit即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">poky&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates&#x2F;ca-certificates$ git diff</span><br><span class="line">diff --git a&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates&#x2F;ca-certificates_20190110.bb b&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates&#x2F;ca-certificates_20190110.bb</span><br><span class="line">index ce3cb21..ba87094 100644</span><br><span class="line">--- a&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates&#x2F;ca-certificates_20190110.bb</span><br><span class="line">+++ b&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates&#x2F;ca-certificates_20190110.bb</span><br><span class="line">@@ -24,6 +24,7 @@ SRC_URI &#x3D; &quot;git:&#x2F;&#x2F;salsa.debian.org&#x2F;debian&#x2F;ca-certificates.git;protocol&#x3D;https \</span><br><span class="line">            file:&#x2F;&#x2F;sbindir.patch \</span><br><span class="line">            file:&#x2F;&#x2F;0003-update-ca-certificates-use-relative-symlinks-from-ET.patch \</span><br><span class="line">            file:&#x2F;&#x2F;0001-certdata2pem.py-use-python3.patch \</span><br><span class="line">+           file:&#x2F;&#x2F;0001-add-print-to-test-devtool.patch \</span><br><span class="line">            &quot;</span><br><span class="line"></span><br><span class="line"> S &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;git&quot;</span><br><span class="line"></span><br><span class="line">poky&#x2F;meta&#x2F;recipes-support&#x2F;ca-certificates$ cat ca-certificates&#x2F;0001-add-print-to-test-devtool.patch</span><br><span class="line">From 1625870a59ae35fd86bf86767dee0a7d77afc6cb Mon Sep 17 00:00:00 2001</span><br><span class="line">From: &quot;BSP) Leixiang0320&quot; &lt;leixiang0320@thundersoft.com&gt;</span><br><span class="line">Date: Thu, 7 Oct 2021 14:36:51 +0800</span><br><span class="line">Subject: [PATCH] add print to test devtool</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> sbin&#x2F;update-ca-certificates | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;sbin&#x2F;update-ca-certificates b&#x2F;sbin&#x2F;update-ca-certificates</span><br><span class="line">index ca1f0e8..a1f03b7 100755</span><br><span class="line">--- a&#x2F;sbin&#x2F;update-ca-certificates</span><br><span class="line">+++ b&#x2F;sbin&#x2F;update-ca-certificates</span><br><span class="line">@@ -62,6 +62,7 @@ do</span><br><span class="line">       HOOKSDIR&#x3D;&quot;$1&quot;;;</span><br><span class="line">     --help|-h|*)</span><br><span class="line">       echo &quot;$0: [--verbose] [--fresh]&quot;</span><br><span class="line">+      echo &quot;add print to test devtool&quot;</span><br><span class="line">       exit;;</span><br><span class="line">   esac</span><br><span class="line">   shift</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>d. 执行 devtool finish ca-certificates + [layer]<br>执行finish命令，来关断workspace与源码中的 ca-certificates 联系，同时finish功能有包含update-recipe的功能，即也包含了把workspace工作区的修改update到源码目录的作用。</p>
<p>e. 最后执行devtool reset ca-certificates<br>执行reset命令，从workspace工作区移除对应的recipe，但是源码还保持在其中，需要手动删除。</p>
<h2 id="toaster"><a href="#toaster" class="headerlink" title="toaster"></a>toaster</h2><h3 id="toaster-是什么"><a href="#toaster-是什么" class="headerlink" title="toaster 是什么"></a>toaster 是什么</h3><p>Toaster 是 Yocto 项目的 OpenEmbedded 构建系统的 Web 界面，该界面使您能够配置和运行您的构建，有关构建的信息被收集并存储在数据库中，您可以使用 Toaster 在多个远程构建服务器上配置和启动构建。</p>
<h3 id="toaster-做什么"><a href="#toaster-做什么" class="headerlink" title="toaster 做什么"></a>toaster 做什么</h3><ul>
<li>Configure and Run Builds<ul>
<li>浏览项目源码的Layers</li>
<li>浏览这些Layers中的image，recipes 和 machines配置</li>
<li>添加/删除Layers</li>
<li>设置配置变量</li>
<li>选择构建目标</li>
<li>开始构建</li>
</ul>
</li>
<li>Information About the Build Process<ul>
<li>查看构建内容（recipes 和 packages）以及哪些packages被安装到最终的image</li>
<li>浏览image的目录结构</li>
<li>查看构建配置中的所有变量</li>
<li>检查错误、警告和跟踪消息以帮助调试</li>
<li>查看有关在构建期间执行和重用的 BitBake 任务的信息，包括那些使用共享状态的任务。</li>
<li>查看配方、包和任务之间的依赖关系。</li>
<li>查看性能信息，例如构建时间、任务时间、CPU 使用率和磁盘 I/O。</li>
</ul>
</li>
</ul>
<h3 id="准备使用toaster"><a href="#准备使用toaster" class="headerlink" title="准备使用toaster"></a>准备使用toaster</h3><p>Toaster依赖python，其中依赖项定义在poky/bitbake/toaster-requirements.txt中，所以首先需要按照依赖项。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">pip3 install --user -r bitbake&#x2F;toaster-requirements.txt</span><br></pre></td></tr></table></figure></p>
<h1 id="7-常见用法"><a href="#7-常见用法" class="headerlink" title="7. 常见用法"></a>7. 常见用法</h1><h2 id="1-编译单个bb文件"><a href="#1-编译单个bb文件" class="headerlink" title="1. 编译单个bb文件"></a>1. 编译单个bb文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编译</span><br><span class="line">bitbake -b foo_1.0.bb</span><br><span class="line"></span><br><span class="line"># 清除编译产物</span><br><span class="line">bitbake -b foo.bb -c cleansstate</span><br></pre></td></tr></table></figure>
<p>“-b “选项明确地不处理配方的依赖关系，一般用于调试目的。</p>
<h2 id="2-执行任务"><a href="#2-执行任务" class="headerlink" title="2. 执行任务"></a>2. 执行任务</h2><p>当管理多个.bb文件时，会引入许多额外的复杂性（构建时和运行时的依赖关系，recipe版本等），我们一般使用如下方法来执行任务<br>bitbake + package name<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编译</span><br><span class="line">bitbake foo</span><br><span class="line"></span><br><span class="line">#清除</span><br><span class="line">bitbake foo -c cleansstate</span><br></pre></td></tr></table></figure></p>
<h2 id="3-生成依赖关系"><a href="#3-生成依赖关系" class="headerlink" title="3. 生成依赖关系"></a>3. 生成依赖关系</h2><p>略</p>
<h2 id="4-查看变量的实际值"><a href="#4-查看变量的实际值" class="headerlink" title="4. 查看变量的实际值"></a>4. 查看变量的实际值</h2><p>a. 查看配置文件（local.conf、bblayers.conf、bitbake.conf等） 被解析后显示的变量值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitbake -e |grep VARIABLE&#x3D;</span><br></pre></td></tr></table></figure><br>b.查看某recipe的值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitbake recipe -e | grep VARIABLE&#x3D;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-提升Function为Task"><a href="#5-提升Function为Task" class="headerlink" title="5. 提升Function为Task"></a>5. 提升Function为Task</h2><p>shell 函数或 BitBake-style Python 函数，通过 addtask 命令可以提升为任务。<br>addtask 命令还可以选择描述任务和其他任务之间的依赖关系。下面是一个例子，显示了如何定义一个任务并声明一些依赖关系。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">python <span class="title">do_printdate</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"> print time.strftime(&#x27;%Y%m%d&#x27;, time.gmtime())</span><br><span class="line">&#125;</span><br><span class="line">addtask printdate after do_fetch before do_build</span><br></pre></td></tr></table></figure><br>addtask的第一个参数是要提升为任务的函数的名称。如果名称不是以 “do<em>“开头，”do</em>“就会被隐含地添加进去，这样就执行了所有任务名称以 “do_”开头的惯例。</p>
<p>do_printdate 任务在do_build之前运行，在do_fetch之后运行。</p>
<h2 id="6-强制执行Task"><a href="#6-强制执行Task" class="headerlink" title="6. 强制执行Task"></a>6. 强制执行Task</h2><p>当用bitbake recipe -c task命令手动选择一个要运行的任务时,你可能会发现该任务（示例：do_printdate）只在你第一次用bitbake命令构建配方时才会运行。这是因为BitBake认为该任务在首次运行后是 “最新的”。如果你想强制该任务总是被重新运行以进行实验，你可以通过使用[nostamp]变量标志使BitBake总是认为该任务是 “过时的”，如下所示。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">do_printdate[nostamp] = <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><br>或者你也可以明确地运行任务并提供-f选项，如下所示。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bitbake recipe -c printdate -f</span><br></pre></td></tr></table></figure></p>
<p>注：本文档大部分内容为翻译参考资料中的官方英文文档</p>
<h2 id="7-官方-QA-Error-and-Waring-Messages"><a href="#7-官方-QA-Error-and-Waring-Messages" class="headerlink" title="7. 官方 QA Error and Waring Messages"></a>7. 官方 QA Error and Waring Messages</h2><p>详情参考：<a href="https://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#ref-qa-checks">Yocto Project Reference Manual</a></p>
<p>参考资料：</p>
<ul>
<li><a href="http://docs.yoctoproject.org/">Welcome to the Yocto Project Documentation — The Yocto Project ® dev documentation</a></li>
<li><a href="https://wiki.yoctoproject.org/wiki/Main_Page">Yocto Project</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/07/24/Yocto-Build-System-Introduction/</url>
    <content><![CDATA[<!doctype html>
<html>
<head>
<meta charset="UTF-8"><meta name="viewport" content="width=device-width initial-scale=1">

<link href="file://C://Users//leix//AppData//Roaming//Typora/themes/night/mermaid.dark.css" rel="stylesheet" type="text/css"><link href="file://C://Users//leix//AppData//Roaming//Typora/themes/night/codeblock.dark.css" rel="stylesheet" type="text/css"><link href="file://C://Users//leix//AppData//Roaming//Typora/themes/night/sourcemode.dark.css" rel="stylesheet" type="text/css"><style type="text/css">html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; --title-bar-height:20px; }
.mac-os-11 { --title-bar-height:28px; }
html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }
body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }
iframe { margin: auto; }
a.url { word-break: break-all; }
a:active, a:hover { outline: 0px; }
.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }
#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; }
#write.first-line-indent p { text-indent: 2em; }
#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }
#write.first-line-indent li { margin-left: 2em; }
.for-image #write { padding-left: 8px; padding-right: 8px; }
body.typora-export { padding-left: 30px; padding-right: 30px; }
.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }
.typora-export .task-list-item input { pointer-events: none; }
@media screen and (max-width: 500px) {
  body.typora-export { padding-left: 0px; padding-right: 0px; }
  #write { padding-left: 20px; padding-right: 20px; }
  .CodeMirror-sizer { margin-left: 0px !important; }
  .CodeMirror-gutters { display: none !important; }
}
#write li > figure:last-child { margin-bottom: 0.5rem; }
#write ol, #write ul { position: relative; }
img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }
button, input, select, textarea { color: inherit; font: inherit; }
input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }
*, ::after, ::before { box-sizing: border-box; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }
p { line-height: inherit; }
h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }
p { orphans: 4; }
h1 { font-size: 2rem; }
h2 { font-size: 1.8rem; }
h3 { font-size: 1.6rem; }
h4 { font-size: 1.4rem; }
h5 { font-size: 1.2rem; }
h6 { font-size: 1rem; }
.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }
.hidden { display: none; }
.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }
a { cursor: pointer; }
sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }
sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }
#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }
figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }
figure > table { margin: 0px; }
tr { break-inside: avoid; break-after: auto; }
thead { display: table-header-group; }
table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }
table.md-table td { min-width: 32px; }
.CodeMirror-gutters { border-right: 0px; background-color: inherit; }
.CodeMirror-linenumber { user-select: none; }
.CodeMirror { text-align: left; }
.CodeMirror-placeholder { opacity: 0.3; }
.CodeMirror pre { padding: 0px 4px; }
.CodeMirror-lines { padding: 0px; }
div.hr:focus { cursor: none; }
#write pre { white-space: pre-wrap; }
#write.fences-no-line-wrapping pre { white-space: pre; }
#write pre.ty-contain-cm { white-space: normal; }
.CodeMirror-gutters { margin-right: 4px; }
.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }
.md-fences-adv-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }
#write .md-fences.mock-cm { white-space: pre-wrap; }
.md-fences.md-fences-with-lineno { padding-left: 0px; }
#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }
.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }
.CodeMirror-line, twitterwidget { break-inside: avoid; }
.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }
.footnotes + .footnotes { margin-top: 0px; }
.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }
li div { padding-top: 0px; }
blockquote { margin: 1rem 0px; }
li .mathjax-block, li p { margin: 0.5rem 0px; }
li blockquote { margin: 1rem 0px; }
li { margin: 0px; position: relative; }
blockquote > :last-child { margin-bottom: 0px; }
blockquote > :first-child, li > :first-child { margin-top: 0px; }
.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }
#write .footnote-line { white-space: pre-wrap; }
@media print {
  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }
  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }
  .typora-export * { -webkit-print-color-adjust: exact; }
  .typora-export #write { break-after: avoid; }
  .typora-export #write::after { height: 0px; }
  .is-mac table { break-inside: avoid; }
  .typora-export-show-outline .typora-export-sidebar { display: none; }
}
.footnote-line { margin-top: 0.714em; font-size: 0.7em; }
a img, img a { cursor: pointer; }
pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }
p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }
#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }
p > .md-image:only-child { display: inline-block; width: 100%; }
#write .MathJax_Display { margin: 0.8em 0px 0px; }
.md-math-block { width: 100%; }
.md-math-block:not(:empty)::after { display: none; }
.MathJax_ref { fill: currentcolor; }
[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }
.md-task-list-item { position: relative; list-style-type: none; }
.task-list-item.md-task-list-item { padding-left: 0px; }
.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }
.math { font-size: 1rem; }
.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }
.md-toc-content { position: relative; margin-left: 0px; }
.md-toc-content::after, .md-toc::after { display: none; }
.md-toc-item { display: block; color: rgb(65, 131, 196); }
.md-toc-item a { text-decoration: none; }
.md-toc-inner:hover { text-decoration: underline; }
.md-toc-inner { display: inline-block; cursor: pointer; }
.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }
.md-toc-h2 .md-toc-inner { margin-left: 2em; }
.md-toc-h3 .md-toc-inner { margin-left: 4em; }
.md-toc-h4 .md-toc-inner { margin-left: 6em; }
.md-toc-h5 .md-toc-inner { margin-left: 8em; }
.md-toc-h6 .md-toc-inner { margin-left: 10em; }
@media screen and (max-width: 48em) {
  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }
  .md-toc-h4 .md-toc-inner { margin-left: 5em; }
  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }
  .md-toc-h6 .md-toc-inner { margin-left: 8em; }
}
a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }
.footnote-line a:not(.reversefootnote) { color: inherit; }
.md-attr { display: none; }
.md-fn-count::after { content: "."; }
code, pre, samp, tt { font-family: var(--monospace); }
kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }
.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }
code { text-align: left; vertical-align: initial; }
a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }
.md-inline-math .MathJax_SVG .noError { display: none !important; }
.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }
.md-fences-math .MathJax_SVG_Display, .md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: visible; display: block !important; }
.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }
.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }
.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }
.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; zoom: 90%; }
#math-inline-preview-content { zoom: 1.1; }
.MathJax_SVG * { transition: none 0s ease 0s; }
.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }
.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }
.md-diagram-panel > svg { max-width: 100%; }
[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }
[lang="mermaid"] .node text { font-size: 1rem; }
table tr th { border-bottom: 0px; }
video { max-width: 100%; display: block; margin: 0px auto; }
iframe { max-width: 100%; width: 100%; border: none; }
.highlight td, .highlight tr { border: 0px; }
mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }
.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }
.md-expand mark .md-meta { opacity: 0.3 !important; }
mark .md-meta { color: rgb(0, 0, 0); }
@media print {
  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }
}
.md-diagram-panel .messageText { stroke: none !important; }
.md-diagram-panel .start-state { fill: var(--node-fill); }
.md-diagram-panel .edgeLabel rect { opacity: 1 !important; }
.md-require-zoom-fix foreignobject { font-size: var(--mermaid-font-zoom); }
.md-fences.md-fences-math { font-size: 1em; }
.md-fences-math .MathJax_SVG_Display { margin-top: 8px; cursor: default; }
.md-fences-advanced:not(.md-focus) { padding: 0px; white-space: nowrap; border: 0px; }
.md-fences-advanced:not(.md-focus) { background: inherit; }
.typora-export-show-outline .typora-export-content { max-width: 1440px; margin: auto; display: flex; flex-direction: row; }
.typora-export-sidebar { width: 300px; font-size: 0.8rem; margin-top: 80px; margin-right: 18px; }
.typora-export-show-outline #write { --webkit-flex:2; flex: 2 1 0%; }
.typora-export-sidebar .outline-content { position: fixed; top: 0px; max-height: 100%; overflow: hidden auto; padding-bottom: 30px; padding-top: 60px; width: 300px; }
@media screen and (max-width: 1024px) {
  .typora-export-sidebar, .typora-export-sidebar .outline-content { width: 240px; }
}
@media screen and (max-width: 800px) {
  .typora-export-sidebar { display: none; }
}
.outline-content li, .outline-content ul { margin-left: 0px; margin-right: 0px; padding-left: 0px; padding-right: 0px; list-style: none; }
.outline-content ul { margin-top: 0px; margin-bottom: 0px; }
.outline-content strong { font-weight: 400; }
.outline-expander { width: 1rem; height: 1.42857rem; position: relative; display: table-cell; vertical-align: middle; cursor: pointer; padding-left: 4px; }
.outline-expander::before { content: ""; position: relative; font-family: Ionicons; display: inline-block; font-size: 8px; vertical-align: middle; }
.outline-item { padding-top: 3px; padding-bottom: 3px; cursor: pointer; }
.outline-expander:hover::before { content: ""; }
.outline-h1 > .outline-item { padding-left: 0px; }
.outline-h2 > .outline-item { padding-left: 1em; }
.outline-h3 > .outline-item { padding-left: 2em; }
.outline-h4 > .outline-item { padding-left: 3em; }
.outline-h5 > .outline-item { padding-left: 4em; }
.outline-h6 > .outline-item { padding-left: 5em; }
.outline-label { cursor: pointer; display: table-cell; vertical-align: middle; text-decoration: none; color: inherit; }
.outline-label:hover { text-decoration: underline; }
.outline-item:hover { border-color: rgb(245, 245, 245); background-color: var(--item-hover-bg-color); }
.outline-item:hover { margin-left: -28px; margin-right: -28px; border-left: 28px solid transparent; border-right: 28px solid transparent; }
.outline-item-single .outline-expander::before, .outline-item-single .outline-expander:hover::before { display: none; }
.outline-item-open > .outline-item > .outline-expander::before { content: ""; }
.outline-children { display: none; }
.info-panel-tab-wrapper { display: none; }
.outline-item-open > .outline-children { display: block; }
.typora-export .outline-item { padding-top: 1px; padding-bottom: 1px; }
.typora-export .outline-item:hover { margin-right: -8px; border-right: 8px solid transparent; }
.typora-export .outline-expander::before { content: "+"; font-family: inherit; top: -1px; }
.typora-export .outline-expander:hover::before, .typora-export .outline-item-open > .outline-item > .outline-expander::before { content: "−"; }
.typora-export-collapse-outline .outline-children { display: none; }
.typora-export-collapse-outline .outline-item-open > .outline-children, .typora-export-no-collapse-outline .outline-children { display: block; }
.typora-export-no-collapse-outline .outline-expander::before { content: "" !important; }
.typora-export-show-outline .outline-item-active > .outline-item .outline-label { font-weight: 700; }


.CodeMirror { height: auto; }
.CodeMirror.cm-s-inner { background: inherit; }
.CodeMirror-scroll { overflow: auto hidden; z-index: 3; }
.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }
.CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; }
.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }
.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }
.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }
.cm-s-inner .cm-number { color: rgb(17, 102, 68); }
.cm-s-inner .cm-def { color: rgb(0, 0, 255); }
.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }
.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }
.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }
.cm-s-inner .cm-string { color: rgb(170, 17, 17); }
.cm-s-inner .cm-property { color: rgb(0, 0, 0); }
.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }
.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }
.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }
.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }
.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }
.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }
.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }
.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }
.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }
.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }
.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }
.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }
.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }
.cm-negative { color: rgb(221, 68, 68); }
.cm-positive { color: rgb(34, 153, 34); }
.cm-header, .cm-strong { font-weight: 700; }
.cm-del { text-decoration: line-through; }
.cm-em { font-style: italic; }
.cm-link { text-decoration: underline; }
.cm-error { color: red; }
.cm-invalidchar { color: red; }
.cm-constant { color: rgb(38, 139, 210); }
.cm-defined { color: rgb(181, 137, 0); }
div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }
div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }
.cm-s-inner .CodeMirror-activeline-background { background: inherit; }
.CodeMirror { position: relative; overflow: hidden; }
.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; }
.CodeMirror-sizer { position: relative; }
.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; }
.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }
.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: hidden; }
.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }
.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }
.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 30px; z-index: 3; }
.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }
.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; }
.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }
.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }
.CodeMirror-lines { cursor: text; }
.CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; }
.CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; }
.CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; }
.CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; }
.CodeMirror-linebackground { position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 0; }
.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }
.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }
.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }
.CodeMirror-measure pre { position: static; }
.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; }
.CodeMirror div.CodeMirror-cursor { visibility: hidden; }
.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }
.cm-searching { background: rgba(255, 255, 0, 0.4); }
span.cm-underlined { text-decoration: underline; }
span.cm-strikethrough { text-decoration: line-through; }
.cm-tw-syntaxerror { color: rgb(255, 255, 255); background-color: rgb(153, 0, 0); }
.cm-tw-deleted { text-decoration: line-through; }
.cm-tw-header5 { font-weight: 700; }
.cm-tw-listitem:first-child { padding-left: 10px; }
.cm-tw-box { border-style: solid; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-color: inherit; border-top-width: 0px !important; }
.cm-tw-underline { text-decoration: underline; }
@media print {
  .CodeMirror div.CodeMirror-cursor { visibility: hidden; }
}


:root {
  --mermaid-theme: night;
}

[lang='mermaid'] .label {
  color: #333;
}

/* CSS Document */

/** code highlight */

.cm-s-inner .cm-variable,
.cm-s-inner .cm-operator,
.cm-s-inner .cm-property {
    color: #b8bfc6;
}

.cm-s-inner .cm-keyword {
    color: #C88FD0;
}

.cm-s-inner .cm-tag {
    color: #7DF46A;
}

.cm-s-inner .cm-attribute {
    color: #7575E4;
}

.CodeMirror div.CodeMirror-cursor {
    border-left: 1px solid #b8bfc6;
    z-index: 3;
}

.cm-s-inner .cm-string {
    color: #D26B6B;
}

.cm-s-inner .cm-comment,
.cm-s-inner.cm-comment {
    color: #DA924A;
}

.cm-s-inner .cm-header,
.cm-s-inner .cm-def,
.cm-s-inner.cm-header,
.cm-s-inner.cm-def {
    color: #8d8df0;
}

.cm-s-inner .cm-quote,
.cm-s-inner.cm-quote {
    color: #57ac57;
}

.cm-s-inner .cm-hr {
    color: #d8d5d5;
}

.cm-s-inner .cm-link {
    color: #d3d3ef;
}

.cm-s-inner .cm-negative {
    color: #d95050;
}

.cm-s-inner .cm-positive {
    color: #50e650;
}

.cm-s-inner .cm-string-2 {
    color: #f50;
}

.cm-s-inner .cm-meta,
.cm-s-inner .cm-qualifier {
    color: #b7b3b3;
}

.cm-s-inner .cm-builtin {
    color: #f3b3f8;
}

.cm-s-inner .cm-bracket {
    color: #997;
}

.cm-s-inner .cm-atom,
.cm-s-inner.cm-atom {
    color: #84B6CB;
}

.cm-s-inner .cm-number {
    color: #64AB8F;
}

.cm-s-inner .cm-variable {
    color: #b8bfc6;
}

.cm-s-inner .cm-variable-2 {
    color: #9FBAD5;
}

.cm-s-inner .cm-variable-3 {
    color: #1cc685;
}

.CodeMirror-selectedtext,
.CodeMirror-selected {
    background: #4a89dc;
    color: #fff !important;
    text-shadow: none;
}

.CodeMirror-gutters {
    border-right: none;
}

/* CSS Document */

/** markdown source **/
.cm-s-typora-default .cm-header, 
.cm-s-typora-default .cm-property
{
    color: #cebcca;
}

.CodeMirror.cm-s-typora-default div.CodeMirror-cursor{
    border-left: 3px solid #b8bfc6;
}

.cm-s-typora-default .cm-comment {
    color: #9FB1FF;
}

.cm-s-typora-default .cm-string {
    color: #A7A7D9
}

.cm-s-typora-default .cm-atom, .cm-s-typora-default .cm-number {
    color: #848695;
    font-style: italic;
}

.cm-s-typora-default .cm-link {
    color: #95B94B;
}

.cm-s-typora-default .CodeMirror-activeline-background {
    background: rgba(51, 51, 51, 0.72);
}

.cm-s-typora-default .cm-comment, .cm-s-typora-default .cm-code {
	color: #8aa1e1;
}@import "";
@import "";
@import "";

:root {
    --bg-color:  #363B40;
    --side-bar-bg-color: #2E3033;
    --text-color: #b8bfc6;

    --select-text-bg-color:#4a89dc;

    --item-hover-bg-color: #0a0d16;
    --control-text-color: #b7b7b7;
    --control-text-hover-color: #eee;
    --window-border: 1px solid #555;

    --active-file-bg-color: rgb(34, 34, 34);
    --active-file-border-color: #8d8df0;

    --primary-color: #a3d5fe;

    --active-file-text-color: white;
    --item-hover-bg-color: #70717d;
    --item-hover-text-color: white;
    --primary-color: #6dc1e7;

    --rawblock-edit-panel-bd: #333;

    --search-select-bg-color: #428bca;
}

html {
    font-size: 16px;
}

html,
body {
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    background: #363B40;
    background: var(--bg-color);
    fill: currentColor;
    line-height: 1.625rem;
}

#write {
    max-width: 914px;
}


@media only screen and (min-width: 1400px) {
	#write {
		max-width: 1024px;
	}
}

@media only screen and (min-width: 1800px) {
	#write {
		max-width: 1200px;
	}
}

html,
body,
button,
input,
select,
textarea,
div.code-tooltip-content {
    color: #b8bfc6;
    border-color: transparent;
}

div.code-tooltip,
.md-hover-tip .md-arrow:after {
    background: #333;
}

.popover.bottom > .arrow:after {
    border-bottom-color: #333;
}

html,
body,
button,
input,
select,
textarea {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

hr {
    height: 2px;
    border: 0;
    margin: 24px 0 !important;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-family: "Lucida Grande", "Corbel", sans-serif;
    font-weight: normal;
    clear: both;
    -ms-word-wrap: break-word;
    word-wrap: break-word;
    margin: 0;
    padding: 0;
    color: #DEDEDE
}

h1 {
    font-size: 2.5rem;
    /* 36px */
    line-height: 2.75rem;
    /* 40px */
    margin-bottom: 1.5rem;
    /* 24px */
    letter-spacing: -1.5px;
}

h2 {
    font-size: 1.63rem;
    /* 24px */
    line-height: 1.875rem;
    /* 30px */
    margin-bottom: 1.5rem;
    /* 24px */
    letter-spacing: -1px;
    font-weight: bold;
}

h3 {
    font-size: 1.17rem;
    /* 18px */
    line-height: 1.5rem;
    /* 24px */
    margin-bottom: 1.5rem;
    /* 24px */
    letter-spacing: -1px;
    font-weight: bold;
}

h4 {
    font-size: 1.12rem;
    /* 16px */
    line-height: 1.375rem;
    /* 22px */
    margin-bottom: 1.5rem;
    /* 24px */
    color: white;
}

h5 {
    font-size: 0.97rem;
    /* 16px */
    line-height: 1.25rem;
    /* 22px */
    margin-bottom: 1.5rem;
    /* 24px */
    font-weight: bold;
}

h6 {
    font-size: 0.93rem;
    /* 16px */
    line-height: 1rem;
    /* 16px */
    margin-bottom: 0.75rem;
    color: white;
}

@media (min-width: 980px) {
    h3.md-focus:before,
    h4.md-focus:before,
    h5.md-focus:before,
    h6.md-focus:before {
        color: #ddd;
        border: 1px solid #ddd;
        border-radius: 3px;
        position: absolute;
        left: -1.642857143rem;
        top: .357142857rem;
        float: left;
        font-size: 9px;
        padding-left: 2px;
        padding-right: 2px;
        vertical-align: bottom;
        font-weight: normal;
        line-height: normal;
    }

    h3.md-focus:before {
        content: 'h3';
    }

    h4.md-focus:before {
        content: 'h4';
    }

    h5.md-focus:before {
        content: 'h5';
        top: 0px;
    }

    h6.md-focus:before {
        content: 'h6';
        top: 0px;
    }
}

a {
    text-decoration: none;
    outline: 0;
}

a:hover {
    outline: 0;
}

a:focus {
    outline: thin dotted;
}

sup.md-footnote {
    background-color: #555;
    color: #ddd;
}

p {
    -ms-word-wrap: break-word;
    word-wrap: break-word;
}

p,
ul,
dd,
ol,
hr,
address,
pre,
table,
iframe,
.wp-caption,
.wp-audio-shortcode,
.wp-video-shortcode {
    margin-top: 0;
    margin-bottom: 1.5rem;
    /* 24px */
}

audio:not([controls]) {
    display: none;
}

[hidden] {
    display: none;
}

::-moz-selection {
    background: #4a89dc;
    color: #fff;
    text-shadow: none;
}

*.in-text-selection,
::selection {
    background: #4a89dc;
    color: #fff;
    text-shadow: none;
}

ul,
ol {
    padding: 0 0 0 1.875rem;
    /* 30px */
}

ul {
    list-style: square;
}

ol {
    list-style: decimal;
}

ul ul,
ol ol,
ul ol,
ol ul {
    margin: 0;
}

b,
th,
dt,
strong {
    font-weight: bold;
}

i,
em,
dfn,
cite {
    font-style: italic;
}

blockquote {
    padding-left: 1.875rem;
    margin: 0 0 1.875rem 1.875rem;
    border-left: solid 2px #474d54;
    padding-left: 30px;
    margin-top: 35px;
}

pre,
code,
kbd,
tt,
var {
    font-size: 0.875em;
    font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
}

code,
tt,
var {
    background: rgba(0, 0, 0, 0.05);
}

kbd {
    padding: 2px 4px;
    font-size: 90%;
    color: #fff;
    background-color: #333;
    border-radius: 3px;
    box-shadow: inset 0 -1px 0 rgba(0,0,0,.25);
}

pre.md-fences {
    padding: 10px 10px 10px 30px;
    margin-bottom: 20px;
    background: #333;
}

.CodeMirror-gutters {
    background: #333;
    border-right: 1px solid transparent;
}

.enable-diagrams pre.md-fences[lang="sequence"] .code-tooltip,
.enable-diagrams pre.md-fences[lang="flow"] .code-tooltip,
.enable-diagrams pre.md-fences[lang="mermaid"] .code-tooltip {
    bottom: -2.2em;
    right: 4px;
}

code,
kbd,
tt,
var {
    padding: 2px 5px;
}

table {
    max-width: 100%;
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
}

th,
td {
    padding: 5px 10px;
    vertical-align: top;
}

a {
    -webkit-transition: all .2s ease-in-out;
    transition: all .2s ease-in-out;
}

hr {
    background: #474d54;
    /* variable */
}

h1 {
    margin-top: 2em;
}

a {
    color: #e0e0e0;
    text-decoration: underline;
}

a:hover {
    color: #fff;
}

.md-inline-math script {
    color: #81b1db;
}

b,
th,
dt,
strong {
    color: #DEDEDE;
    /* variable */
}

mark {
    background: #D3D40E;
}

blockquote {
    color: #9DA2A6;
}

table a {
    color: #DEDEDE;
    /* variable */
}

th,
td {
    border: solid 1px #474d54;
    /* variable */
}

.task-list {
    padding-left: 0;
}

.md-task-list-item {
    padding-left: 1.25rem;
}

.md-task-list-item > input {
    top: auto;
}

.md-task-list-item > input:before {
    content: "";
    display: inline-block;
    width: 0.875rem;
    height: 0.875rem;
    vertical-align: middle;
    text-align: center;
    border: 1px solid #b8bfc6;
    background-color: #363B40;
    margin-top: -0.4rem;
}

.md-task-list-item > input:checked:before,
.md-task-list-item > input[checked]:before {
    content: '\221A';
    /*◘*/
    font-size: 0.625rem;
    line-height: 0.625rem;
    color: #DEDEDE;
}

/** quick open **/
.auto-suggest-container {
    border: 0px;
    background-color: #525C65;
}

#typora-quick-open {
    background-color: #525C65;
}

#typora-quick-open input{
    background-color: #525C65;
    border: 0;
    border-bottom: 1px solid grey;
}

.typora-quick-open-item {
    background-color: inherit;
    color: inherit;
}

.typora-quick-open-item.active,
.typora-quick-open-item:hover {
    background-color: #4D8BDB;
    color: white;
}

.typora-quick-open-item:hover {
    background-color: rgba(77, 139, 219, 0.8);
}

.typora-search-spinner > div {
  background-color: #fff;
}

#write pre.md-meta-block {
    border-bottom: 1px dashed #ccc;
    background: transparent;
    padding-bottom: 0.6em;
    line-height: 1.6em;
}

.btn,
.btn .btn-default {
    background: transparent;
    color: #b8bfc6;
}

.ty-table-edit {
    border-top: 1px solid gray;
    background-color: #363B40;
}

.popover-title {
    background: transparent;
}

.md-image>.md-meta {
    color: #BBBBBB;
    background: transparent;
}

.md-expand.md-image>.md-meta {
    color: #DDD;
}

#write>h3:before,
#write>h4:before,
#write>h5:before,
#write>h6:before {
    border: none;
    border-radius: 0px;
    color: #888;
    text-decoration: underline;
    left: -1.4rem;
    top: 0.2rem;
}

#write>h3.md-focus:before {
    top: 2px;
}

#write>h4.md-focus:before {
    top: 2px;
}

.md-toc-item {
    color: #A8C2DC;
}

#write div.md-toc-tooltip {
    background-color: #363B40;
}

.dropdown-menu .btn:hover,
.dropdown-menu .btn:focus,
.md-toc .btn:hover,
.md-toc .btn:focus {
    color: white;
    background: black;
}

#toc-dropmenu {
    background: rgba(50, 54, 59, 0.93);
    border: 1px solid rgba(253, 253, 253, 0.15);
}

#toc-dropmenu .divider {
    background-color: #9b9b9b;
}

.outline-expander:before {
    top: 2px;
}

#typora-sidebar {
    box-shadow: none;
    border-right: 1px dashed;
    border-right: none;
}

.sidebar-tabs {
    border-bottom:0;
}

#typora-sidebar:hover .outline-title-wrapper {
    border-left: 1px dashed;
}

.outline-title-wrapper .btn {
    color: inherit;
}

.outline-item:hover {
    border-color: #363B40;
    background-color: #363B40;
    color: white;
}

h1.md-focus .md-attr,
h2.md-focus .md-attr,
h3.md-focus .md-attr,
h4.md-focus .md-attr,
h5.md-focus .md-attr,
h6.md-focus .md-attr,
.md-header-span .md-attr {
    color: #8C8E92;
    display: inline;
}

.md-comment {
    color: #5a95e3;
    opacity: 1;
}

.md-inline-math svg {
    color: #b8bfc6;
}

#math-inline-preview .md-arrow:after {
    background: black;
}

.modal-content {
    background: var(--bg-color);
    border: 0;
}

.modal-title {
    font-size: 1.5em;
}

.modal-content input {
    background-color: rgba(26, 21, 21, 0.51);
    color: white;
}

.modal-content .input-group-addon {
    color: white;
}

.modal-backdrop {
    background-color: rgba(174, 174, 174, 0.7);
}

.modal-content .btn-primary {
    border-color: var(--primary-color);
}

.md-table-resize-popover {
    background-color: #333;
}

.form-inline .input-group .input-group-addon {
    color: white;
}

#md-searchpanel {
    border-bottom: 1px dashed grey;
}

/** UI for electron */

.context-menu,
#spell-check-panel,
#footer-word-count-info {
    background-color: #42464A;
}

.context-menu.dropdown-menu .divider,
.dropdown-menu .divider {
    background-color: #777777;
    opacity: 1;
}

footer {
    color: inherit;
}

@media (max-width: 1000px) {
    footer {
        border-top: none;
    }
    footer:hover {
        color: inherit;
    }
}

#file-info-file-path .file-info-field-value:hover {
    background-color: #555;
    color: #dedede;
}

.megamenu-content,
.megamenu-opened header {
    background: var(--bg-color);
}

.megamenu-menu-panel h2,
.megamenu-menu-panel h1,
.long-btn {
    color: inherit;
}

.megamenu-menu-panel input[type='text'] {
    background: inherit;
    border: 0;
    border-bottom: 1px solid;
}

#recent-file-panel-action-btn {
    background: inherit;
    border: 1px grey solid;
}

.megamenu-menu-panel .dropdown-menu > li > a {
    color: inherit;
    background-color: #2F353A;
    text-decoration: none;
}

.megamenu-menu-panel table td:nth-child(1) {
    color: inherit;
    font-weight: bold;
}

.megamenu-menu-panel tbody tr:hover td:nth-child(1) {
    color: white;
}

.modal-footer .btn-default, 
.modal-footer .btn-primary,
.modal-footer .btn-default:not(:hover) {
    border: 1px solid;
    border-color: transparent;
}

.btn-primary {
    color: white;
}

.btn-default:hover, .btn-default:focus, .btn-default.focus, .btn-default:active, .btn-default.active, .open > .dropdown-toggle.btn-default {
    color: white;
    border: 1px solid #ddd;
    background-color: inherit;
}

.modal-header {
    border-bottom: 0;
}

.modal-footer {
    border-top: 0;
}

#recent-file-panel tbody tr:nth-child(2n-1) {
    background-color: transparent !important;
}

.megamenu-menu-panel tbody tr:hover td:nth-child(2) {
    color: inherit;
}

.megamenu-menu-panel .btn {
    border: 1px solid #eee;
    background: transparent;
}

.mouse-hover .toolbar-icon.btn:hover,
#w-full.mouse-hover,
#w-pin.mouse-hover {
    background-color: inherit;
}

.typora-node::-webkit-scrollbar {
    width: 5px;
}

.typora-node::-webkit-scrollbar-thumb:vertical {
    background: rgba(250, 250, 250, 0.3);
}

.typora-node::-webkit-scrollbar-thumb:vertical:active {
    background: rgba(250, 250, 250, 0.5);
}

#w-unpin {
    background-color: #4182c4;
}

#top-titlebar, #top-titlebar * {
    color: var(--item-hover-text-color);
}

.typora-sourceview-on #toggle-sourceview-btn,
#footer-word-count:hover,
.ty-show-word-count #footer-word-count {
    background: #333333;
}

#toggle-sourceview-btn:hover {
    color: #eee;
    background: #333333;
}

/** focus mode */
.on-focus-mode .md-end-block:not(.md-focus):not(.md-focus-container) * {
    color: #686868 !important;
}

.on-focus-mode .md-end-block:not(.md-focus) img,
.on-focus-mode .md-task-list-item:not(.md-focus-container)>input {
    opacity: #686868 !important;
}

.on-focus-mode li[cid]:not(.md-focus-container){
    color: #686868;
}

.on-focus-mode .md-fences.md-focus .CodeMirror-code>*:not(.CodeMirror-activeline) *,
.on-focus-mode .CodeMirror.cm-s-inner:not(.CodeMirror-focused) * {
    color: #686868 !important;
}

.on-focus-mode .md-focus,
.on-focus-mode .md-focus-container {
    color: #fff;
}

.on-focus-mode #typora-source .CodeMirror-code>*:not(.CodeMirror-activeline) * {
    color: #686868 !important;
}


/*diagrams*/
#write .md-focus .md-diagram-panel {
    border: 1px solid #ddd;
    margin-left: -1px;
    width: calc(100% + 2px);
}

/*diagrams*/
#write .md-focus.md-fences-with-lineno .md-diagram-panel {
    margin-left: auto;
}

.md-diagram-panel-error {
    color: #f1908e;
}

.active-tab-files #info-panel-tab-file,
.active-tab-files #info-panel-tab-file:hover,
.active-tab-outline #info-panel-tab-outline,
.active-tab-outline #info-panel-tab-outline:hover {
    color: #eee;
}

.sidebar-footer-item:hover,
.footer-item:hover {
    background: inherit;
    color: white;
}

.ty-side-sort-btn.active,
.ty-side-sort-btn:hover,
.selected-folder-menu-item a:after {
    color: white;
}

#sidebar-files-menu {
    border:solid 1px;
    box-shadow: 4px 4px 20px rgba(0, 0, 0, 0.79);
    background-color: var(--bg-color);
}

.file-list-item {
    border-bottom:none;
}

.file-list-item-summary {
    opacity: 1;
}

.file-list-item.active:first-child {
    border-top: none;
}

.file-node-background {
    height: 32px;
}

.file-library-node.active>.file-node-content,
.file-list-item.active {
    color: white;
    color: var(--active-file-text-color);
}

.file-library-node.active>.file-node-background{
    background-color: rgb(34, 34, 34);
    background-color: var(--active-file-bg-color);
}
.file-list-item.active {
    background-color: rgb(34, 34, 34);
    background-color: var(--active-file-bg-color);
}

#ty-tooltip {
    background-color: black;
    color: #eee;
}

.md-task-list-item>input {
    margin-left: -1.3em;
    margin-top: 0.3rem;
    -webkit-appearance: none;
}

.md-mathjax-midline {
    background-color: #57616b;
    border-bottom: none;
}

footer.ty-footer {
    border-color: #656565;
}

.ty-preferences .btn-default {
    background: transparent;
}
.ty-preferences .btn-default:hover {
    background: #57616b;
}

.ty-preferences select {
    border: 1px solid #989698;
    height: 21px;
}

.ty-preferences .nav-group-item.active {
    background: var(--item-hover-bg-color);
}

.ty-preferences input[type="search"] {
    border-color: #333;
    background: #333;
    line-height: 22px;
    border-radius: 6px;
    color: white;
}

.ty-preferences input[type="search"]:focus {
    box-shadow: none;
}

[data-is-directory="true"] .file-node-content {
    margin-bottom: 0;
}

.file-node-title {
    line-height: 22px;
}

.html-for-mac .file-node-open-state, .html-for-mac .file-node-icon {
    line-height: 26px;
}

::-webkit-scrollbar-thumb {
    background: rgba(230, 230, 230, 0.30);
}

::-webkit-scrollbar-thumb:active {
    background: rgba(230, 230, 230, 0.50);
}

#typora-sidebar:hover div.sidebar-content-content::-webkit-scrollbar-thumb:horizontal {
    background: rgba(230, 230, 230, 0.30);
}

.nav-group-item:active {
    background-color: #474d54 !important;
}

.md-search-hit {
    background: rgba(199, 140, 60, 0.81);
    color: #eee;
}

.md-search-hit * {
    color: #eee;
}

#md-searchpanel input {
    color: white;
}

.modal-backdrop.in {
    opacity: 1;
    backdrop-filter: blur(1px);
}


</style><title>Yocto_Build_System_Introduction</title>
</head>
<body class="typora-export os-windows"><div class="typora-export-content">
<div id="write" class><h1 id="1-初识yocto"><span>1 初识yocto</span></h1><p><span>Yocto项目是一个开源合作项目，它帮助开发者创建基于Linux的定制系统，这些系统是为嵌入式产品设计的，与产品的硬件架构无关。Yocto项目提供了一个灵活的工具集和开发环境，全球的嵌入式开发人员可以共享技术，软件堆栈，配置和最佳实践，可用于为嵌入式设备创建定制的Linux镜像。</span></p><h2 id="11-基本名词"><span>1.1 基本名词</span></h2><p><span>首先介绍几个概念，</span></p><ul><li><p><span>Yocto：开源协作项目，该项目主要是为了帮助开发人员为嵌入式产品创建基于 Linux的定制系统。主要提供一套灵活的工具和空间。</span></p></li><li><p><span>Poky：有2个含义</span></p><ul><li><span>用来构建 Linux 的构建系统，包含了 BitBake工具、编译工具链、BSP、诸多程序包或层，可以认为Poky即是Yocto的本质</span></li><li><span>使用Poky系统构建编译出来的参考 Linux 发行版本也叫Poky.</span></li></ul></li><li><p><span>openembedded：Yocto的协同开源项目，主要提供 Linux 交叉编译环境，是Yocto项目推荐的编译系统。主要为Yocto项目提供 BitBake 和OpenEmbedded-Core。</span></p></li></ul><p><span>它们之间的关系框图如下：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Poky_OpenEmbedded_Relationship.JPG" referrerpolicy="no-referrer" alt="Yocto_Poky_OpenEmbedded_Relationship"></p><h2 id="12-特性"><span>1.2 特性</span></h2><p><span>具体参见&lt;</span><a href="https://docs.yoctoproject.org/singleindex.html#features"><span>Welcome to the Yocto Project Documentation -&gt; 2.1.1 Features</span></a><span>&gt;，这里不直接引用了，直接看官方英文文档吧。</span></p><h2 id="13-相关路径"><span>1.3 相关路径</span></h2><p><span>以 yocto 开源项目为例，来看一下项目有哪些目录：</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="javascript" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="javascript"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">bitbake</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">build</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">contrib</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">documentation</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">LICENSE</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">LICENSE</span>.<span class="cm-property">GPL</span><span class="cm-operator">-</span><span class="cm-number">2.0</span><span class="cm-operator">-</span><span class="cm-variable">only</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">LICENSE</span>.<span class="cm-property">MIT</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">MEMORIAM</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">classes</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">conf</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">files</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">lib</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">bsp</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">connectivity</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">core</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">devtools</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">gnome</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">graphics</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">└──</span> <span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">kernel</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">kmod</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">linux</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">perf</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">└──</span> <span class="cm-variable">dtc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">dtc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">│</span>&nbsp;&nbsp; <span class="cm-variable">└──</span> <span class="cm-variable">make_install</span>.<span class="cm-property">patch</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">├──</span> <span class="cm-variable">dtc_1</span><span class="cm-number">.6.0</span>.<span class="cm-property">bb</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-tab" role="presentation" cm-text="	">    </span><span class="cm-variable">└──</span> <span class="cm-variable">dtc</span>.<span class="cm-property">inc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">poky</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">qt5</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">selftest</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">skeleton</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">test</span><span class="cm-operator">-</span><span class="cm-variable">layer</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">yocto</span><span class="cm-operator">-</span><span class="cm-variable">bsp</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">oe</span><span class="cm-operator">-</span><span class="cm-variable">init</span><span class="cm-operator">-</span><span class="cm-variable">build</span><span class="cm-operator">-</span><span class="cm-variable">env</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">README</span>.<span class="cm-property">hardware</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">yocto</span><span class="cm-operator">-</span><span class="cm-variable">bsp</span><span class="cm-operator">/</span><span class="cm-variable">README</span>.<span class="cm-property">hardware</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">README</span>.<span class="cm-property">OE</span><span class="cm-operator">-</span><span class="cm-variable">Core</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">README</span>.<span class="cm-property">poky</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">/</span><span class="cm-variable">README</span>.<span class="cm-property">poky</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">README</span>.<span class="cm-property">qemu</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">└──</span> <span class="cm-variable">scripts</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 1066px;"></div><div class="CodeMirror-gutters" style="display: none; height: 1066px;"></div></div></div></pre><p><span>相关目录详情如下</span></p><style> table th:first-of-type { width: 150px; } </style><figure><table><thead><tr><th style="text-align:left;"><span>目录 </span>&nbsp;<span> </span>&nbsp;<span> </span>&nbsp;</th><th><span>描述</span></th></tr></thead><tbody><tr><td style="text-align:left;"><span>bitbake</span></td><td><span>存放bitbake相关工具，BitBake是一个通用的任务执行引擎，类似Make的构建引擎（差异其实较大）。</span></td></tr><tr><td style="text-align:left;"><span>build</span></td><td><span>包含用户配置文件，以及OpenEmbedded构建系统的输出产物（包括拷贝的用于编译的源码，编译中间产物，编译最终输出）</span></td></tr><tr><td style="text-align:left;"><span>meta</span></td><td><span>meta目录是OpenEmbedded的核心元数据，包含基本的class，conf（machine机器配置，发行版本配置）和一些recipe</span></td></tr><tr><td style="text-align:left;"><span>meta-poky</span></td><td><span>Poky发行版的配置</span></td></tr><tr><td style="text-align:left;"><span>meta-selftest</span></td><td><span>这个目录添加了额外的配方和附加文件，由OpenEmbedded selftests用来验证构建系统的行为，一般不在构建系统中</span></td></tr><tr><td style="text-align:left;"><span>meta-skeleton</span></td><td><span>这个目录包含BSP和内核开发的模板配方</span></td></tr><tr><td style="text-align:left;"><span>meta-yocto-bsp</span></td><td><span>这个目录包含了Yocto项目的参考硬件板卡支持包（BSPs）。关于BSP的更多信息，请参见</span><a href="http://docs.yoctoproject.org/bsp-guide/index.html#yocto-project-board-support-package-developer-s-guide"><span>Yocto Project Board Support Package Developer’s Guide — The Yocto Project ® dev documentation</span></a></td></tr></tbody></table></figure><h2 id="14-专业术语"><span>1.4 专业术语</span></h2><style> table th:first-of-type { width: 150px; } </style><figure><table><thead><tr><th><span>术语</span></th><th><span>描述</span></th></tr></thead><tbody><tr><td><span>类（</span><code>class</code><span>）</span></td><td><span>类文件被用来抽象出共同的功能，并在多个配方（.bb）文件中共享，</span><code>BitBake</code><span>类文件使用</span><code>bbclass</code><span>后缀</span></td></tr><tr><td><span>配置文件（</span><code>conf</code><span>）</span></td><td><span>包含变量的全局定义，用户定义的变量和硬件配置信息的文件，已.conf文件名结尾。</span><br><span>build目录中的conf/local.conf配置文件为编译自动生成，包含了用户定义的变量，这些变量会影响到每次构建。</span></td></tr><tr><td><span>食谱（recipe)</span></td><td><span>一系列构建packages的指令，后缀为bb文件名。</span><br><span>主要描述从哪里获取源码，应用哪些patch，如何编译他们等等，同时还描述了库或者其他食谱的依赖关系</span></td></tr><tr><td><span>元数据（Metadata）</span></td><td><span>元数据包括类，菜谱，配置文件和引用构建指令本身的其他信息，以及用于控制构建内容并影响构建方式的数据。</span><code>OpenEmbedded Core</code><span>是一组重要的经过验证的元数据</span></td></tr><tr><td><span>Bitbake</span></td><td><span>作为</span><code>OpenEmbedded</code><span>构建系统中的构建引擎，它通过以特定格式编写的食谱工作，以执行一系列任务。</span></td></tr><tr><td><span>Task（任务）</span></td><td><span>Bitbake执行的基本单元</span></td></tr><tr><td><span>层（layer）</span></td><td><span>层是包含相关指令集的仓库，告诉OpenEmbedded构建系统要做什么。</span><br><span>主要作用为模块化开发，降低耦合度，每个大模块都构建一个Layer，例如BSP layer，主要涉及到与特定硬件相关的内容</span></td></tr><tr><td><span>包（</span><code>package</code><span>）</span></td><td><span>包含可执行的二进制文件，库，文档，配置信息和其他文件，一个食谱默认如下package：</span><br><span>  ${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}</span></td></tr></tbody></table></figure><p><span>简单来说，</span>
<span>Metadata = Configuration(.conf) + Classes(.bbclass) + Recipes(.bb)</span>
<span>Yocto = Bitbake + Metadata</span>
<span>大致框图如下：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto.JPG" referrerpolicy="no-referrer" alt="Yocto"></p><hr><p>&nbsp;</p><h1 id="2-yocto工作流程"><span>2 yocto工作流程</span></h1><p><span>Yocto的工作流程大致如下：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/yocto_workflow.JPG" referrerpolicy="no-referrer" alt="Yocto_Poky_OpenEmbedded_Relationship">
<span>主要组成部分如下：</span></p><ul><li><span>User Configuration: 可用于控制构建过程的元数据。</span></li><li><span>Metadata Layers: 元数据Layer，可以是软件层，硬件机器层，Distro等等层，主要用来减少耦合，重复利用。</span></li><li><span>Source Files: 包括上游版本（例如，tarball 或 zip 文件），本地源码，源控制管理（SCM）的提取器（例如，git 或 svn）</span></li><li><span>Build System: 在BitBake控制下的过程。这个区块阐述了BitBake如何获取源代码、应用补丁、完成编译、分析输出以生成包、创建和测试包、生成镜像以及生成交叉开发工具。</span></li><li><span>Package Feeds: 包含输出包（RPM、DEB或IPK）的目录，这些包随后被用于构建产生镜像或软件开发工具包（SDK）。</span></li><li><span>Images: 由工作流程产生的图像。</span></li><li><span>Application Development SDK: 与镜像一起制作或与BitBake单独制作的交叉开发工具。</span></li></ul><h2 id="21-user-configuration"><span>2.1 User Configuration</span></h2><p><span>用户配置有助于定义构建。通过用户配置，你能告诉BitBake你要构建的镜像的目标架构是什么，在哪里存储下载的源码，以及其他构建属性。</span>
<span>下图显示工作流程：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_User_Configuration.JPG" referrerpolicy="no-referrer" alt="Yocto_User_Configuration"></p><p><span>使用yocto poky项目tree一下build目录，查看conf目录</span></p><p><span>BitBake需要一些基本的配置文件，以完成构建。这些文件是*.conf文件。最小的必要文件作为示例文件存在于Source Directory的build/conf目录中</span></p><ul><li><span>local.conf：文件提供了许多定义构建环境的基本变量。（包括目标机选择，下载目录，共享状态目录，构建输出等等）</span></li><li><span>bblayers.conf：文件告诉BitBake，在构建时你需要考虑哪些layer。默认情况下，该文件中列出的层包括构建系统所需的最小层。</span></li><li><span>site.conf：略</span></li><li><span>auto.conf：略，自动生成</span></li></ul><h2 id="22-metadata-layers"><span>2.2 Metadata Layers</span></h2><p><span>上小一节描述了定义BitBake全局行为的用户配置。本节讲仔细分析那些用来进一步控制编译的构建系统的layer。这些层提供software、machine和policy的元数据。</span></p><p><span>一般来说，有三种类型的layer输入，你可以在工作流程图的最左侧看到它们。</span></p><ul><li><p><span>Metadata(.bb + Patches)：软件layer包含用户提供的recipe文件，patches 和append文件。示例：meta-qt5 layer layer，这个层是针对流行的Qt跨平台应用开发框架的5.0版本，用于桌面、嵌入式和移动。</span></p></li><li><p><span>Machine BSP Configuration：板卡支持包（BSP）layer提供机器特定的配置，这种类型的信息是针对特定的目标架构的，示例：meta-yocto-bsp layer</span></p></li><li><p><span>Policy Configuration：Distro Layer，为某一特定发行版构建的镜像或SDK提供顶层或一般策略，示例如下：</span></p><ul><li><span>高通Ubuntu项目 ---&gt; meta-qti-ubuntu/conf/distro/qti-distro-ubuntu-fullstack-debug.conf</span></li><li><span>yocto poky项目 ---&gt; meta-poky/conf/distro/poky.conf</span></li></ul></li></ul><p><span>下面为何3个layer的扩展框图：</span></p><p><img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Metadata.JPG" referrerpolicy="no-referrer" alt="Yocto_Metadata"></p><p><span>如图所示，一般来说，所有的层都有一个类似的结构。它们都包含一个许可文件（例如：COPYING.MIT），一个README文件一个配置目录，以及配方目录。</span>
<span>在上一小节，我们有说道，Bitbake 根据 build/conf/bblayers.conf文件的内容来确定有哪些layer参与到编译。</span></p><h2 id="23-sources"><span>2.3 Sources</span></h2><p><span>构建镜像自然会使用到源码，我们使用Android的编译系统的时候，所有源码都存放在本地，而Yocto编译系统构建系统时使用到的源码主要来自如下3个方面：</span></p><ul><li><span>Upstream Project Releases：以存档文件的形式存在于任何地方（例如，tarball或zip文件）。</span></li><li><span>Local Projects：本地源码，和之前的Android项目的源码类似，</span></li><li><span>SCMs(optional)：源控制管理（SCM）的提取器，如Git或Subversion。BitBake内部的do_fetch任务使用SRC_URI变量和参数的前缀来确定正确的获取器模块。</span></li></ul><p><span>下图是对源文件区域的工作流程图</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Sources.JPG" referrerpolicy="no-referrer" alt="Yocto_Sources"></p><h2 id="24-package-feeds"><span>2.4 Package Feeds</span></h2><p><span>Package Feeds 是构建过程中的一个中间步骤，构建系统用来临时存储包的目录是由变量的组合和使用中的特定包管理器决定的。</span>
<span>同时OpenEmbedded构建系统通过PACKAGE_CLASSES变量来指定package的类型，并且在将包放入Package Feeds中之前会使用insane类来验证它们。</span></p><p><img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Package_Feeds.JPG" referrerpolicy="no-referrer" alt="Yocto_Package_Feeds"></p><ul><li><p><span>DEPLOY_DIR: 定义为构建目录中的tmp/deploy。</span></p></li><li><p><span>DEPLOY_DIR_*: 根据package的类型不同，分别为DEPLOY_DIR_RPM, DEPLOY_DIR_IPK, DEPLOY_DIR_DEB</span></p><ul><li><span>DEPLOY_DIR_RPM = &quot;${DEPLOY_DIR}/rpm&quot;</span></li><li><span>DEPLOY_DIR_IPK = &quot;${DEPLOY_DIR}/ipk&quot;</span></li><li><span>DEPLOY_DIR_DEB = &quot;${DEPLOY_DIR}/deb&quot;</span></li></ul></li><li><p><span>PACKAGE_ARCH:定义了特定于架构的子文件夹。例如，软件包可以存在于i586或qemux86架构下。</span></p></li></ul><h2 id="25-bitbake-tool"><span>2.5 BitBake Tool</span></h2><p><span>OpenEmbedded构建系统使用BitBake来构建镜像和软件开发工具包（SDK）。在工作流程总图中，蓝色代表Bitbake部分，可以看到，BitBake区域由如下几个功能区组成。</span></p><p><img src="/2021/07/24/Yocto-Build-System-Introduction/yocto_bitbake_tool.JPG" referrerpolicy="no-referrer" alt="yocto_bitbake_tool.JPG"></p><ul><li><span>Source Fetching</span></li><li><span>Patching</span></li><li><span>Configuration, Compilation, and Staging</span></li><li><span>Package Splitting</span></li><li><span>Image Generation</span></li><li><span>SDK Generation</span></li><li><span>Stamp Files and the Rerunning of Tasks</span></li><li><span>Setscene Tasks and Shared State</span></li></ul><h3 id="251source-fetching"><span>2.5.1Source Fetching</span></h3><p><span>构建 recipe 的第一个阶段是获取和解压源代码。</span></p><ul><li><span>do_fetch：获取源文件</span></li><li><span>do_unpack解压源文件到构建目录。</span></li></ul><p><span>详细框图如下：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Source_Fetching.JPG" referrerpolicy="no-referrer" alt="Yocto_Source_Fetching"></p><p><span>注：</span>
<span>对于每个本地文件（e.g. file://）, OpenEmbedded构建系统为 recipe 提取文件的 checksum，并将该 checksum 插入do_fetch任务的签名中。如果任何本地文件被修改，do_fetch任务和所有依赖它的任务将被重新执行。</span></p><p><span>每个配方在构建目录中都有一个区域，用来存放已解压的源代码。S变量指向配方解压后的源代码的这个区域。</span></p><p><span>其中涉及到如下宏定义：</span></p><ul><li><span>TMPDIR：基础目录，OpenEmbedded构建系统在构建过程中执行其所有工作。默认的基础目录是tmp目录。</span></li><li><span>PACKAGE_ARCH。构建软件包的架构。根据包或包的最终目的地（即机器架构、构建主机、SDK或特定机器），PACKAGE_ARCH会有所不同。详情请参见变量的描述。</span></li><li><span>TARGET_OS：目标设备的操作系统。一个典型的值是 &quot;linux&quot;（例如：&quot;qemux86-poky-linux&quot;）。</span></li><li><span>PN。用于构建软件包的配方的名称。这个变量可以有多种含义。然而，当在输入文件的上下文中使用时，PN代表配方的名称。</span></li><li><span>WORKDIR：OpenEmbedded构建系统构建配方的位置（即进行创建软件包的工作的位置）。</span></li><li><span>PV：用于构建软件包的配方的版本。</span></li><li><span>PR：用于构建软件包的配方的修订版。</span></li><li><span>S: 包含给定配方的未打包的源文件。</span></li><li><span>BPN。用于建立软件包的配方的名称。BPN变量是PN变量的一个版本，但去掉了常见的前缀和后缀。</span></li><li><span>PV：用于构建软件包的配方的版本。</span></li></ul><p><span>注意：</span>
<span>在前面的图中，注意到有两个样本层次：一个是基于包架构的（即PACKAGE_ARCH），一个是基于机器的（即MACHINE）。底层结构是相同的。区别在于OpenEmbedded构建系统使用什么作为构建目标（如一般架构、构建主机、SDK或特定机器）。</span></p><h3 id="252-patching"><span>2.5.2 Patching</span></h3><p><span>一旦获取了源代码并解压，BitBake就会定位补丁文件并将其应用于源文件，详细框图如下：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Patching.JPG" referrerpolicy="no-referrer" alt="Yocto_Patching"></p><p><span>do_patch任务使用配方的SRC_URI语句和FILESPATH变量来定位适用的补丁文件。FILESPATH 变量定义了构建系统用来搜索补丁文件的默认目录集。一旦找到，补丁就会应用于配方的源文件，这些源文件位于S目录下。</span></p><h3 id="253-configuration-compilation-and-staging"><span>2.5.3 Configuration, Compilation, and Staging</span></h3><p><span>源代码打完补丁后，BitBake执行配置和编译源代码的任务。编译完成后，文件被复制到一个保存区（staged），准备打包。</span></p><p><img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Configuration_Compilation_and_Staging.JPG" referrerpolicy="no-referrer" alt="Yocto_Configuration_Compilation_and_Staging"></p><p><span>构建过程由以下任务组成：</span></p><ul><li><span>do_prepare_recipe_sysroot：这项任务在 ${WORKDIR} 中设置了两个系统根（即 recipe-sysroot 和 recipe-sysroot-native）</span></li><li><span>do_configure: 为构建中的软件 enable/disalbe 任何 build-time 和配置选项，从而来配置源。</span></li><li><span>do_compile。一旦配置任务得到满足，BitBake会使用do_compile任务编译源代码。编译发生在B变量所指向的目录中。请注意，B目录默认与S目录相同。</span></li><li><span>do_install: 编译完成后，BitBake执行do_install任务。这个任务从B目录复制文件，并把它们放在由D变量指向的保留区中。稍后会使用这个保留目录中的文件进行打包。</span></li></ul><h3 id="254-package-splitting"><span>2.5.4 Package Splitting</span></h3><p><span>在源代码被配置、编译和 staged 后，the build system analyzes the results and splits the output into packages。</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Package_Splitting.JPG" referrerpolicy="no-referrer" alt="Yocto_Package_Splitting"></p><ul><li><span>do_package 和 do_packagedata 任务结合起来，分析在D目录中发现的文件，并根据可用的包和文件将它们分成子集。</span></li><li><span>do_packagedata 任务根据分析结果创建包的元数据，以便构建系统能够生成最终的包。</span></li><li><span>do_populate_sysroot 任务将 do_install 任务所安装的文件子集分阶段（复制）到适当的系统根中。</span></li></ul><p><span>根据正在创建的包的类型（RPM、DEB或IPK），do_package_write_*任务会创建实际的包，并把它们放在Package Feed区域，也就是${TMPDIR}/deploy。</span></p><h3 id="255-image-generation"><span>2.5.5 Image Generation</span></h3><p><span>一旦软件包被拆分并存储在Package Feeds区域，构建系统就会使用BitBake来生成根文件系统镜像。大致流程图如下：</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Image_Generation.JPG" referrerpolicy="no-referrer" alt="Yocto_Image_Generation"></p><p><span>镜像生成过程由几个阶段组成，并依赖于几个任务和变量。</span></p><ul><li><span>do_rootfs 任务为一个镜像创建根文件系统（文件和目录结构）。这个任务使用几个关键变量来帮助创建要实际安装的软件包列表。</span></li></ul><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">IMAGE_INSTALL: 列出基本的软件包集，从Package Feeds区进行安装。</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">package_exclude: 指定不应该被安装到镜像中的软件包。</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">image_features: 指定要包含在镜像中的特性。大多数这些功能都映射到额外的软件包中进行安装。</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">package_classes: 指定要使用的软件包后端（例如 RPM、DEB 或 IPK），从而帮助确定在软件包馈送区域内找到软件包的位置。</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">IMAGE_LINGUAS: 确定安装额外语言支持包的语言。</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">PACKAGE_INSTALL: 传递给软件包管理器以安装到镜像中的最终软件包列表。</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 182px;"></div><div class="CodeMirror-gutters" style="display: none; height: 182px;"></div></div></div></pre><ul><li><span>do_rootfs任务的最后阶段是处理后期处理。后期处理包括创建一个清单文件和优化。</span></li><li><span>do_image:在根文件系统建立后，通过do_image任务开始对镜像进行处理</span></li><li><span>do_image_*：将所有东西变成一个镜像文件或一组镜像文件，并可以压缩根文件系统镜像以减少镜像的整体大小</span></li><li><span>do_image_complete：This task completes the image by applying any image post processing as defined through the IMAGE_POSTPROCESS_COMMAND variable. 该变量指定了在构建系统创建最终镜像时输出文件后要调用的函数列表。</span></li></ul><h3 id="256-sdk-generation"><span>2.5.6 SDK Generation</span></h3><p><span>OpenEmbedded构建系统使用BitBake来生成标准SDK和可扩展SDK（eSDK）的软件开发工具包（SDK）安装脚本。</span></p><p><img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_SDK_Generation.JPG" referrerpolicy="no-referrer" alt="Yocto_SDK_Generation"></p><p><span>与镜像生成一样，SDK脚本的过程由几个阶段组成，并取决于许多变量。</span></p><ul><li><span>do_populate_sdk任务帮助创建标准的SDK，并处理两个部分：一个目标部分和一个主机部分。目标部分是为目标硬件建立的部分，包括库和头文件。主机部分是SDK中在SDKMACHINE上运行的部分。</span></li><li><span>do_populate_sdk_ext任务有助于创建可扩展的SDK，它处理主机和目标部分的方式与处理标准SDK的方式不同。对于可扩展的SDK，该任务封装了构建系统，其中包括SDK所需的一切（主机和目标）。</span></li></ul><p><span>无论构建何种类型的SDK，任务都会进行一些清理工作，然后创建交叉开发环境设置脚本和任何需要的配置文件。最后的输出是交叉开发工具链安装脚本（.sh文件），其中包括环境设置脚本。</span></p><h3 id="257-stamp-files-and-the-rerunning-of-tasks"><span>2.5.7 Stamp Files and the Rerunning of Tasks</span></h3><p><span>对于每个成功完成的任务，BitBake会在STAMPS_DIR目录下写一个印章文件。Stamp 文件的文件名的开头由STAMP变量决定，文件名的结尾由任务的名称和当前输入的校验值组成。</span></p><p><span>为了确定一个任务是否需要重新运行，BitBake检查该任务是否存在一个具有匹配输入校验和的Stamp 文件。在这种情况下，任务的输出被认为是存在的并且仍然有效。否则，该任务将被重新运行。</span></p><h3 id="258-setscene-tasks-and-shared-state"><span>2.5.8 Setscene Tasks and Shared State</span></h3><p><span>略</span></p><h2 id="26-images"><span>2.6 Images</span></h2><p><span>构建系统产生的镜像是根文件系统的压缩形式，可以在目标设备上启动。</span>
<span>如下图所示，BitBake的部分产物来构成镜像。</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Images.JPG" referrerpolicy="no-referrer" alt="Yocto_Images"></p><p><span>如图所示，构建过程将镜像写到tmp/deploy/images/machine/文件夹内的构建目录。这个文件夹包含了预期在目标设备上加载的任何文件。</span></p><ul><li><span>DEPLOY_DIR变量指向部署目录</span></li><li><span>DEPLOY_DIR_IMAGE变量指向包含当前配置镜像的合适目录。</span></li><li><span>kernel-image：一个内核二进制文件。KERNEL_IMAGETYPE变量决定了内核镜像文件的命名方案。根据这个变量，该文件可以以各种命名字符串开始。deploy/images/machine目录可以包含机器的多个镜像文件。</span></li><li><span>root-filesystem-image：目标设备的根文件系统（例如，</span><em><span>.ext3或</span></em><span>.bz2文件）。IMAGE_FSTYPES变量决定了根文件系统镜像的类型。deploy/images/machine目录可以包含机器的多个根文件系统。</span></li><li><span>kernel-modules：包含所有为内核建立的模块的压缩包。内核模块压缩包的存在是出于传统的目的，可以通过将MODULE_TARBALL_DEPLOY变量设置为 &quot;0 &quot;来抑制。deploy/images/machine目录可以包含机器的多个内核模块tarballs。</span></li><li><span>bootloaders：如果适用于目标机器，支持镜像的引导程序。deploy/images/machine目录可以包含该机器的多个引导程序。</span></li><li><span>symlinks：deploy/images/machine文件夹包含一个符号链接，指向每台机器的最新构建的文件。这些链接对于需要获得每个文件的最新版本的外部脚本可能很有用。</span></li></ul><h2 id="27-application-development-sdk"><span>2.7 Application Development SDK</span></h2><p><span>在总的工作流程图中，标有 &quot;Application Development SDK &quot;的输出代表一个SDK。</span>
<span>详情略</span></p><h2 id="28-shared-state-cache"><span>2.8 Shared State Cache</span></h2><p><span>根据设计，OpenEmbedded构建系统从头开始构建，除非BitBake可以确定部件不需要重新构建。从根本上说，从头开始构建是有吸引力的，因为它意味着所有的部件都是全新构建的，没有可能出现陈旧的数据而导致问题。当开发人员遇到问题时，他们通常会默认回到从头开始构建，这样他们从一开始就有一个已知的状态。</span></p><p><span>从头开始构建镜像的过程既是一个优势，也是一个劣势。正如上一段提到的，从头开始构建可以确保所有的东西都是最新的，并从已知的状态开始。然而，从头开始构建也需要更长的时间，因为它通常意味着重建那些不一定需要重建的东西。</span></p><p><span>Yocto项目实现了共享状态代码，支持增量构建。共享状态代码的实现回答了以下问题，这些问题是OpenEmbedded增量构建支持系统中的基本路障。</span></p><p><span>Q：系统的哪些部分已经改变，哪些部分没有改变？</span>
<span>A：构建系统通过创建任务输入的校验和（或签名）来检测给定任务的 &quot;输入 &quot;的变化。如果校验和发生变化，系统就认为输入发生了变化，任务就需要重新运行。</span></p><p><span>Q：如何删除和替换已经改变的软件片段？</span>
<span>A：共享状态（sstate）代码跟踪哪些任务为构建过程增加了哪些输出。这意味着一个特定任务的输出可以被删除、升级或以其他方式操作</span></p><p><span>Q：当预建的组件可用时，如何使用这些不需要从头开始重建的组件？</span>
<span>由第二个问题的解决方案部分解决，假设构建系统可以从远程位置获取sstate对象，如果它们被认为是有效的，就可以安装它们。</span></p><p><span>本节的其余部分将详细介绍整个增量构建架构、校验和（签名）和共享状态。</span></p><h3 id="281-overall-architecture"><span>2.8.1 Overall Architecture</span></h3><p><span>当确定系统的哪些部分需要被构建时，BitBake以每任务为基础工作，而不是以每配方为基础，因为以任务为基础比以配方为基础更加高效。</span></p><h3 id="282-checksums-signatures"><span>2.8.2 Checksums (Signatures)</span></h3><p><span>共享状态代码使用校验和，这是一个任务输入的唯一签名，以确定一个任务是否需要再次运行。因为触发重新运行的是任务输入的变化，所以这个过程需要检测一个特定任务的所有输入。</span></p><h3 id="283-shared-state"><span>2.8.3 Shared State</span></h3><p><span>略</span></p><h2 id="29-automatically-added-runtime-dependencies"><span>2.9 Automatically Added Runtime Dependencies</span></h2><p><span>OpenEmbedded构建系统会自动添加软件包之间的常见类型的运行时依赖关系，这意味着你不需要使用RDEPENDS明确地声明软件包。有三种自动机制（shlibdeps、pcdeps和depchains）分别处理共享库、包配置（pkg-config）模块以及-dev和-dbg包。对于其他类型的运行时依赖关系，你必须手动声明这些依赖关系。</span>
<span>详细介绍略</span></p><p><span>当允许执行某些通常为根用户保留的操作时，一些任务更容易实现（例如do_install、do_package_write</span><em><span>、do_rootfs和do_image</span></em><span>）。例如，do_install任务可以将已安装文件的UID和GID设置为任意值，这让它受益匪浅。</span></p><p><span>允许任务执行仅有root权限的操作的一种方法是要求BitBake以root身份运行。然而，这种方法很麻烦，而且有安全问题。实际使用的方法是在一个 &quot;假 &quot;根环境中运行受益于根权限的任务。在这个环境中，任务和它的子进程认为它们是以根用户身份运行的，并看到文件系统的内部一致视图。只要生成最终的输出（例如，一个包或一个镜像）不需要根权限，那么先前的一些步骤在假根环境中运行的事实就不会造成问题。</span></p><p><span>在假根环境中运行任务的能力被称为 &quot;fakeroot&quot;，它来自于BitBake的关键字/变量标志，要求为一个任务提供假根环境。</span></p><h2 id="210-fakeroot-and-pseudo"><span>2.10 Fakeroot and Pseudo</span></h2><p><span>当允许执行某些通常为根用户保留的操作时，一些任务更容易实现（例如do_install、do_package_write</span><em><span>、do_rootfs和do_image</span></em><span>）。例如，do_install任务可以将已安装文件的UID和GID设置为任意值，这让它受益匪浅。</span></p><p><span>允许任务执行仅有root权限的操作的一种方法是要求BitBake以root身份运行。然而，这种方法很麻烦，而且有安全问题。实际使用的方法是在一个 &quot;假 &quot;根环境中运行受益于根权限的任务。在这个环境中，任务和它的子进程认为它们是以根用户身份运行的，并看到文件系统的内部一致视图。只要生成最终的输出（例如，一个包或一个镜像）不需要根权限，那么先前的一些步骤在假根环境中运行的事实就不会造成问题。</span></p><p><span>在假根环境中运行任务的能力被称为 &quot;fakeroot&quot;，它来自于BitBake的关键字/变量标志，要求为一个任务提供假根环境。</span></p><p><span>在OpenEmbedded构建系统中，实现fakeroot的程序被称为Pseudo。Pseudo通过使用环境变量LD_PRELOAD来重写系统调用，这就造成了以root身份运行的假象。为了跟踪需要root权限的操作所产生的 &quot;假 &quot;文件所有权和权限，Pseudo使用一个SQLite 3数据库。这个数据库存储在${WORKDIR}/pseudo/files.db中，用于各个菜谱。将数据库存储在文件中，而不是存储在内存中，使得任务和构建之间具有持久性，而这是使用fakeroot无法实现的。</span></p><p>&nbsp;</p><p>&nbsp;</p><hr><p>&nbsp;</p><h1 id="3-yocto-project组件"><span>3. Yocto Project组件</span></h1><p><span>从根本上说，BitBake是一个通用的任务执行引擎，它允许shell和Python任务有效地并行运行，同时在复杂的任务间依赖性约束下工作。BitBake的主要用户之一，OpenEmbedded，采用这个核心，用面向任务的方法构建嵌入式Linux软件堆栈。</span></p><p><span>从概念上讲，BitBake在某些方面类似于GNU Make，GNU Make通过 &quot;makefiles &quot;实现其控制，而BitBake使用 &quot;recipes&quot;，但又有很大的不同。</span></p><p><span>BitBake扩展了像GNU Make这样的简单工具的能力，允许定义更复杂的任务，如组装整个嵌入式Linux发行版。</span></p><p><span>BitBake通过提供能建立任务的元数据来执行任务。元数据存储在配方（.bb）和相关的配方&quot;附加&quot;（.bbappend）文件、配置（.conf）和底层包括（.inc）文件，以及类（.bbclass）文件中。元数据为BitBake提供了关于运行什么任务以及这些任务之间的依赖关系的指示。</span></p><p><span>BitBake包括一个获取器库，用于从各种地方获取源代码，如本地文件、源码控制系统或网站。</span></p><p><span>每个要构建的单元（如一个软件）的指令被称为 &quot;配方 &quot;文件，包含该单元的所有信息（依赖性、源文件位置、校验和、描述等）。</span></p><h2 id="recipes"><span>Recipes</span></h2><p><span>BitBake配方，以文件扩展名.bb表示，是最基本的元数据文件。这些配方文件为BitBake提供了以下内容。</span></p><ul><li><span>关于软件包的描述性信息（作者、主页、许可证，等等</span></li><li><span>配方的版本</span></li><li><span>现有的依赖性（包括构建和运行时的依赖性</span></li><li><span>源代码的位置以及如何获取它</span></li><li><span>源代码是否需要任何补丁，在哪里可以找到它们，以及如何应用它们</span></li><li><span>如何配置和编译源代码</span></li><li><span>如何将生成的工件组装成一个或多个可安装包</span></li><li><span>在目标机器上哪里安装所创建的包？</span></li></ul><h2 id="configuration-files"><span>Configuration Files</span></h2><p><span>配置文件，用.conf扩展名表示，定义了管理项目构建过程的各种配置变量。</span>
<span>这些文件分为几个区域，分别定义机器配置、分布式配置、可能的编译器tuning、一般通用配置和用户配置。</span></p><h2 id="classes"><span>Classes</span></h2><p><span>类文件，用.bbclass扩展名表示，包含在元数据文件之间共享的有用信息。</span>
<span>BitBake source tree目前带有一个名为base.bbclass的类元数据文件。</span>
<span>你可以在meta/classes/目录中找到这个文件。base.bbclass类文件很特别，因为它总是自动包含在所有配方和类中。</span>
<span>这个类包含了标准基本任务的定义，如获取、解包、配置（默认为空）、编译（运行任何存在的Makefile）、安装（默认为空）和打包（默认为空）。这些任务经常被在项目开发过程中添加的其他类所覆盖或扩展。</span></p><h2 id="layers"><span>Layers</span></h2><p><span>Layer允许你将不同类型的定制内容相互隔离。当你在一个项目上工作时，你可能会发现把所有东西都放在一个层里是很诱人的，但你的元数据越是模块化，就越容易应对未来的变化。</span></p><h2 id="append-files"><span>Append Files</span></h2><p><span>附加文件，是具有.bbappend文件扩展名的文件，扩展或覆盖现有配方文件中的信息。</span></p><p><span>BitBake希望每个附加文件都有一个相应的配方文件。此外，附录文件和相应的配方文件必须使用相同的根文件名。文件名只能在使用的文件类型后缀上有所不同（例如formfactor_0.0.bb和formfactor_0.0.bbappend）。</span></p><p><span>附加文件中的信息扩展或覆盖了底层的、类似名称的配方文件中的信息。</span></p><p><span>当你为append文件命名时，你可以使用&quot;%&quot;通配符来允许匹配配方名称。例如，假设你有一个附录文件，命名如下。</span></p><p><span>busybox_1.21.%.bbappend</span>
<span>该附录文件将匹配任何busybox_1.21.x.bb版本的配方。因此，该附录文件将与以下配方名称相匹配。</span></p><p><span>busybox_1.21.1.bb</span>
<span>busybox_1.21.2.bb</span>
<span>busybox_1.21.3.bb</span></p><p><span>Bitbake的工作流程简易图如下</span>
<img src="/2021/07/24/Yocto-Build-System-Introduction/Yocto_Simple_Workflow.png" referrerpolicy="no-referrer" alt="Yocto_Simple_Workflow"></p><p><span>OE task编译的顺序如下：</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_setscene</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_fetch</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_unpack</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_path</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_configure</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_qa_configure</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_compile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_stage</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_install</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_package</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_populate_staging</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_package_write_deb</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_package_write</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_distribute_sources</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_qa_staging</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_build</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_rebuild</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 442px;"></div><div class="CodeMirror-gutters" style="display: none; height: 442px;"></div></div></div></pre><h1 id="4-bitbake-语法"><span>4. bitbake 语法</span></h1><p><span>BitBake文件有自己的语法，这里只是列出常用语法，详细规则请参考官方如下文档：</span>
<a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#syntax-and-operators"><span>3 Syntax and Operators — Bitbake dev documentation (yoctoproject.org)</span></a></p><h2 id="basic-语法"><span>Basic 语法</span></h2><p><span>本节提供一些基本的语法例子。</span></p><h3 id="1-基本变量设置"><span>1. 基本变量设置</span></h3><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 设置变量 VARIABLE 为 “value”</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">VARIABLE = "value"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 使用单引号，这样做允许你使用包含双引号字符的值。</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">VARIABLE = 'I have a " in my value'</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 与Bourne shells不同，单引号与双引号在所有其他方面的作用相同。它们不会抑制变量的扩展。</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 208px;"></div><div class="CodeMirror-gutters" style="display: none; height: 208px;"></div></div></div></pre><h3 id="2-line-joining"><span>2. Line Joining</span></h3><p><span>在函数之外，BitBake在解析语句之前将任何以反斜杠字符结尾的行与下一行连接起来。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO = "bar \</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; baz \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; qaz"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><p><span>在连接行时，&quot;&quot;字符和它后面的换行符都被删除。因此，FOO的值中没有换行符。</span></p><p><span>注意，下面示例中FOO的值一致：</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO = "barbaz"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO = "bar\</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">baz"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><h3 id="3-变量名展开"><span>3. 变量名展开</span></h3><p><span>变量可以使用类似于 Bourne shell 中的变量扩展的语法来引用其他变量的内容。 </span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">A = "aval"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">B = "pre${A}post"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><p><span>A的当前值为&quot;aval&quot;，B的值为&quot;preavalpost&quot;，有2点需要注意</span>
<span>	</span><span>- &quot;=&quot;运算符不会立即展开右侧的变量引用。相反，扩展被推迟到实际使用被分配的变量时进行。其结果取决于被引用变量的当前值，即B的值都会依赖当时A的值。</span>
<span>	</span><span>- 变量扩展时，“{}”不可省略。</span></p><h3 id="4-变量的其他赋值方式"><span>4. 变量的其他赋值方式</span></h3><p><span>a. 设置默认值(?=)</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">A ?="aval"</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>如果在解析这条语句时，A被设置了，那么该变量将保留其值。但是，如果A没有被设置，变量就会被设置为 &quot;aval&quot;。</span>
<span>注：&quot;?=&quot;这个赋值是即时的。因此，如果对一个变量存在多个&quot;?=&quot;赋值，那么最终会使用其中的第一个。</span></p><p><span>  </span></p><p><span>b. 设置weak默认值(??=)</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">A ??= "somevalue"</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>和&quot;?=&quot;功能相同，只是赋值是在解析过程的最后进行，而不是立即进行。</span>
<span>因此，当存在多个&quot;??=&quot;赋值时，将使用最后一个。另外，任何&quot;=&quot;或&quot;?=&quot;赋值都将覆盖用&quot;?=&quot;设置的值。这里有一个例子。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">A ??= "some value"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">A ??= "some other value"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><p><span>如果在解析上述语句之前设置了A，则该变量保留其值。如果没有设置A，则变量被设置为 &quot;some other value&quot;.</span></p><p><span>c. 立即变量展开(:=)</span>
<span>&quot;:=&quot;操作符的结果是变量的内容被立即展开，而不是在实际使用该变量时。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">T = "123"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">A := "test ${T}"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">T = "456"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">B := "${T} ${C}"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">C = "cval"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">C := "${C}append"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 156px;"></div><div class="CodeMirror-gutters" style="display: none; height: 156px;"></div></div></div></pre><p><span>在这个例子中，A变量值为 &quot;test 123&quot;，尽管T的最终值是 &quot;456&quot;。</span>
<span>变量B最终值为 &quot;456 cvalappend&quot;。这是因为对未定义变量的引用在（即时）扩展过程中被原样保留。</span>
<span>这与GNU Make不同，在GNU Make中，未定义的变量会被扩展为零。因为${C}立即扩展为 &quot;cval&quot;，所以变量C的值为 &quot;cvalappend&quot;。</span></p><p><span>d. 自带空格的Appending(+=)和Prepending(=+)</span>
<span>&quot;+=&quot;和&quot;=+&quot;在当前值和新追加的值之间会插入一个空格,操作为即时赋值。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">B = "bval"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">B += "additionaldata"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">C = "cval"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">C =+ "test"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 104px;"></div><div class="CodeMirror-gutters" style="display: none; height: 104px;"></div></div></div></pre><p><span>变量B值为 &quot;bval additionaldata&quot;，变量C值为 &quot;test cval&quot;。</span></p><p><span>e. 不带空格的Appending(.=)和Prepending(=.)</span>
<span>如果你想在后追加或者前追加变量值，而又不带空格，可以使用&quot;.=&quot; 和 &quot;=.&quot;,操作为即时赋值。</span>
<span>B = &quot;bval&quot;</span>
<span>B .= &quot;additionaldata&quot;</span>
<span>C = &quot;cval&quot;</span>
<span>C =. &quot;test&quot;</span>
<span>变量B值为 &quot;bvaladditionaldata&quot;，变量C值为 &quot;testcval&quot;。</span></p><p><span>f. Appending and Prepending (Override Style Syntax)</span>
<span>上面的&quot;:=&quot;、&quot;.=&quot;、&quot;=.&quot;、&quot;+=&quot;和&quot;=+&quot;都是即时操作，这里介绍的变量赋值是变量展开时应用，并且不会插入空格</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="B = &quot;bval&quot;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="b = &quot;bval&quot;"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">B_append = " additional data"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">C = "cval"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">C_prepend = "additional data "</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">D = "dval"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">D_append = "additional data"</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 130px;"></div><div class="CodeMirror-gutters" style="display: none; height: 130px;"></div></div></div></pre><p><span>变量B值为 &quot;bvaladditionaldata&quot; ，变量C值为 &quot;testcval&quot;.</span></p><p><span>g. Removal (Override Style Syntax)</span>
<span>同样，bitbake提供Override Style Syntax来移除某些变量值。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO = "123 456 789 123456 123 456 123 456"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO_remove = "123"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO_remove = "456"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO2 = " abc def ghi abcdef abc def abc def def"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">FOO2_remove = "\</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  def \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  abc \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  ghi \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  "</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 234px;"></div><div class="CodeMirror-gutters" style="display: none; height: 234px;"></div></div></div></pre><p><span>变量FOO变成 &quot;789 123456&quot;，变量FOO2变成 &quot;abcdef&quot;。</span>
<span>像&quot;</span><em><span>append &quot;和&quot;</span></em><span>prepend &quot;一样，&quot;_remove &quot;为非即时操作，而是在变量扩展时应用。</span></p><p><span>h. 解除变量的设置(unset)</span>
<span>使用unset来删除变量：</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 删除变量DATE</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">unset DATE</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><h2 id="共享功能"><span>共享功能</span></h2><p><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#sharing-functionality" target="_blank" class="url">https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#sharing-functionality</a>
<span>后面抽空补上</span></p><h2 id="functions"><span>Functions</span></h2><p><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#functions" target="_blank" class="url">https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#functions</a>
<span>后面抽空补上</span></p><h2 id="tasks"><span>Tasks</span></h2><p><a href="https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#tasks" target="_blank" class="url">https://docs.yoctoproject.org/bitbake/bitbake-user-manual/bitbake-user-manual-metadata.html#tasks</a>
<span>后面补上</span></p><h1 id="5-how-to-add-the-layer-and-recipe"><span>5. How to add the layer and recipe</span></h1><p><span>meta layer有很多开源的项目，各大厂家有提供自己的meta layer（高通:meta-qcom, TI:meta-ti, Intel：meta-intel ARM:meta-arm 等等），有时候我们可能会使用到一些第三方的meta layer，那么就需要手动添加这些 meta layer,有2种方法，如下：</span></p><h2 id="手动添加第三方-meta-layer"><span>手动添加第三方 meta layer</span></h2><ol start><li><span>下载需要的meta layer 到poky目录：</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ git clone git@github.com:meta-qt5/meta-qt5.git</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><ol start="2"><li><p><span>切换 meta-qt5 到合适poky的版本：</span>
<span>a.在meta/conf/layer.conf文件中查找如下属性，确定poky版本</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">LAYERSERIES_CORENAMES = "dunfell" #yocto版本名</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>b.在master分支中，查看meta-qt5/conf/layer.conf文件内容如下,说明是兼容yocto的当前版本的</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">...</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">LAYERSERIES_COMPAT_qt5-layer = "dunfell gatesgarth hardknott"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">...</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><p><span>c.如果master分支不兼容yocto版本，需要切换为支持当前yocto版本的分支。</span></p></li><li><p><span>添加meta-qt5:</span></p></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ source oe-init-build-env</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">...</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">build$ bitbake-layers add-layer ../meta-qt5</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><h2 id="自动添加第三方-meta-layer"><span>自动添加第三方 meta layer</span></h2><p><span>如下命令会自行在 </span><a href="http://layers.openembedded.org/layerindex/branch/master/layers/" target="_blank" class="url">http://layers.openembedded.org/layerindex/branch/master/layers/</a><span> 网址中拉取 meta layer并添加该meta layer到项目中。</span>
<span>（如果目标meta layer有依赖，该命令会同时添加所依赖的meta layer）</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ source oe-init-build-env</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">build$ bitbake-layers layerindex-fetch meta-qt5</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><h2 id="创建自己的layer"><span>创建自己的layer</span></h2><p><span>对于当前项目中没有合适的meta layer，这种情况我们可能需要新建自己的layer，方法如下:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ source oe-init-build-env</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 在上级目录 poky 中创建 meta-test-layer 目录</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">build$ bitbake-layers create-layer ../meta-test-layer</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">NOTE: Starting bitbake server...</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 把 poky/meta-test-layer 添加到项目中</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">build$ bitbake-layers add-layer ../meta-test-layer</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">NOTE: Starting bitbake server...</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 查看目前有哪些meta layer</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">build$ bitbake-layers show-layers</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">NOTE: Starting bitbake server...</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">layer &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; path &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  priority</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">==========================================================================</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  /home/user/host/code/poky/poky/meta &nbsp; &nbsp; &nbsp; 5</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta-poky &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /home/user/host/code/poky/poky/meta-poky  5</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta-yocto-bsp &nbsp; &nbsp; &nbsp;  /home/user/host/code/poky/poky/meta-yocto-bsp  5</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta-test-layer &nbsp; &nbsp; &nbsp; /home/user/host/code/poky/poky/meta-test-layer  6</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 查看添加的 meta-test-layer 有如下内容，里面包含了一个示例recipe,名字为example，该recipe仅仅在编译时打印字符串输出</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ tree meta-test-layer/</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta-test-layer/</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">├── conf</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; └── layer.conf</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">├── COPYING.MIT</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">├── README</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">└── recipes-example</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  └── example</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  └── example_0.1.bb</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 806px;"></div><div class="CodeMirror-gutters" style="display: none; height: 806px;"></div></div></div></pre><h2 id="第一个recipe"><span>第一个recipe</span></h2><p><span>接下来我们将添加一个 hello-world recipe demo，分别使用Makefile，Autotools和Cmake 3种构建方式。</span>
<span>首先在 recipes-example 统计目录 新增 recipes-hello-world 目录。</span></p><h3 id="makefile-方式"><span>Makefile 方式</span></h3><ol start><li><span>构造demo源码:hello-world.c</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;stdio.h&gt;</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable-3">int</span> <span class="cm-def">main</span> (<span class="cm-variable-3">int</span> <span class="cm-variable">argc</span>, <span class="cm-variable-3">char</span> <span class="cm-variable-3">**</span><span class="cm-variable">argv</span>)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">printf</span>(<span class="cm-string">"Hello World!\n"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 182px;"></div><div class="CodeMirror-gutters" style="display: none; height: 182px;"></div></div></div></pre><ol start="2"><li><span>编写相应的 Makefile</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="makefile" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="makefile"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">TARGET =</span> hello-world-makefile-bin</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">all :</span>= <span class="cm-quote">$(TARGET)</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">CFLAGS ?= -Wall -O</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">OBJS =</span> hello-world.o</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-quote">$(TARGET)</span>: <span class="cm-quote">$(OBJS)</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-quote">$(CC)</span> <span class="cm-quote">$(CFLAGS)</span> <span class="cm-quote">$(LDFLAGS)</span> <span class="cm-quote">$^</span> -o <span class="cm-quote">$@</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">clean:</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-quote">$(RM)</span> <span class="cm-quote">$(TARGET)</span> <span class="cm-quote">$(OBJS)</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">.PHONY:</span> all clean</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 364px;"></div><div class="CodeMirror-gutters" style="display: none; height: 364px;"></div></div></div></pre><p><span>3.编译hello-world-makefile.bb文件</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="makefile" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="makefile"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">SUMMARY =</span> <span class="cm-string">"helloworld of makefile recipe"</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">DESCRIPTION =</span> <span class="cm-string">"My hello world application"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">LICENSE =</span> <span class="cm-string">"CLOSED"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">FILESEXTRAPATHS_prepend :</span>= <span class="cm-string">"${THISDIR}:"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment"># 指定源文件路径</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">SRC_URI =</span> <span class="cm-string">"file://source-makefile \</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment"># 构建目录中解压后的配方源代码所在的位置</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">S = <span class="cm-string">"${WORKDIR}/source-makefile/"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">CFLAGS_append =</span> <span class="cm-string">"-Wall -O -g"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">EXTRA_OEMAKE =</span> <span class="cm-string">"'CC=${CC}' 'CFLAGS=${CFLAGS}'"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">EXTRA_OEMAKE_append =</span> <span class="cm-string">" 'LDFLAGS=${LDFLAGS}'"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">EXTRA_OEMAKE_append =</span> <span class="cm-string">" 'DESTDIR=${D}'"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">do_compile() {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  oe_runmake</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">do_install () {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  install -d <span class="cm-quote">${D}${bindir}</span>/</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  install -m 0755 <span class="cm-quote">${S}</span>/hello-world-makefile-bin <span class="cm-quote">${D}${bindir}</span>/</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">FILES_${PN} =</span> <span class="cm-string">"${bindir}/"</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 754px;"></div><div class="CodeMirror-gutters" style="display: none; height: 754px;"></div></div></div></pre><ol start="4"><li><span>构建目录结构，可以看到我们在meta-test-layer中，我们添加了recipes-hello-world目录，在其中新添加了 hello-world-makefile 配方</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">poky$</span> <span class="cm-variable">tree</span> <span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">test</span><span class="cm-operator">-</span><span class="cm-variable">layer</span><span class="cm-operator">/</span><span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">/</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">test</span><span class="cm-operator">-</span><span class="cm-variable">layer</span><span class="cm-operator">/</span><span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">└──</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">bb</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-variable">└──</span> <span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">├──</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span>.<span class="cm-variable">c</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">└──</span> <span class="cm-variable">Makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">2</span> <span class="cm-variable">directories</span>, <span class="cm-number">3</span> <span class="cm-variable">files</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 234px;"></div><div class="CodeMirror-gutters" style="display: none; height: 234px;"></div></div></div></pre><ol start="5"><li><span>最后执行如下命令来编译 hello-world-makefile 配方。</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="javascript"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="javascript"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">poky$</span> <span class="cm-variable">source</span> <span class="cm-variable">oe</span><span class="cm-operator">-</span><span class="cm-variable">init</span><span class="cm-operator">-</span><span class="cm-variable">build</span><span class="cm-operator">-</span><span class="cm-variable">env</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">poky</span><span class="cm-operator">/</span><span class="cm-variable">build$</span> <span class="cm-variable">bitbake</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><ol start="6"><li><span>最后我们来看下在build目录下，生成了哪些内容。</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">1.</span><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">cache目录，为共享状态缓存，编译后出出现很多如下文件</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">cache</span><span class="cm-operator">/</span><span class="cm-number">8</span><span class="cm-variable">b</span><span class="cm-operator">/</span><span class="cm-number">2</span><span class="cm-variable">a</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span>:<span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>:<span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span>:<span class="cm-number">1.0</span>:<span class="cm-variable">r0</span>:<span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span>:<span class="cm-number">3</span>:<span class="cm-number">8</span><span class="cm-variable">b2ad563f4d36563ec534b32d33870d0f563d6bd0584a09eedb83da339c763d0_populate_sysroot</span>.<span class="cm-variable">tgz</span>.<span class="cm-variable">siginfo</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">2.</span><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sysroots</span><span class="cm-operator">-</span><span class="cm-variable">components目录，该目录包含的内容是任务</span> <span class="cm-variable">do_prepare_recipe_sysroot</span> <span class="cm-variable">把在DEPENDS列出来的recipe</span> <span class="cm-variable">link</span> <span class="cm-variable">或者</span> <span class="cm-variable">copy</span> <span class="cm-variable">到</span> <span class="cm-variable">recipe</span><span class="cm-operator">-</span><span class="cm-variable">specific</span> <span class="cm-variable">sysroot</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sysroots</span><span class="cm-operator">-</span><span class="cm-variable">components</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sysroots</span><span class="cm-operator">-</span><span class="cm-variable">components</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-variable">sysroot</span><span class="cm-operator">-</span><span class="cm-variable">providers</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">3.</span><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">stamps目录，bitbake通过该目录对应的文件来判断任务是否修改，从而在编译时重新编译该任务</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">stamps</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">4.</span><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">目录：OpenEmbedded构建系统使用这个目录来保存共享状态清单文件</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">package_qa</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">deploy_source_date_epoch</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">populate_sysroot</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">package_write_rpm</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">populate_lic</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">package</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">sstate</span><span class="cm-operator">-</span><span class="cm-variable">control</span><span class="cm-operator">/</span><span class="cm-variable">manifest</span><span class="cm-operator">-</span><span class="cm-variable">qemux86_64</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">packagedata</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">5.</span><span class="cm-variable">$</span>{<span class="cm-variable">WORKDIR</span>}<span class="cm-variable">目录，OpenEmbedded构建系统构建配方的工作目录的路径名称，</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># 具体路径为 ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">6.</span><span class="cm-variable">在bb文件有指定：S</span> <span class="cm-operator">=</span> <span class="cm-string">"${WORKDIR}/source-makefile/"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">构建目录中解压后的配方源代码所在的位置，hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin也生成在该目录</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">7.</span><span class="cm-variable">$</span>{<span class="cm-variable">WORKDIR</span>}<span class="cm-operator">/</span><span class="cm-variable">package目录，do_package任务的输出，该输出还没有被分割为独立的package</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">package</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">src</span><span class="cm-operator">/</span><span class="cm-variable">debug</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">package</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">package</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span>.<span class="cm-variable">debug</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">8.</span><span class="cm-variable">$</span>{<span class="cm-variable">WORKDIR</span>}<span class="cm-operator">/</span><span class="cm-variable">package目录</span>,<span class="cm-variable">do_package任务的输出，该输出已经被分割为独立的package</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">src</span><span class="cm-operator">/</span><span class="cm-variable">debug</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">doc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">locale</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">staticdev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">shlibdeps</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">packages</span><span class="cm-operator">-</span><span class="cm-variable">split</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span>.<span class="cm-variable">debug</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">9.</span><span class="cm-variable">$</span>{<span class="cm-variable">WORKDIR</span>}<span class="cm-operator">/</span><span class="cm-variable">pkgdata目录</span>,<span class="cm-variable">指向do_package任务保存软件包元数据的临时工作区。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">doc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">locale</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">staticdev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">10.</span><span class="cm-variable">$</span>{<span class="cm-variable">WORKDIR</span>}<span class="cm-operator">/</span><span class="cm-variable">image目录</span>,<span class="cm-variable">包含do_install任务的输出，与该任务中的$</span>{<span class="cm-variable">D</span>}<span class="cm-variable">变量相对应。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">image</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">11.</span><span class="cm-variable">$</span>{<span class="cm-variable">WORKDIR</span>}<span class="cm-operator">/</span><span class="cm-variable">sysroot</span><span class="cm-operator">-</span><span class="cm-variable">destdirmulu</span> ,<span class="cm-variable">包含do_populate_sysroot任务的输出。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">work</span><span class="cm-operator">/</span><span class="cm-variable">core2</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">-</span><span class="cm-variable">poky</span><span class="cm-operator">-</span><span class="cm-variable">linux</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">/</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span><span class="cm-operator">/</span><span class="cm-variable">sysroot</span><span class="cm-operator">-</span><span class="cm-variable">destdir</span><span class="cm-operator">/</span><span class="cm-variable">sysroot</span><span class="cm-operator">-</span><span class="cm-variable">providers</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">12.</span><span class="cm-variable">DEPLOY_DIR变量指向build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">deploy</span><span class="cm-operator">/</span><span class="cm-variable">目录，此目录包含OpenEmbedded构建过程中的任何</span> <span class="cm-string">"最终结果 "</span><span class="cm-variable">输出。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">deploy</span><span class="cm-operator">/</span><span class="cm-variable">rpm</span><span class="cm-operator">/</span><span class="cm-variable">这个目录接收由构建过程产生的任何</span> .<span class="cm-variable">rpm</span> <span class="cm-variable">包。这些软件包会被分类到不同架构类型的feeds中。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">deploy</span><span class="cm-operator">/</span><span class="cm-variable">rpm</span><span class="cm-operator">/</span><span class="cm-variable">core2_64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span><span class="cm-operator">-</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span>.<span class="cm-variable">core2_64</span>.<span class="cm-variable">rpm</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">deploy</span><span class="cm-operator">/</span><span class="cm-variable">rpm</span><span class="cm-operator">/</span><span class="cm-variable">core2_64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span>.<span class="cm-variable">core2_64</span>.<span class="cm-variable">rpm</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">deploy</span><span class="cm-operator">/</span><span class="cm-variable">rpm</span><span class="cm-operator">/</span><span class="cm-variable">core2_64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span><span class="cm-operator">-</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span>.<span class="cm-variable">core2_64</span>.<span class="cm-variable">rpm</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">deploy</span><span class="cm-operator">/</span><span class="cm-variable">rpm</span><span class="cm-operator">/</span><span class="cm-variable">core2_64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span><span class="cm-operator">-</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span>.<span class="cm-variable">core2_64</span>.<span class="cm-variable">rpm</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">对其中一个rpm进行解压，目录结构如下</span>,<span class="cm-variable">可以看到生成产物</span><span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span>.</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">├──</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span>.<span class="cm-variable">core2_64</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">│</span>&nbsp;&nbsp; <span class="cm-variable">└──</span> <span class="cm-variable">usr</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">│</span>&nbsp;&nbsp; &nbsp; &nbsp; <span class="cm-variable">└──</span> <span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">│</span>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-variable">└──</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">└──</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-number">1.0</span><span class="cm-operator">-</span><span class="cm-variable">r0</span>.<span class="cm-variable">core2_64</span>.<span class="cm-variable">cpio</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-number">13.</span><span class="cm-variable">$</span>{<span class="cm-variable">STAGING_DIR_HOST</span>}<span class="cm-operator">/</span><span class="cm-variable">pkgdata目录</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">指向一个共享的、全局状态的目录，该目录保存着打包过程中产生的数据。在打包过程中，do_packagedata任务为每个配方打包数据并将其安装到这个临时的共享区域。</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">-</span><span class="cm-variable">reverse</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">src</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dbg</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">staticdev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">dev</span>.<span class="cm-variable">packaged</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">doc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span><span class="cm-operator">-</span><span class="cm-variable">locale</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">build</span><span class="cm-operator">/</span><span class="cm-variable">tmp</span><span class="cm-operator">/</span><span class="cm-variable">pkgdata</span><span class="cm-operator">/</span><span class="cm-variable">qemux86</span><span class="cm-operator">-</span><span class="cm-number">64</span><span class="cm-operator">/</span><span class="cm-variable">runtime</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">makefile</span>.<span class="cm-variable">packaged</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 3536px;"></div><div class="CodeMirror-gutters" style="display: none; height: 3536px;"></div></div></div></pre><h3 id="autotools-方式"><span>Autotools 方式</span></h3><ol start><li><span>构造demo源码:hello-world.c</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;stdio.h&gt;</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable-3">int</span> <span class="cm-def">main</span> (<span class="cm-variable-3">int</span> <span class="cm-variable">argc</span>, <span class="cm-variable-3">char</span> <span class="cm-variable-3">**</span><span class="cm-variable">argv</span>)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">printf</span>(<span class="cm-string">"Hello World with using autotools \n"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 182px;"></div><div class="CodeMirror-gutters" style="display: none; height: 182px;"></div></div></div></pre><ol start="2"><li><span>编写configure.ac和编写Makefile.am文件</span>
<span>configure.ac:</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -*- Autoconf -*-</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># Process this file with autoconf to produce a configure script.</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_PREREQ</span>([<span class="cm-number">2.69</span>])</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">#AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_INIT</span>(<span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">autotoos</span><span class="cm-operator">-</span><span class="cm-variable">bin</span>, <span class="cm-number">1.0</span>)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AM_INIT_AUTOMAKE</span>(<span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">autotoos</span><span class="cm-operator">-</span><span class="cm-variable">bin</span>, <span class="cm-number">1.0</span>)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_CONFIG_SRCDIR</span>([<span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span>.<span class="cm-variable">c</span>])</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_CONFIG_HEADERS</span>([<span class="cm-variable">config</span>.<span class="cm-variable">h</span>])</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># Checks for programs.</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_PROG_CC</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># Checks for libraries.</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># Checks for header files.</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-def">AC_CHECK_HEADERS</span>([<span class="cm-variable">stdlib</span>.<span class="cm-variable">h</span>])</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># Checks for typedefs, structures, and compiler characteristics.</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># Checks for library functions.</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_CONFIG_FILES</span>([<span class="cm-variable">Makefile</span>])</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">AC_OUTPUT</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 624px;"></div><div class="CodeMirror-gutters" style="display: none; height: 624px;"></div></div></div></pre><p><span>Makefile.am:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">AUTOMAKE_OPTIONS=foreign</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bin_PROGRAMS= hello-world-autotools-bin</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">hello_world_autotools_bin_SOURCES= hello-world.c</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><p><span>注：</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">我们一般使用autotools配套的如下工具，来一步一步的生成配置文件和Makefile，</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">autoscan,aclocal,autoconf,autoheader,automake ./configure</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">验证Makefile没有问题后，删除掉其中的很多中间配置文件，只需要留configure.ac 和 Makefile.am即可。</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><p><span>3.编译hello-world-autotools.bb文件</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">SUMMARY</span> <span class="cm-operator">=</span> <span class="cm-string">"helloworld of autotools recipe"</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">DESCRIPTION</span> <span class="cm-operator">=</span> <span class="cm-string">"My hello world application with using the autotools"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">LICENSE</span> <span class="cm-operator">=</span> <span class="cm-string">"CLOSED"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">inherit</span> <span class="cm-variable">autotools</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">FILESEXTRAPATHS_prepend</span> :<span class="cm-operator">=</span> <span class="cm-string">"${THISDIR}:"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># 指定源文件路径</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">SRC_URI</span> <span class="cm-operator">=</span> <span class="cm-string">"file://source-autotools \</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># 构建目录中解压后的配方源代码所在的位置</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">S</span> <span class="cm-operator">=</span> <span class="cm-string">"${WORKDIR}/source-autotools"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># autotools class自动执行了如下类似的操作，并且生成的bin并没有存放在${S}中</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># do_install_append () {</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># &nbsp; &nbsp; install -d ${D}${bindir}/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># &nbsp; &nbsp; install -m 0755 ${S}/hello-world-autotools-bin ${D}${bindir}/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># }</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">FILES_$</span>{<span class="cm-variable">PN</span>} <span class="cm-operator">=</span> <span class="cm-string">"${bindir}/"</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 572px;"></div><div class="CodeMirror-gutters" style="display: none; height: 572px;"></div></div></div></pre><ol start="4"><li><span>构建目录结构，我们在recipes-hello-world目录下，即hello-world-makefile 配方的同级目录，添加了hello-world-autotools 配方</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ tree meta-test-layer/recipes-hello-world/</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta-test-layer/recipes-hello-world/</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">├── hello-world-autotools</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; ├── hello-world-autotools.bb</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; └── source-autotools</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; &nbsp; &nbsp; ├── configure.ac</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; &nbsp; &nbsp; ├── hello-world.c</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; &nbsp; &nbsp; └── Makefile.am</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">└── hello-world-makefile</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">4 directories, 7 files</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 312px;"></div><div class="CodeMirror-gutters" style="display: none; height: 312px;"></div></div></div></pre><ol start="5"><li><span>最后执行如下命令来编译 hello-world-autotools 配方，可以在build看到，生成的内容和hello-world-makefile 配方基本一直，这里不展开说明了。</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ source oe-init-build-env</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky/build$ bitbake hello-world-makefile</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><h3 id="cmake方式"><span>Cmake方式</span></h3><ol start><li><span>构造demo源码:hello-world.c</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;stdio.h&gt;</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable-3">int</span> <span class="cm-def">main</span> (<span class="cm-variable-3">int</span> <span class="cm-variable">argc</span>, <span class="cm-variable-3">char</span> <span class="cm-variable-3">**</span><span class="cm-variable">argv</span>)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">printf</span>(<span class="cm-string">"Hello World with using cmake \n"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 156px;"></div><div class="CodeMirror-gutters" style="display: none; height: 156px;"></div></div></div></pre><ol start="2"><li><span>编写 CMakeLists.txt 文件</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">include(GNUInstallDirs)</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">cmake_minimum_required(VERSION 3.5.1)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">project(hello_world_cmake C)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">add_executable (hello-world-cmake-bin "hello-world.c")</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">INSTALL(TARGETS hello-world-cmake-bin</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">)</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 286px;"></div><div class="CodeMirror-gutters" style="display: none; height: 286px;"></div></div></div></pre><ol start="3"><li><span>执行cmake &amp; make 生成 hello-world-cmake-bin 并测试pass，删除测试相关文件</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">cmake$</span> <span class="cm-variable">mkdir</span> <span class="cm-variable">build</span><span class="cm-operator">/</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">cmake$</span> <span class="cm-variable">cd</span> <span class="cm-variable">build</span><span class="cm-operator">/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">build$</span> <span class="cm-variable">cmake</span> ..<span class="cm-operator">/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">The</span> <span class="cm-variable">C</span> <span class="cm-variable">compiler</span> <span class="cm-variable">identification</span> <span class="cm-variable">is</span> <span class="cm-variable">GNU</span> <span class="cm-number">7.5</span>.<span class="cm-number">0</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Check</span> <span class="cm-keyword">for</span> <span class="cm-variable">working</span> <span class="cm-variable">C</span> <span class="cm-variable">compiler</span>: <span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span><span class="cm-variable">cc</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Check</span> <span class="cm-keyword">for</span> <span class="cm-variable">working</span> <span class="cm-variable">C</span> <span class="cm-variable">compiler</span>: <span class="cm-operator">/</span><span class="cm-variable">usr</span><span class="cm-operator">/</span><span class="cm-variable">bin</span><span class="cm-operator">/</span><span class="cm-variable">cc</span> <span class="cm-operator">--</span> <span class="cm-variable">works</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Detecting</span> <span class="cm-variable">C</span> <span class="cm-variable">compiler</span> <span class="cm-variable">ABI</span> <span class="cm-variable">info</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Detecting</span> <span class="cm-variable">C</span> <span class="cm-variable">compiler</span> <span class="cm-variable">ABI</span> <span class="cm-variable">info</span> <span class="cm-operator">-</span> <span class="cm-variable">done</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Detecting</span> <span class="cm-variable">C</span> <span class="cm-variable">compile</span> <span class="cm-variable">features</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Detecting</span> <span class="cm-variable">C</span> <span class="cm-variable">compile</span> <span class="cm-variable">features</span> <span class="cm-operator">-</span> <span class="cm-variable">done</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Configuring</span> <span class="cm-variable">done</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Generating</span> <span class="cm-variable">done</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-operator">--</span> <span class="cm-variable">Build</span> <span class="cm-variable">files</span> <span class="cm-variable">have</span> <span class="cm-variable">been</span> <span class="cm-variable">written</span> <span class="cm-variable">to</span>: <span class="cm-operator">/</span><span class="cm-variable">home</span><span class="cm-operator">/</span><span class="cm-variable">user</span><span class="cm-operator">/</span><span class="cm-variable">host</span><span class="cm-operator">/</span><span class="cm-variable">code</span><span class="cm-operator">/</span><span class="cm-variable">poky</span><span class="cm-operator">/</span><span class="cm-variable">poky</span><span class="cm-operator">/</span><span class="cm-variable">meta</span><span class="cm-operator">-</span><span class="cm-variable">test</span><span class="cm-operator">-</span><span class="cm-variable">layer</span><span class="cm-operator">/</span><span class="cm-variable">recipes</span><span class="cm-operator">-</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">build</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">build$</span> <span class="cm-variable">make</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Scanning</span> <span class="cm-variable">dependencies</span> <span class="cm-variable">of</span> <span class="cm-variable">target</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">[ <span class="cm-number">50</span><span class="cm-operator">%</span>] <span class="cm-variable">Building</span> <span class="cm-variable">C</span> <span class="cm-variable">object</span> <span class="cm-variable">CMakeFiles</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">-</span><span class="cm-variable">bin</span>.<span class="cm-variable">dir</span><span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span>.<span class="cm-variable">c</span>.<span class="cm-variable">o</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">[<span class="cm-number">100</span><span class="cm-operator">%</span>] <span class="cm-variable">Linking</span> <span class="cm-variable">C</span> <span class="cm-variable">executable</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">[<span class="cm-number">100</span><span class="cm-operator">%</span>] <span class="cm-variable">Built</span> <span class="cm-variable">target</span> <span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">source</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">/</span><span class="cm-variable">build$</span> .<span class="cm-operator">/</span><span class="cm-variable">hello</span><span class="cm-operator">-</span><span class="cm-variable">world</span><span class="cm-operator">-</span><span class="cm-variable">cmake</span><span class="cm-operator">-</span><span class="cm-variable">bin</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Hello</span> <span class="cm-variable">World</span> <span class="cm-variable">with</span> <span class="cm-variable">using</span> <span class="cm-variable">cmake</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 546px;"></div><div class="CodeMirror-gutters" style="display: none; height: 546px;"></div></div></div></pre><ol start="4"><li><span>编译hello-world-cmake.bb文件</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c" style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">SUMMARY</span> <span class="cm-operator">=</span> <span class="cm-string">"helloworld of cmake recipe"</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">DESCRIPTION</span> <span class="cm-operator">=</span> <span class="cm-string">"My hello world application with using the cmake"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">LICENSE</span> <span class="cm-operator">=</span> <span class="cm-string">"CLOSED"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">inherit</span> <span class="cm-variable">cmake</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">FILESEXTRAPATHS_prepend</span> :<span class="cm-operator">=</span> <span class="cm-string">"${THISDIR}:"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># 指定源文件路径</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">SRC_URI</span> <span class="cm-operator">=</span> <span class="cm-string">"file://source-cmake \</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># 构建目录中解压后的配方源代码所在的位置</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">S</span> <span class="cm-operator">=</span> <span class="cm-string">"${WORKDIR}/source-cmake"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># cmake class自动执行了如下类似的操作，并且生成的bin并没有在${S}中</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># do_install_append () {</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># &nbsp; &nbsp; install -d ${D}${bindir}/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># &nbsp; &nbsp; install -m 0755 ${S}/hello-world-cmake-bin ${D}${bindir}/</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta"># }</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">FILES_$</span>{<span class="cm-variable">PN</span>} <span class="cm-operator">=</span> <span class="cm-string">"${bindir}/"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 624px;"></div><div class="CodeMirror-gutters" style="display: none; height: 624px;"></div></div></div></pre><ol start="4"><li><span>构建目录结构，我们在recipes-hello-world目录下，即hello-world-makefile 配方的同级目录，添加了hello-world-cmake 配方</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">/poky$  tree meta-test-layer/recipes-hello-world/</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">meta-test-layer/recipes-hello-world/</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">├── hello-world-autotools</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; ├── hello-world-autotools.bb</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; └── source-autotools</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; &nbsp; &nbsp; ├── configure.ac</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; &nbsp; &nbsp; ├── hello-world.c</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">│&nbsp;&nbsp; &nbsp; &nbsp; └── Makefile.am</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">├── hello-world-cmake</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">└── hello-world-makefile</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">6 directories, 11 files</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 312px;"></div><div class="CodeMirror-gutters" style="display: none; height: 312px;"></div></div></div></pre><ol start="5"><li><span>最后执行如下命令来编译 hello-world-cmake 配方，可以在build看到，生成的内容和hello-world-makefile 配方基本一直，这里不展开说明了。</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky$ source oe-init-build-env</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky/build$ bitbake hello-world-cmake</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 52px;"></div><div class="CodeMirror-gutters" style="display: none; height: 52px;"></div></div></div></pre><p><strong><span>常用全局变量</span></strong></p><ol start><li><span>SRC_URI</span>
<span>源文件列表 - 本地或远程。 此变量告诉 OpenEmbedded 构建系统在哪里拉取源文件以及如何拉取它们。</span></li></ol><p><span>下面列出2个最最最常用的 URI protocols：</span></p><ul><li><p><span>file:// ---&gt; 从本地机器获取文件，通常是元数据附带的文件（例如补丁文件）。 该路径是相对于 FILESPATH  变量的。 因此，构建系统按顺序从以下目录中搜索，这些目录假定为配方文件 (.bb) 或附加文件 (.bbappend) 所在目录的子目录：</span></p><ul><li><span>${BPN}：没有任何特殊后缀或版本号的基本配方名称。</span></li><li><span>${BP}：即${BPN}-${PV}. 基本配方名称和版本，但没有任何特殊的包名称后缀。</span></li><li><span>files：与与配方或附加文件同一级目录下面的Files目录</span></li></ul></li><li><p><span>git:// ---&gt; 从 Git 版本控制存储库中获取文件。</span></p></li></ul><ol start="2"><li><span>recipe 相关</span></li></ol><ul><li><p><span>PN：配方名称或者生成的包的名称</span></p><ul><li><span>1.指的是recipe最基本的名称，如果配方被命名为expat_2.0.1.bb，那么PN的默认值将是 &quot;expat&quot;。</span></li><li><span>2.指的是OpenEmbedded构建系统创建或生产的文件中的软件包名称。</span></li></ul></li><li><p><span>PV：配方的版本，版本通常是从配方的文件名中提取的。如果配方名为expat_2.0.1.bb，那么PV的默认值将是 &quot;2.0.1&quot;</span></p></li><li><p><span>BPN：PN变量的一个版本，删除了常见的前缀和后缀，例如nativesdk-，-cross，-native等等。</span></p></li><li><p><span>BP：基本配方名称和版本，但没有任何特殊的配方名称后缀（即-native，lib64-，等等）。BP由以下部分组成。${BPN}-${PV}</span></p></li></ul><ol start="3"><li><span>TOPDIR</span>
<span>顶层的构建目录。当你使用oe-init-build-env初始化你的构建环境时，BitBake自动设置这个变量。</span>
<span>Epoch 项目 apps_proc/build-qti-distro-ubuntu-fullstack-debug/</span>
<span>Poky开源项目 poky/build/</span></li></ol><ol start="4"><li><span>THISDIR</span>
<span>BitBake目前正在解析的文件所在的目录。不要手动设置这个变量。</span></li><li><span>TMPDIR</span>
<span>这个变量是OpenEmbedded构建系统用于所有构建输出和中间文件（除了共享状态缓存）的基础目录。默认情况下，TMPDIR变量指向Source Directory的tmp目录</span>
<span>apps_proc/build-qti-distro-ubuntu-fullstack-debug/tmp-glibc/</span></li><li><span>WORKDIR</span>
<span>OpenEmbedded构建系统构建配方的工作目录的路径名称。这个目录位于TMPDIR目录结构中，并且是特定于正在构建的配方和正在构建的系统。</span></li></ol><p><span>WORKDIR目录定义如下。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR}。</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>实际的目录取决于如下宏定义。</span></p><p><span>TMPDIR：top-levle的构建输出目录</span>
<span>MULTIMACH_TARGET_SYS: 目标系统标识符，即对应的机器类型</span>
<span>PN：配方名称</span>
<span>EXTENDPE:  The epoch - (if PE is not specified, which is usually the case for most recipes, then EXTENDPE is blank)</span>
<span>PV：配方版本</span>
<span>PR。配方修订版</span>
<span>作为一个例子，假设源目录的顶级文件夹名为poky，默认的构建目录为poky/build，目标系统为qemux86-poky-linux机器。此外，假设你的配方被命名为foo_1.3.0-r0.bb。在这种情况下，构建系统用来构建软件包的工作目录将是如下。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky/build/tmp/work/qemux86-poky-linux/foo/1.3.0-r0</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><ol start="7"><li><span>S</span>
<span>构建目录中未打包的配方源代码所在的位置。默认情况下，该目录为${WORKDIR}/${BPN}-${PV}，其中${BPN}是基本配方名称，${PV}是配方版本。如果源码压缩包将代码提取到${BPN}-${PV}以外的目录，或者源码是从SCM（如Git或Subversion）获取的，那么你必须在配方中设置S，以便OpenEmbedded构建系统知道在哪里找到解压后的源码。</span></li></ol><p><span>作为一个例子，假设 Source Directory 顶层为poky，Build irectory目录在poky/build，配方为db。在这种情况下，构建系统用来保存db的解压配方的工作目录是这样的。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">poky/build/tmp/work/qemux86-poky-linux/db/5.1.19-r3/db-5.1.19</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>解压后的源代码位于db-5.1.19文件夹中。</span></p><p><span>接下来的例子假设了一个 Git 仓库。默认情况下，Git 仓库在 do_fetch 过程中会被克隆到 ${WORKDIR}/git。由于这个路径与S的默认值不同，你必须特别设置，以便能找到源。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">SRC_URI = "git://path/to/repo.git"</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">S = "${WORKDIR}/git"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 78px;"></div><div class="CodeMirror-gutters" style="display: none; height: 78px;"></div></div></div></pre><ol start="8"><li><span>D</span>
<span>目标目录。构建目录中组件被do_install任务安装的位置。该位置默认为:</span></li></ol><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">${WORKDIR}/image</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p>&nbsp;</p><p>&nbsp;</p><h1 id="6-yocto其他工具"><span>6. yocto其他工具</span></h1><p><span>devtool，toaster后续抽空介绍</span></p><h1 id="7-常见用法"><span>7. 常见用法</span></h1><h2 id="1-编译单个bb文件"><span>1. 编译单个bb文件</span></h2><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 编译</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bitbake -b foo_1.0.bb</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 清除编译产物</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bitbake -b foo.bb -c cleansstate</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 130px;"></div><div class="CodeMirror-gutters" style="display: none; height: 130px;"></div></div></div></pre><p><span>&quot;-b &quot;选项明确地不处理配方的依赖关系，一般用于调试目的。</span></p><h2 id="2-执行任务"><span>2. 执行任务</span></h2><p><span>当管理多个.bb文件时，会引入许多额外的复杂性（构建时和运行时的依赖关系，recipe版本等），我们一般使用如下方法来执行任务</span>
<span>bitbake + package name</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"># 编译</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bitbake foo</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#清除</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bitbake foo -c cleansstate</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 130px;"></div><div class="CodeMirror-gutters" style="display: none; height: 130px;"></div></div></div></pre><h2 id="3-生成依赖关系"><span>3. 生成依赖关系</span></h2><p><span>略</span></p><h2 id="4-查看变量的实际值"><span>4. 查看变量的实际值</span></h2><p><span>a. 查看配置文件（local.conf、bblayers.conf、bitbake.conf等） 被解析后显示的变量值</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bitbake -e |grep VARIABLE=</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>b.查看某recipe的值</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">bitbake recipe -e | grep VARIABLE=</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><h2 id="5-提升function为task"><span>5. 提升Function为Task</span></h2><p><span>shell 函数或 BitBake-style Python 函数，通过 addtask 命令可以提升为任务。</span>
<span>addtask 命令还可以选择描述任务和其他任务之间的依赖关系。下面是一个例子，显示了如何定义一个任务并声明一些依赖关系。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">python</span> <span class="cm-def">do_printdate</span> () {</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> <span class="cm-variable">print</span> <span class="cm-variable">time</span>.<span class="cm-variable">strftime</span>(<span class="cm-string">'%Y%m%d'</span>, <span class="cm-variable">time</span>.<span class="cm-variable">gmtime</span>())</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">addtask</span> <span class="cm-variable">printdate</span> <span class="cm-variable">after</span> <span class="cm-variable">do_fetch</span> <span class="cm-variable">before</span> <span class="cm-variable">do_build</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 104px;"></div><div class="CodeMirror-gutters" style="display: none; height: 104px;"></div></div></div></pre><p><span>addtask的第一个参数是要提升为任务的函数的名称。如果名称不是以 &quot;do</span><em><span>&quot;开头，&quot;do</span></em><span>&quot;就会被隐含地添加进去，这样就执行了所有任务名称以 &quot;do_&quot;开头的惯例。</span></p><p><span>do_printdate 任务在do_build之前运行，在do_fetch之后运行。</span></p><h2 id="6-强制执行task"><span>6. 强制执行Task</span></h2><p><span>当用bitbake recipe -c task命令手动选择一个要运行的任务时,你可能会发现该任务（示例：do_printdate）只在你第一次用bitbake命令构建配方时才会运行。这是因为BitBake认为该任务在首次运行后是 &quot;最新的&quot;。如果你想强制该任务总是被重新运行以进行实验，你可以通过使用[nostamp]变量标志使BitBake总是认为该任务是 &quot;过时的&quot;，如下所示。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">do_printdate</span>[<span class="cm-variable">nostamp</span>] <span class="cm-operator">=</span> <span class="cm-string">"1"</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>或者你也可以明确地运行任务并提供-f选项，如下所示。</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="c"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang="c"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 11px; left: 4px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">bitbake</span> <span class="cm-variable">recipe</span> <span class="cm-operator">-</span><span class="cm-variable">c</span> <span class="cm-variable">printdate</span> <span class="cm-operator">-</span><span class="cm-variable">f</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 26px;"></div><div class="CodeMirror-gutters" style="display: none; height: 26px;"></div></div></div></pre><p><span>注：本文档大部分内容为翻译参考资料中的官方英文文档</span></p><h2 id="7-官方-qa-error-and-waring-messages"><span>7. 官方 QA Error and Waring Messages</span></h2><p><span>详情参考：</span><a href="https://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#ref-qa-checks"><span>Yocto Project Reference Manual</span></a></p><p>&nbsp;</p><p><span>参考资料：</span></p><ul><li><a href="http://docs.yoctoproject.org/"><span>Welcome to the Yocto Project Documentation — The Yocto Project ® dev documentation</span></a></li><li><a href="https://wiki.yoctoproject.org/wiki/Main_Page"><span>Yocto Project</span></a></li></ul><p>&nbsp;</p></div></div>
</body>
</html>]]></content>
  </entry>
</search>
